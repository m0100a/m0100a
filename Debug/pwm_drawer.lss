
pwm_drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  00004038  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001e4  008001e4  00004250  2**0
                  ALLOC
  3 .stab         00003510  00000000  00000000  00004250  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a2d  00000000  00000000  00007760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000234  00000000  00000000  0000a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002791  00000000  00000000  0000a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015bc  00000000  00000000  0000cd32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013e2  00000000  00000000  0000e2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000f6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000342  00000000  00000000  0000f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b12  00000000  00000000  0000fc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <main>
      8a:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
     1bc:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <_fpadd_parts>:
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__>
     1f4:	dc 01       	movw	r26, r24
     1f6:	2b 01       	movw	r4, r22
     1f8:	fa 01       	movw	r30, r20
     1fa:	9c 91       	ld	r25, X
     1fc:	92 30       	cpi	r25, 0x02	; 2
     1fe:	08 f4       	brcc	.+2      	; 0x202 <_fpadd_parts+0x1a>
     200:	39 c1       	rjmp	.+626    	; 0x474 <_fpadd_parts+0x28c>
     202:	eb 01       	movw	r28, r22
     204:	88 81       	ld	r24, Y
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	08 f4       	brcc	.+2      	; 0x20c <_fpadd_parts+0x24>
     20a:	33 c1       	rjmp	.+614    	; 0x472 <_fpadd_parts+0x28a>
     20c:	94 30       	cpi	r25, 0x04	; 4
     20e:	69 f4       	brne	.+26     	; 0x22a <_fpadd_parts+0x42>
     210:	84 30       	cpi	r24, 0x04	; 4
     212:	09 f0       	breq	.+2      	; 0x216 <_fpadd_parts+0x2e>
     214:	2f c1       	rjmp	.+606    	; 0x474 <_fpadd_parts+0x28c>
     216:	11 96       	adiw	r26, 0x01	; 1
     218:	9c 91       	ld	r25, X
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	98 17       	cp	r25, r24
     220:	09 f4       	brne	.+2      	; 0x224 <_fpadd_parts+0x3c>
     222:	28 c1       	rjmp	.+592    	; 0x474 <_fpadd_parts+0x28c>
     224:	af e8       	ldi	r26, 0x8F	; 143
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	25 c1       	rjmp	.+586    	; 0x474 <_fpadd_parts+0x28c>
     22a:	84 30       	cpi	r24, 0x04	; 4
     22c:	09 f4       	brne	.+2      	; 0x230 <_fpadd_parts+0x48>
     22e:	21 c1       	rjmp	.+578    	; 0x472 <_fpadd_parts+0x28a>
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	a9 f4       	brne	.+42     	; 0x25e <_fpadd_parts+0x76>
     234:	92 30       	cpi	r25, 0x02	; 2
     236:	09 f0       	breq	.+2      	; 0x23a <_fpadd_parts+0x52>
     238:	1d c1       	rjmp	.+570    	; 0x474 <_fpadd_parts+0x28c>
     23a:	9a 01       	movw	r18, r20
     23c:	ad 01       	movw	r20, r26
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	ea 01       	movw	r28, r20
     242:	09 90       	ld	r0, Y+
     244:	ae 01       	movw	r20, r28
     246:	e9 01       	movw	r28, r18
     248:	09 92       	st	Y+, r0
     24a:	9e 01       	movw	r18, r28
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	c1 f7       	brne	.-16     	; 0x240 <_fpadd_parts+0x58>
     250:	e2 01       	movw	r28, r4
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	11 96       	adiw	r26, 0x01	; 1
     256:	9c 91       	ld	r25, X
     258:	89 23       	and	r24, r25
     25a:	81 83       	std	Z+1, r24	; 0x01
     25c:	08 c1       	rjmp	.+528    	; 0x46e <_fpadd_parts+0x286>
     25e:	92 30       	cpi	r25, 0x02	; 2
     260:	09 f4       	brne	.+2      	; 0x264 <_fpadd_parts+0x7c>
     262:	07 c1       	rjmp	.+526    	; 0x472 <_fpadd_parts+0x28a>
     264:	12 96       	adiw	r26, 0x02	; 2
     266:	2d 90       	ld	r2, X+
     268:	3c 90       	ld	r3, X
     26a:	13 97       	sbiw	r26, 0x03	; 3
     26c:	eb 01       	movw	r28, r22
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	9b 81       	ldd	r25, Y+3	; 0x03
     272:	14 96       	adiw	r26, 0x04	; 4
     274:	ad 90       	ld	r10, X+
     276:	bd 90       	ld	r11, X+
     278:	cd 90       	ld	r12, X+
     27a:	dc 90       	ld	r13, X
     27c:	17 97       	sbiw	r26, 0x07	; 7
     27e:	ec 80       	ldd	r14, Y+4	; 0x04
     280:	fd 80       	ldd	r15, Y+5	; 0x05
     282:	0e 81       	ldd	r16, Y+6	; 0x06
     284:	1f 81       	ldd	r17, Y+7	; 0x07
     286:	91 01       	movw	r18, r2
     288:	28 1b       	sub	r18, r24
     28a:	39 0b       	sbc	r19, r25
     28c:	b9 01       	movw	r22, r18
     28e:	37 ff       	sbrs	r19, 7
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xb2>
     292:	66 27       	eor	r22, r22
     294:	77 27       	eor	r23, r23
     296:	62 1b       	sub	r22, r18
     298:	73 0b       	sbc	r23, r19
     29a:	60 32       	cpi	r22, 0x20	; 32
     29c:	71 05       	cpc	r23, r1
     29e:	0c f0       	brlt	.+2      	; 0x2a2 <_fpadd_parts+0xba>
     2a0:	61 c0       	rjmp	.+194    	; 0x364 <_fpadd_parts+0x17c>
     2a2:	12 16       	cp	r1, r18
     2a4:	13 06       	cpc	r1, r19
     2a6:	6c f5       	brge	.+90     	; 0x302 <_fpadd_parts+0x11a>
     2a8:	37 01       	movw	r6, r14
     2aa:	48 01       	movw	r8, r16
     2ac:	06 2e       	mov	r0, r22
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <_fpadd_parts+0xd0>
     2b0:	96 94       	lsr	r9
     2b2:	87 94       	ror	r8
     2b4:	77 94       	ror	r7
     2b6:	67 94       	ror	r6
     2b8:	0a 94       	dec	r0
     2ba:	d2 f7       	brpl	.-12     	; 0x2b0 <_fpadd_parts+0xc8>
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <_fpadd_parts+0xe6>
     2c6:	22 0f       	add	r18, r18
     2c8:	33 1f       	adc	r19, r19
     2ca:	44 1f       	adc	r20, r20
     2cc:	55 1f       	adc	r21, r21
     2ce:	6a 95       	dec	r22
     2d0:	d2 f7       	brpl	.-12     	; 0x2c6 <_fpadd_parts+0xde>
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	40 40       	sbci	r20, 0x00	; 0
     2d8:	50 40       	sbci	r21, 0x00	; 0
     2da:	2e 21       	and	r18, r14
     2dc:	3f 21       	and	r19, r15
     2de:	40 23       	and	r20, r16
     2e0:	51 23       	and	r21, r17
     2e2:	21 15       	cp	r18, r1
     2e4:	31 05       	cpc	r19, r1
     2e6:	41 05       	cpc	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <_fpadd_parts+0x10c>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	79 01       	movw	r14, r18
     2f6:	8a 01       	movw	r16, r20
     2f8:	e6 28       	or	r14, r6
     2fa:	f7 28       	or	r15, r7
     2fc:	08 29       	or	r16, r8
     2fe:	19 29       	or	r17, r9
     300:	3c c0       	rjmp	.+120    	; 0x37a <_fpadd_parts+0x192>
     302:	23 2b       	or	r18, r19
     304:	d1 f1       	breq	.+116    	; 0x37a <_fpadd_parts+0x192>
     306:	26 0e       	add	r2, r22
     308:	37 1e       	adc	r3, r23
     30a:	35 01       	movw	r6, r10
     30c:	46 01       	movw	r8, r12
     30e:	06 2e       	mov	r0, r22
     310:	04 c0       	rjmp	.+8      	; 0x31a <_fpadd_parts+0x132>
     312:	96 94       	lsr	r9
     314:	87 94       	ror	r8
     316:	77 94       	ror	r7
     318:	67 94       	ror	r6
     31a:	0a 94       	dec	r0
     31c:	d2 f7       	brpl	.-12     	; 0x312 <_fpadd_parts+0x12a>
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <_fpadd_parts+0x148>
     328:	22 0f       	add	r18, r18
     32a:	33 1f       	adc	r19, r19
     32c:	44 1f       	adc	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	d2 f7       	brpl	.-12     	; 0x328 <_fpadd_parts+0x140>
     334:	21 50       	subi	r18, 0x01	; 1
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	50 40       	sbci	r21, 0x00	; 0
     33c:	2a 21       	and	r18, r10
     33e:	3b 21       	and	r19, r11
     340:	4c 21       	and	r20, r12
     342:	5d 21       	and	r21, r13
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	41 05       	cpc	r20, r1
     34a:	51 05       	cpc	r21, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <_fpadd_parts+0x16e>
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	59 01       	movw	r10, r18
     358:	6a 01       	movw	r12, r20
     35a:	a6 28       	or	r10, r6
     35c:	b7 28       	or	r11, r7
     35e:	c8 28       	or	r12, r8
     360:	d9 28       	or	r13, r9
     362:	0b c0       	rjmp	.+22     	; 0x37a <_fpadd_parts+0x192>
     364:	82 15       	cp	r24, r2
     366:	93 05       	cpc	r25, r3
     368:	2c f0       	brlt	.+10     	; 0x374 <_fpadd_parts+0x18c>
     36a:	1c 01       	movw	r2, r24
     36c:	aa 24       	eor	r10, r10
     36e:	bb 24       	eor	r11, r11
     370:	65 01       	movw	r12, r10
     372:	03 c0       	rjmp	.+6      	; 0x37a <_fpadd_parts+0x192>
     374:	ee 24       	eor	r14, r14
     376:	ff 24       	eor	r15, r15
     378:	87 01       	movw	r16, r14
     37a:	11 96       	adiw	r26, 0x01	; 1
     37c:	9c 91       	ld	r25, X
     37e:	d2 01       	movw	r26, r4
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	8c 91       	ld	r24, X
     384:	98 17       	cp	r25, r24
     386:	09 f4       	brne	.+2      	; 0x38a <_fpadd_parts+0x1a2>
     388:	45 c0       	rjmp	.+138    	; 0x414 <_fpadd_parts+0x22c>
     38a:	99 23       	and	r25, r25
     38c:	39 f0       	breq	.+14     	; 0x39c <_fpadd_parts+0x1b4>
     38e:	a8 01       	movw	r20, r16
     390:	97 01       	movw	r18, r14
     392:	2a 19       	sub	r18, r10
     394:	3b 09       	sbc	r19, r11
     396:	4c 09       	sbc	r20, r12
     398:	5d 09       	sbc	r21, r13
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <_fpadd_parts+0x1c0>
     39c:	a6 01       	movw	r20, r12
     39e:	95 01       	movw	r18, r10
     3a0:	2e 19       	sub	r18, r14
     3a2:	3f 09       	sbc	r19, r15
     3a4:	40 0b       	sbc	r20, r16
     3a6:	51 0b       	sbc	r21, r17
     3a8:	57 fd       	sbrc	r21, 7
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <_fpadd_parts+0x1d4>
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	33 82       	std	Z+3, r3	; 0x03
     3b0:	22 82       	std	Z+2, r2	; 0x02
     3b2:	24 83       	std	Z+4, r18	; 0x04
     3b4:	35 83       	std	Z+5, r19	; 0x05
     3b6:	46 83       	std	Z+6, r20	; 0x06
     3b8:	57 83       	std	Z+7, r21	; 0x07
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <_fpadd_parts+0x20e>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	81 83       	std	Z+1, r24	; 0x01
     3c0:	33 82       	std	Z+3, r3	; 0x03
     3c2:	22 82       	std	Z+2, r2	; 0x02
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	dc 01       	movw	r26, r24
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	a4 0b       	sbc	r26, r20
     3d0:	b5 0b       	sbc	r27, r21
     3d2:	84 83       	std	Z+4, r24	; 0x04
     3d4:	95 83       	std	Z+5, r25	; 0x05
     3d6:	a6 83       	std	Z+6, r26	; 0x06
     3d8:	b7 83       	std	Z+7, r27	; 0x07
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <_fpadd_parts+0x20e>
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	44 1f       	adc	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	24 83       	std	Z+4, r18	; 0x04
     3e6:	35 83       	std	Z+5, r19	; 0x05
     3e8:	46 83       	std	Z+6, r20	; 0x06
     3ea:	57 83       	std	Z+7, r21	; 0x07
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	93 83       	std	Z+3, r25	; 0x03
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	46 81       	ldd	r20, Z+6	; 0x06
     3fc:	57 81       	ldd	r21, Z+7	; 0x07
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	a1 09       	sbc	r26, r1
     406:	b1 09       	sbc	r27, r1
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	9f 4f       	sbci	r25, 0xFF	; 255
     40c:	af 4f       	sbci	r26, 0xFF	; 255
     40e:	bf 43       	sbci	r27, 0x3F	; 63
     410:	28 f3       	brcs	.-54     	; 0x3dc <_fpadd_parts+0x1f4>
     412:	0b c0       	rjmp	.+22     	; 0x42a <_fpadd_parts+0x242>
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	33 82       	std	Z+3, r3	; 0x03
     418:	22 82       	std	Z+2, r2	; 0x02
     41a:	ea 0c       	add	r14, r10
     41c:	fb 1c       	adc	r15, r11
     41e:	0c 1d       	adc	r16, r12
     420:	1d 1d       	adc	r17, r13
     422:	e4 82       	std	Z+4, r14	; 0x04
     424:	f5 82       	std	Z+5, r15	; 0x05
     426:	06 83       	std	Z+6, r16	; 0x06
     428:	17 83       	std	Z+7, r17	; 0x07
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	80 83       	st	Z, r24
     42e:	24 81       	ldd	r18, Z+4	; 0x04
     430:	35 81       	ldd	r19, Z+5	; 0x05
     432:	46 81       	ldd	r20, Z+6	; 0x06
     434:	57 81       	ldd	r21, Z+7	; 0x07
     436:	57 ff       	sbrs	r21, 7
     438:	1a c0       	rjmp	.+52     	; 0x46e <_fpadd_parts+0x286>
     43a:	c9 01       	movw	r24, r18
     43c:	aa 27       	eor	r26, r26
     43e:	97 fd       	sbrc	r25, 7
     440:	a0 95       	com	r26
     442:	ba 2f       	mov	r27, r26
     444:	81 70       	andi	r24, 0x01	; 1
     446:	90 70       	andi	r25, 0x00	; 0
     448:	a0 70       	andi	r26, 0x00	; 0
     44a:	b0 70       	andi	r27, 0x00	; 0
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	37 95       	ror	r19
     452:	27 95       	ror	r18
     454:	82 2b       	or	r24, r18
     456:	93 2b       	or	r25, r19
     458:	a4 2b       	or	r26, r20
     45a:	b5 2b       	or	r27, r21
     45c:	84 83       	std	Z+4, r24	; 0x04
     45e:	95 83       	std	Z+5, r25	; 0x05
     460:	a6 83       	std	Z+6, r26	; 0x06
     462:	b7 83       	std	Z+7, r27	; 0x07
     464:	82 81       	ldd	r24, Z+2	; 0x02
     466:	93 81       	ldd	r25, Z+3	; 0x03
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	93 83       	std	Z+3, r25	; 0x03
     46c:	82 83       	std	Z+2, r24	; 0x02
     46e:	df 01       	movw	r26, r30
     470:	01 c0       	rjmp	.+2      	; 0x474 <_fpadd_parts+0x28c>
     472:	d2 01       	movw	r26, r4
     474:	cd 01       	movw	r24, r26
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	e2 e1       	ldi	r30, 0x12	; 18
     47c:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__>

00000480 <__subsf3>:
     480:	a0 e2       	ldi	r26, 0x20	; 32
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e6 e4       	ldi	r30, 0x46	; 70
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x18>
     48c:	69 83       	std	Y+1, r22	; 0x01
     48e:	7a 83       	std	Y+2, r23	; 0x02
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	2d 83       	std	Y+5, r18	; 0x05
     496:	3e 83       	std	Y+6, r19	; 0x06
     498:	4f 83       	std	Y+7, r20	; 0x07
     49a:	58 87       	std	Y+8, r21	; 0x08
     49c:	e9 e0       	ldi	r30, 0x09	; 9
     49e:	ee 2e       	mov	r14, r30
     4a0:	f1 2c       	mov	r15, r1
     4a2:	ec 0e       	add	r14, r28
     4a4:	fd 1e       	adc	r15, r29
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	b7 01       	movw	r22, r14
     4ac:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5e       	subi	r16, 0xEF	; 239
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	ce 01       	movw	r24, r28
     4b8:	05 96       	adiw	r24, 0x05	; 5
     4ba:	b8 01       	movw	r22, r16
     4bc:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     4c0:	8a 89       	ldd	r24, Y+18	; 0x12
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	89 27       	eor	r24, r25
     4c6:	8a 8b       	std	Y+18, r24	; 0x12
     4c8:	c7 01       	movw	r24, r14
     4ca:	b8 01       	movw	r22, r16
     4cc:	ae 01       	movw	r20, r28
     4ce:	47 5e       	subi	r20, 0xE7	; 231
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     4d6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     4da:	a0 96       	adiw	r28, 0x20	; 32
     4dc:	e6 e0       	ldi	r30, 0x06	; 6
     4de:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x18>

000004e2 <__addsf3>:
     4e2:	a0 e2       	ldi	r26, 0x20	; 32
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e7 e7       	ldi	r30, 0x77	; 119
     4e8:	f2 e0       	ldi	r31, 0x02	; 2
     4ea:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x18>
     4ee:	69 83       	std	Y+1, r22	; 0x01
     4f0:	7a 83       	std	Y+2, r23	; 0x02
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	2d 83       	std	Y+5, r18	; 0x05
     4f8:	3e 83       	std	Y+6, r19	; 0x06
     4fa:	4f 83       	std	Y+7, r20	; 0x07
     4fc:	58 87       	std	Y+8, r21	; 0x08
     4fe:	f9 e0       	ldi	r31, 0x09	; 9
     500:	ef 2e       	mov	r14, r31
     502:	f1 2c       	mov	r15, r1
     504:	ec 0e       	add	r14, r28
     506:	fd 1e       	adc	r15, r29
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	b7 01       	movw	r22, r14
     50e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     512:	8e 01       	movw	r16, r28
     514:	0f 5e       	subi	r16, 0xEF	; 239
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	ce 01       	movw	r24, r28
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	b8 01       	movw	r22, r16
     51e:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     522:	c7 01       	movw	r24, r14
     524:	b8 01       	movw	r22, r16
     526:	ae 01       	movw	r20, r28
     528:	47 5e       	subi	r20, 0xE7	; 231
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fpadd_parts>
     530:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     534:	a0 96       	adiw	r28, 0x20	; 32
     536:	e6 e0       	ldi	r30, 0x06	; 6
     538:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x18>

0000053c <__mulsf3>:
     53c:	a0 e2       	ldi	r26, 0x20	; 32
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	e4 ea       	ldi	r30, 0xA4	; 164
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__>
     548:	69 83       	std	Y+1, r22	; 0x01
     54a:	7a 83       	std	Y+2, r23	; 0x02
     54c:	8b 83       	std	Y+3, r24	; 0x03
     54e:	9c 83       	std	Y+4, r25	; 0x04
     550:	2d 83       	std	Y+5, r18	; 0x05
     552:	3e 83       	std	Y+6, r19	; 0x06
     554:	4f 83       	std	Y+7, r20	; 0x07
     556:	58 87       	std	Y+8, r21	; 0x08
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	be 01       	movw	r22, r28
     55e:	67 5f       	subi	r22, 0xF7	; 247
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     566:	ce 01       	movw	r24, r28
     568:	05 96       	adiw	r24, 0x05	; 5
     56a:	be 01       	movw	r22, r28
     56c:	6f 5e       	subi	r22, 0xEF	; 239
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     574:	99 85       	ldd	r25, Y+9	; 0x09
     576:	92 30       	cpi	r25, 0x02	; 2
     578:	88 f0       	brcs	.+34     	; 0x59c <__mulsf3+0x60>
     57a:	89 89       	ldd	r24, Y+17	; 0x11
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	c8 f0       	brcs	.+50     	; 0x5b2 <__mulsf3+0x76>
     580:	94 30       	cpi	r25, 0x04	; 4
     582:	19 f4       	brne	.+6      	; 0x58a <__mulsf3+0x4e>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	51 f4       	brne	.+20     	; 0x59c <__mulsf3+0x60>
     588:	04 c0       	rjmp	.+8      	; 0x592 <__mulsf3+0x56>
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	29 f4       	brne	.+10     	; 0x598 <__mulsf3+0x5c>
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	81 f4       	brne	.+32     	; 0x5b2 <__mulsf3+0x76>
     592:	8f e8       	ldi	r24, 0x8F	; 143
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	c6 c0       	rjmp	.+396    	; 0x724 <__mulsf3+0x1e8>
     598:	92 30       	cpi	r25, 0x02	; 2
     59a:	49 f4       	brne	.+18     	; 0x5ae <__mulsf3+0x72>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a0:	8a 89       	ldd	r24, Y+18	; 0x12
     5a2:	98 13       	cpse	r25, r24
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	2a 87       	std	Y+10, r18	; 0x0a
     5a8:	ce 01       	movw	r24, r28
     5aa:	09 96       	adiw	r24, 0x09	; 9
     5ac:	bb c0       	rjmp	.+374    	; 0x724 <__mulsf3+0x1e8>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <__mulsf3+0x88>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	8a 89       	ldd	r24, Y+18	; 0x12
     5b8:	98 13       	cpse	r25, r24
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	2a 8b       	std	Y+18, r18	; 0x12
     5be:	ce 01       	movw	r24, r28
     5c0:	41 96       	adiw	r24, 0x11	; 17
     5c2:	b0 c0       	rjmp	.+352    	; 0x724 <__mulsf3+0x1e8>
     5c4:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c6:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c8:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ca:	58 88       	ldd	r5, Y+16	; 0x10
     5cc:	6d 88       	ldd	r6, Y+21	; 0x15
     5ce:	7e 88       	ldd	r7, Y+22	; 0x16
     5d0:	8f 88       	ldd	r8, Y+23	; 0x17
     5d2:	98 8c       	ldd	r9, Y+24	; 0x18
     5d4:	ee 24       	eor	r14, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	87 01       	movw	r16, r14
     5da:	aa 24       	eor	r10, r10
     5dc:	bb 24       	eor	r11, r11
     5de:	65 01       	movw	r12, r10
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	e0 e0       	ldi	r30, 0x00	; 0
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	c1 01       	movw	r24, r2
     5ee:	81 70       	andi	r24, 0x01	; 1
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	89 2b       	or	r24, r25
     5f4:	e9 f0       	breq	.+58     	; 0x630 <__mulsf3+0xf4>
     5f6:	e6 0c       	add	r14, r6
     5f8:	f7 1c       	adc	r15, r7
     5fa:	08 1d       	adc	r16, r8
     5fc:	19 1d       	adc	r17, r9
     5fe:	9a 01       	movw	r18, r20
     600:	ab 01       	movw	r20, r22
     602:	2a 0d       	add	r18, r10
     604:	3b 1d       	adc	r19, r11
     606:	4c 1d       	adc	r20, r12
     608:	5d 1d       	adc	r21, r13
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e6 14       	cp	r14, r6
     614:	f7 04       	cpc	r15, r7
     616:	08 05       	cpc	r16, r8
     618:	19 05       	cpc	r17, r9
     61a:	20 f4       	brcc	.+8      	; 0x624 <__mulsf3+0xe8>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	ba 01       	movw	r22, r20
     626:	a9 01       	movw	r20, r18
     628:	48 0f       	add	r20, r24
     62a:	59 1f       	adc	r21, r25
     62c:	6a 1f       	adc	r22, r26
     62e:	7b 1f       	adc	r23, r27
     630:	aa 0c       	add	r10, r10
     632:	bb 1c       	adc	r11, r11
     634:	cc 1c       	adc	r12, r12
     636:	dd 1c       	adc	r13, r13
     638:	97 fe       	sbrs	r9, 7
     63a:	08 c0       	rjmp	.+16     	; 0x64c <__mulsf3+0x110>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	a8 2a       	or	r10, r24
     646:	b9 2a       	or	r11, r25
     648:	ca 2a       	or	r12, r26
     64a:	db 2a       	or	r13, r27
     64c:	31 96       	adiw	r30, 0x01	; 1
     64e:	e0 32       	cpi	r30, 0x20	; 32
     650:	f1 05       	cpc	r31, r1
     652:	49 f0       	breq	.+18     	; 0x666 <__mulsf3+0x12a>
     654:	66 0c       	add	r6, r6
     656:	77 1c       	adc	r7, r7
     658:	88 1c       	adc	r8, r8
     65a:	99 1c       	adc	r9, r9
     65c:	56 94       	lsr	r5
     65e:	47 94       	ror	r4
     660:	37 94       	ror	r3
     662:	27 94       	ror	r2
     664:	c3 cf       	rjmp	.-122    	; 0x5ec <__mulsf3+0xb0>
     666:	fa 85       	ldd	r31, Y+10	; 0x0a
     668:	ea 89       	ldd	r30, Y+18	; 0x12
     66a:	2b 89       	ldd	r18, Y+19	; 0x13
     66c:	3c 89       	ldd	r19, Y+20	; 0x14
     66e:	8b 85       	ldd	r24, Y+11	; 0x0b
     670:	9c 85       	ldd	r25, Y+12	; 0x0c
     672:	28 0f       	add	r18, r24
     674:	39 1f       	adc	r19, r25
     676:	2e 5f       	subi	r18, 0xFE	; 254
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	17 c0       	rjmp	.+46     	; 0x6aa <__mulsf3+0x16e>
     67c:	ca 01       	movw	r24, r20
     67e:	81 70       	andi	r24, 0x01	; 1
     680:	90 70       	andi	r25, 0x00	; 0
     682:	89 2b       	or	r24, r25
     684:	61 f0       	breq	.+24     	; 0x69e <__mulsf3+0x162>
     686:	16 95       	lsr	r17
     688:	07 95       	ror	r16
     68a:	f7 94       	ror	r15
     68c:	e7 94       	ror	r14
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e8       	ldi	r27, 0x80	; 128
     696:	e8 2a       	or	r14, r24
     698:	f9 2a       	or	r15, r25
     69a:	0a 2b       	or	r16, r26
     69c:	1b 2b       	or	r17, r27
     69e:	76 95       	lsr	r23
     6a0:	67 95       	ror	r22
     6a2:	57 95       	ror	r21
     6a4:	47 95       	ror	r20
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	77 fd       	sbrc	r23, 7
     6ac:	e7 cf       	rjmp	.-50     	; 0x67c <__mulsf3+0x140>
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__mulsf3+0x18c>
     6b0:	44 0f       	add	r20, r20
     6b2:	55 1f       	adc	r21, r21
     6b4:	66 1f       	adc	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	17 fd       	sbrc	r17, 7
     6ba:	41 60       	ori	r20, 0x01	; 1
     6bc:	ee 0c       	add	r14, r14
     6be:	ff 1c       	adc	r15, r15
     6c0:	00 1f       	adc	r16, r16
     6c2:	11 1f       	adc	r17, r17
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
     6c8:	40 30       	cpi	r20, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	59 07       	cpc	r21, r25
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	69 07       	cpc	r22, r25
     6d2:	90 e4       	ldi	r25, 0x40	; 64
     6d4:	79 07       	cpc	r23, r25
     6d6:	60 f3       	brcs	.-40     	; 0x6b0 <__mulsf3+0x174>
     6d8:	2b 8f       	std	Y+27, r18	; 0x1b
     6da:	3c 8f       	std	Y+28, r19	; 0x1c
     6dc:	db 01       	movw	r26, r22
     6de:	ca 01       	movw	r24, r20
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	a0 70       	andi	r26, 0x00	; 0
     6e6:	b0 70       	andi	r27, 0x00	; 0
     6e8:	80 34       	cpi	r24, 0x40	; 64
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	61 f4       	brne	.+24     	; 0x70a <__mulsf3+0x1ce>
     6f2:	47 fd       	sbrc	r20, 7
     6f4:	0a c0       	rjmp	.+20     	; 0x70a <__mulsf3+0x1ce>
     6f6:	e1 14       	cp	r14, r1
     6f8:	f1 04       	cpc	r15, r1
     6fa:	01 05       	cpc	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	29 f0       	breq	.+10     	; 0x70a <__mulsf3+0x1ce>
     700:	40 5c       	subi	r20, 0xC0	; 192
     702:	5f 4f       	sbci	r21, 0xFF	; 255
     704:	6f 4f       	sbci	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	40 78       	andi	r20, 0x80	; 128
     70a:	1a 8e       	std	Y+26, r1	; 0x1a
     70c:	fe 17       	cp	r31, r30
     70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1d8>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	4d 8f       	std	Y+29, r20	; 0x1d
     716:	5e 8f       	std	Y+30, r21	; 0x1e
     718:	6f 8f       	std	Y+31, r22	; 0x1f
     71a:	78 a3       	std	Y+32, r23	; 0x20
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	89 8f       	std	Y+25, r24	; 0x19
     720:	ce 01       	movw	r24, r28
     722:	49 96       	adiw	r24, 0x19	; 25
     724:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     728:	a0 96       	adiw	r28, 0x20	; 32
     72a:	e2 e1       	ldi	r30, 0x12	; 18
     72c:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__>

00000730 <__divsf3>:
     730:	a8 e1       	ldi	r26, 0x18	; 24
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	ee e9       	ldi	r30, 0x9E	; 158
     736:	f3 e0       	ldi	r31, 0x03	; 3
     738:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__prologue_saves__+0x10>
     73c:	69 83       	std	Y+1, r22	; 0x01
     73e:	7a 83       	std	Y+2, r23	; 0x02
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	9c 83       	std	Y+4, r25	; 0x04
     744:	2d 83       	std	Y+5, r18	; 0x05
     746:	3e 83       	std	Y+6, r19	; 0x06
     748:	4f 83       	std	Y+7, r20	; 0x07
     74a:	58 87       	std	Y+8, r21	; 0x08
     74c:	b9 e0       	ldi	r27, 0x09	; 9
     74e:	eb 2e       	mov	r14, r27
     750:	f1 2c       	mov	r15, r1
     752:	ec 0e       	add	r14, r28
     754:	fd 1e       	adc	r15, r29
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	b7 01       	movw	r22, r14
     75c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     760:	8e 01       	movw	r16, r28
     762:	0f 5e       	subi	r16, 0xEF	; 239
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	ce 01       	movw	r24, r28
     768:	05 96       	adiw	r24, 0x05	; 5
     76a:	b8 01       	movw	r22, r16
     76c:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     770:	29 85       	ldd	r18, Y+9	; 0x09
     772:	22 30       	cpi	r18, 0x02	; 2
     774:	08 f4       	brcc	.+2      	; 0x778 <__divsf3+0x48>
     776:	7e c0       	rjmp	.+252    	; 0x874 <__stack+0x15>
     778:	39 89       	ldd	r19, Y+17	; 0x11
     77a:	32 30       	cpi	r19, 0x02	; 2
     77c:	10 f4       	brcc	.+4      	; 0x782 <__divsf3+0x52>
     77e:	b8 01       	movw	r22, r16
     780:	7c c0       	rjmp	.+248    	; 0x87a <__stack+0x1b>
     782:	8a 85       	ldd	r24, Y+10	; 0x0a
     784:	9a 89       	ldd	r25, Y+18	; 0x12
     786:	89 27       	eor	r24, r25
     788:	8a 87       	std	Y+10, r24	; 0x0a
     78a:	24 30       	cpi	r18, 0x04	; 4
     78c:	11 f0       	breq	.+4      	; 0x792 <__divsf3+0x62>
     78e:	22 30       	cpi	r18, 0x02	; 2
     790:	31 f4       	brne	.+12     	; 0x79e <__divsf3+0x6e>
     792:	23 17       	cp	r18, r19
     794:	09 f0       	breq	.+2      	; 0x798 <__divsf3+0x68>
     796:	6e c0       	rjmp	.+220    	; 0x874 <__stack+0x15>
     798:	6f e8       	ldi	r22, 0x8F	; 143
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	6e c0       	rjmp	.+220    	; 0x87a <__stack+0x1b>
     79e:	34 30       	cpi	r19, 0x04	; 4
     7a0:	39 f4       	brne	.+14     	; 0x7b0 <__divsf3+0x80>
     7a2:	1d 86       	std	Y+13, r1	; 0x0d
     7a4:	1e 86       	std	Y+14, r1	; 0x0e
     7a6:	1f 86       	std	Y+15, r1	; 0x0f
     7a8:	18 8a       	std	Y+16, r1	; 0x10
     7aa:	1c 86       	std	Y+12, r1	; 0x0c
     7ac:	1b 86       	std	Y+11, r1	; 0x0b
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__divsf3+0x88>
     7b0:	32 30       	cpi	r19, 0x02	; 2
     7b2:	21 f4       	brne	.+8      	; 0x7bc <__divsf3+0x8c>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	89 87       	std	Y+9, r24	; 0x09
     7b8:	b7 01       	movw	r22, r14
     7ba:	5f c0       	rjmp	.+190    	; 0x87a <__stack+0x1b>
     7bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     7be:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	28 1b       	sub	r18, r24
     7c6:	39 0b       	sbc	r19, r25
     7c8:	3c 87       	std	Y+12, r19	; 0x0c
     7ca:	2b 87       	std	Y+11, r18	; 0x0b
     7cc:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ce:	fe 84       	ldd	r15, Y+14	; 0x0e
     7d0:	0f 85       	ldd	r16, Y+15	; 0x0f
     7d2:	18 89       	ldd	r17, Y+16	; 0x10
     7d4:	ad 88       	ldd	r10, Y+21	; 0x15
     7d6:	be 88       	ldd	r11, Y+22	; 0x16
     7d8:	cf 88       	ldd	r12, Y+23	; 0x17
     7da:	d8 8c       	ldd	r13, Y+24	; 0x18
     7dc:	ea 14       	cp	r14, r10
     7de:	fb 04       	cpc	r15, r11
     7e0:	0c 05       	cpc	r16, r12
     7e2:	1d 05       	cpc	r17, r13
     7e4:	40 f4       	brcc	.+16     	; 0x7f6 <__divsf3+0xc6>
     7e6:	ee 0c       	add	r14, r14
     7e8:	ff 1c       	adc	r15, r15
     7ea:	00 1f       	adc	r16, r16
     7ec:	11 1f       	adc	r17, r17
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	30 40       	sbci	r19, 0x00	; 0
     7f2:	3c 87       	std	Y+12, r19	; 0x0c
     7f4:	2b 87       	std	Y+11, r18	; 0x0b
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a0 e0       	ldi	r26, 0x00	; 0
     804:	b0 e4       	ldi	r27, 0x40	; 64
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	ea 14       	cp	r14, r10
     80c:	fb 04       	cpc	r15, r11
     80e:	0c 05       	cpc	r16, r12
     810:	1d 05       	cpc	r17, r13
     812:	40 f0       	brcs	.+16     	; 0x824 <__divsf3+0xf4>
     814:	28 2b       	or	r18, r24
     816:	39 2b       	or	r19, r25
     818:	4a 2b       	or	r20, r26
     81a:	5b 2b       	or	r21, r27
     81c:	ea 18       	sub	r14, r10
     81e:	fb 08       	sbc	r15, r11
     820:	0c 09       	sbc	r16, r12
     822:	1d 09       	sbc	r17, r13
     824:	b6 95       	lsr	r27
     826:	a7 95       	ror	r26
     828:	97 95       	ror	r25
     82a:	87 95       	ror	r24
     82c:	ee 0c       	add	r14, r14
     82e:	ff 1c       	adc	r15, r15
     830:	00 1f       	adc	r16, r16
     832:	11 1f       	adc	r17, r17
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	6f 31       	cpi	r22, 0x1F	; 31
     83a:	71 05       	cpc	r23, r1
     83c:	31 f7       	brne	.-52     	; 0x80a <__divsf3+0xda>
     83e:	da 01       	movw	r26, r20
     840:	c9 01       	movw	r24, r18
     842:	8f 77       	andi	r24, 0x7F	; 127
     844:	90 70       	andi	r25, 0x00	; 0
     846:	a0 70       	andi	r26, 0x00	; 0
     848:	b0 70       	andi	r27, 0x00	; 0
     84a:	80 34       	cpi	r24, 0x40	; 64
     84c:	91 05       	cpc	r25, r1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	61 f4       	brne	.+24     	; 0x86c <__stack+0xd>
     854:	27 fd       	sbrc	r18, 7
     856:	0a c0       	rjmp	.+20     	; 0x86c <__stack+0xd>
     858:	e1 14       	cp	r14, r1
     85a:	f1 04       	cpc	r15, r1
     85c:	01 05       	cpc	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
     862:	20 5c       	subi	r18, 0xC0	; 192
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	4f 4f       	sbci	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	20 78       	andi	r18, 0x80	; 128
     86c:	2d 87       	std	Y+13, r18	; 0x0d
     86e:	3e 87       	std	Y+14, r19	; 0x0e
     870:	4f 87       	std	Y+15, r20	; 0x0f
     872:	58 8b       	std	Y+16, r21	; 0x10
     874:	be 01       	movw	r22, r28
     876:	67 5f       	subi	r22, 0xF7	; 247
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     880:	68 96       	adiw	r28, 0x18	; 24
     882:	ea e0       	ldi	r30, 0x0A	; 10
     884:	0c 94 07 20 	jmp	0x400e	; 0x400e <__epilogue_restores__+0x10>

00000888 <__gtsf2>:
     888:	a8 e1       	ldi	r26, 0x18	; 24
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	ea e4       	ldi	r30, 0x4A	; 74
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x18>
     894:	69 83       	std	Y+1, r22	; 0x01
     896:	7a 83       	std	Y+2, r23	; 0x02
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	9c 83       	std	Y+4, r25	; 0x04
     89c:	2d 83       	std	Y+5, r18	; 0x05
     89e:	3e 83       	std	Y+6, r19	; 0x06
     8a0:	4f 83       	std	Y+7, r20	; 0x07
     8a2:	58 87       	std	Y+8, r21	; 0x08
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	e8 2e       	mov	r14, r24
     8a8:	f1 2c       	mov	r15, r1
     8aa:	ec 0e       	add	r14, r28
     8ac:	fd 1e       	adc	r15, r29
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	b7 01       	movw	r22, r14
     8b4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8b8:	8e 01       	movw	r16, r28
     8ba:	0f 5e       	subi	r16, 0xEF	; 239
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	ce 01       	movw	r24, r28
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     8c8:	89 85       	ldd	r24, Y+9	; 0x09
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	40 f0       	brcs	.+16     	; 0x8de <__gtsf2+0x56>
     8ce:	89 89       	ldd	r24, Y+17	; 0x11
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	28 f0       	brcs	.+10     	; 0x8de <__gtsf2+0x56>
     8d4:	c7 01       	movw	r24, r14
     8d6:	b8 01       	movw	r22, r16
     8d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__gtsf2+0x58>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	68 96       	adiw	r28, 0x18	; 24
     8e2:	e6 e0       	ldi	r30, 0x06	; 6
     8e4:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x18>

000008e8 <__gesf2>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x18>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	89 e0       	ldi	r24, 0x09	; 9
     906:	e8 2e       	mov	r14, r24
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	40 f0       	brcs	.+16     	; 0x93e <__gesf2+0x56>
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	28 f0       	brcs	.+10     	; 0x93e <__gesf2+0x56>
     934:	c7 01       	movw	r24, r14
     936:	b8 01       	movw	r22, r16
     938:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__gesf2+0x58>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	68 96       	adiw	r28, 0x18	; 24
     942:	e6 e0       	ldi	r30, 0x06	; 6
     944:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x18>

00000948 <__ltsf2>:
     948:	a8 e1       	ldi	r26, 0x18	; 24
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__prologue_saves__+0x18>
     954:	69 83       	std	Y+1, r22	; 0x01
     956:	7a 83       	std	Y+2, r23	; 0x02
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	3e 83       	std	Y+6, r19	; 0x06
     960:	4f 83       	std	Y+7, r20	; 0x07
     962:	58 87       	std	Y+8, r21	; 0x08
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	e8 2e       	mov	r14, r24
     968:	f1 2c       	mov	r15, r1
     96a:	ec 0e       	add	r14, r28
     96c:	fd 1e       	adc	r15, r29
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	b7 01       	movw	r22, r14
     974:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     978:	8e 01       	movw	r16, r28
     97a:	0f 5e       	subi	r16, 0xEF	; 239
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	05 96       	adiw	r24, 0x05	; 5
     982:	b8 01       	movw	r22, r16
     984:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	40 f0       	brcs	.+16     	; 0x99e <__ltsf2+0x56>
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	28 f0       	brcs	.+10     	; 0x99e <__ltsf2+0x56>
     994:	c7 01       	movw	r24, r14
     996:	b8 01       	movw	r22, r16
     998:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fpcmp_parts_f>
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__ltsf2+0x58>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__epilogue_restores__+0x18>

000009a8 <__floatsisf>:
     9a8:	a8 e0       	ldi	r26, 0x08	; 8
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__prologue_saves__+0x12>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	da 01       	movw	r26, r20
     9be:	c9 01       	movw	r24, r18
     9c0:	88 27       	eor	r24, r24
     9c2:	b7 fd       	sbrc	r27, 7
     9c4:	83 95       	inc	r24
     9c6:	99 27       	eor	r25, r25
     9c8:	aa 27       	eor	r26, r26
     9ca:	bb 27       	eor	r27, r27
     9cc:	b8 2e       	mov	r11, r24
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	41 05       	cpc	r20, r1
     9d4:	51 05       	cpc	r21, r1
     9d6:	19 f4       	brne	.+6      	; 0x9de <__floatsisf+0x36>
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	3a c0       	rjmp	.+116    	; 0xa52 <__floatsisf+0xaa>
     9de:	88 23       	and	r24, r24
     9e0:	a9 f0       	breq	.+42     	; 0xa0c <__floatsisf+0x64>
     9e2:	20 30       	cpi	r18, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	38 07       	cpc	r19, r24
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	48 07       	cpc	r20, r24
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	58 07       	cpc	r21, r24
     9f0:	29 f4       	brne	.+10     	; 0x9fc <__floatsisf+0x54>
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	9f ec       	ldi	r25, 0xCF	; 207
     9fa:	30 c0       	rjmp	.+96     	; 0xa5c <__floatsisf+0xb4>
     9fc:	ee 24       	eor	r14, r14
     9fe:	ff 24       	eor	r15, r15
     a00:	87 01       	movw	r16, r14
     a02:	e2 1a       	sub	r14, r18
     a04:	f3 0a       	sbc	r15, r19
     a06:	04 0b       	sbc	r16, r20
     a08:	15 0b       	sbc	r17, r21
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__floatsisf+0x68>
     a0c:	79 01       	movw	r14, r18
     a0e:	8a 01       	movw	r16, r20
     a10:	8e e1       	ldi	r24, 0x1E	; 30
     a12:	c8 2e       	mov	r12, r24
     a14:	d1 2c       	mov	r13, r1
     a16:	dc 82       	std	Y+4, r13	; 0x04
     a18:	cb 82       	std	Y+3, r12	; 0x03
     a1a:	ed 82       	std	Y+5, r14	; 0x05
     a1c:	fe 82       	std	Y+6, r15	; 0x06
     a1e:	0f 83       	std	Y+7, r16	; 0x07
     a20:	18 87       	std	Y+8, r17	; 0x08
     a22:	c8 01       	movw	r24, r16
     a24:	b7 01       	movw	r22, r14
     a26:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	18 16       	cp	r1, r24
     a2e:	19 06       	cpc	r1, r25
     a30:	84 f4       	brge	.+32     	; 0xa52 <__floatsisf+0xaa>
     a32:	08 2e       	mov	r0, r24
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <__floatsisf+0x96>
     a36:	ee 0c       	add	r14, r14
     a38:	ff 1c       	adc	r15, r15
     a3a:	00 1f       	adc	r16, r16
     a3c:	11 1f       	adc	r17, r17
     a3e:	0a 94       	dec	r0
     a40:	d2 f7       	brpl	.-12     	; 0xa36 <__floatsisf+0x8e>
     a42:	ed 82       	std	Y+5, r14	; 0x05
     a44:	fe 82       	std	Y+6, r15	; 0x06
     a46:	0f 83       	std	Y+7, r16	; 0x07
     a48:	18 87       	std	Y+8, r17	; 0x08
     a4a:	c8 1a       	sub	r12, r24
     a4c:	d9 0a       	sbc	r13, r25
     a4e:	dc 82       	std	Y+4, r13	; 0x04
     a50:	cb 82       	std	Y+3, r12	; 0x03
     a52:	ba 82       	std	Y+2, r11	; 0x02
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     a5c:	28 96       	adiw	r28, 0x08	; 8
     a5e:	e9 e0       	ldi	r30, 0x09	; 9
     a60:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__epilogue_restores__+0x12>

00000a64 <__fixsfsi>:
     a64:	ac e0       	ldi	r26, 0x0C	; 12
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e8 e3       	ldi	r30, 0x38	; 56
     a6a:	f5 e0       	ldi	r31, 0x05	; 5
     a6c:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__prologue_saves__+0x20>
     a70:	69 83       	std	Y+1, r22	; 0x01
     a72:	7a 83       	std	Y+2, r23	; 0x02
     a74:	8b 83       	std	Y+3, r24	; 0x03
     a76:	9c 83       	std	Y+4, r25	; 0x04
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	be 01       	movw	r22, r28
     a7e:	6b 5f       	subi	r22, 0xFB	; 251
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0e 94 23 07 	call	0xe46	; 0xe46 <__unpack_f>
     a86:	8d 81       	ldd	r24, Y+5	; 0x05
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	61 f1       	breq	.+88     	; 0xae4 <__fixsfsi+0x80>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	50 f1       	brcs	.+84     	; 0xae4 <__fixsfsi+0x80>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	21 f4       	brne	.+8      	; 0xa9c <__fixsfsi+0x38>
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	88 23       	and	r24, r24
     a98:	51 f1       	breq	.+84     	; 0xaee <__fixsfsi+0x8a>
     a9a:	2e c0       	rjmp	.+92     	; 0xaf8 <__fixsfsi+0x94>
     a9c:	2f 81       	ldd	r18, Y+7	; 0x07
     a9e:	38 85       	ldd	r19, Y+8	; 0x08
     aa0:	37 fd       	sbrc	r19, 7
     aa2:	20 c0       	rjmp	.+64     	; 0xae4 <__fixsfsi+0x80>
     aa4:	6e 81       	ldd	r22, Y+6	; 0x06
     aa6:	2f 31       	cpi	r18, 0x1F	; 31
     aa8:	31 05       	cpc	r19, r1
     aaa:	1c f0       	brlt	.+6      	; 0xab2 <__fixsfsi+0x4e>
     aac:	66 23       	and	r22, r22
     aae:	f9 f0       	breq	.+62     	; 0xaee <__fixsfsi+0x8a>
     ab0:	23 c0       	rjmp	.+70     	; 0xaf8 <__fixsfsi+0x94>
     ab2:	8e e1       	ldi	r24, 0x1E	; 30
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 1b       	sub	r24, r18
     ab8:	93 0b       	sbc	r25, r19
     aba:	29 85       	ldd	r18, Y+9	; 0x09
     abc:	3a 85       	ldd	r19, Y+10	; 0x0a
     abe:	4b 85       	ldd	r20, Y+11	; 0x0b
     ac0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__fixsfsi+0x68>
     ac4:	56 95       	lsr	r21
     ac6:	47 95       	ror	r20
     ac8:	37 95       	ror	r19
     aca:	27 95       	ror	r18
     acc:	8a 95       	dec	r24
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__fixsfsi+0x60>
     ad0:	66 23       	and	r22, r22
     ad2:	b1 f0       	breq	.+44     	; 0xb00 <__fixsfsi+0x9c>
     ad4:	50 95       	com	r21
     ad6:	40 95       	com	r20
     ad8:	30 95       	com	r19
     ada:	21 95       	neg	r18
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	4f 4f       	sbci	r20, 0xFF	; 255
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	0e c0       	rjmp	.+28     	; 0xb00 <__fixsfsi+0x9c>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <__fixsfsi+0x9c>
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	3f ef       	ldi	r19, 0xFF	; 255
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	5f e7       	ldi	r21, 0x7F	; 127
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__fixsfsi+0x9c>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e8       	ldi	r21, 0x80	; 128
     b00:	b9 01       	movw	r22, r18
     b02:	ca 01       	movw	r24, r20
     b04:	2c 96       	adiw	r28, 0x0c	; 12
     b06:	e2 e0       	ldi	r30, 0x02	; 2
     b08:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__epilogue_restores__+0x20>

00000b0c <__floatunsisf>:
     b0c:	a8 e0       	ldi	r26, 0x08	; 8
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	ec e8       	ldi	r30, 0x8C	; 140
     b12:	f5 e0       	ldi	r31, 0x05	; 5
     b14:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <__prologue_saves__+0x10>
     b18:	7b 01       	movw	r14, r22
     b1a:	8c 01       	movw	r16, r24
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	81 05       	cpc	r24, r1
     b22:	91 05       	cpc	r25, r1
     b24:	19 f4       	brne	.+6      	; 0xb2c <__floatunsisf+0x20>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	89 83       	std	Y+1, r24	; 0x01
     b2a:	60 c0       	rjmp	.+192    	; 0xbec <__floatunsisf+0xe0>
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	8e e1       	ldi	r24, 0x1E	; 30
     b32:	c8 2e       	mov	r12, r24
     b34:	d1 2c       	mov	r13, r1
     b36:	dc 82       	std	Y+4, r13	; 0x04
     b38:	cb 82       	std	Y+3, r12	; 0x03
     b3a:	ed 82       	std	Y+5, r14	; 0x05
     b3c:	fe 82       	std	Y+6, r15	; 0x06
     b3e:	0f 83       	std	Y+7, r16	; 0x07
     b40:	18 87       	std	Y+8, r17	; 0x08
     b42:	c8 01       	movw	r24, r16
     b44:	b7 01       	movw	r22, r14
     b46:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__clzsi2>
     b4a:	fc 01       	movw	r30, r24
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	f7 ff       	sbrs	r31, 7
     b50:	3b c0       	rjmp	.+118    	; 0xbc8 <__floatunsisf+0xbc>
     b52:	22 27       	eor	r18, r18
     b54:	33 27       	eor	r19, r19
     b56:	2e 1b       	sub	r18, r30
     b58:	3f 0b       	sbc	r19, r31
     b5a:	57 01       	movw	r10, r14
     b5c:	68 01       	movw	r12, r16
     b5e:	02 2e       	mov	r0, r18
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__floatunsisf+0x5e>
     b62:	d6 94       	lsr	r13
     b64:	c7 94       	ror	r12
     b66:	b7 94       	ror	r11
     b68:	a7 94       	ror	r10
     b6a:	0a 94       	dec	r0
     b6c:	d2 f7       	brpl	.-12     	; 0xb62 <__floatunsisf+0x56>
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__floatunsisf+0x7c>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	2a 95       	dec	r18
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__floatunsisf+0x74>
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	a1 09       	sbc	r26, r1
     b90:	b1 09       	sbc	r27, r1
     b92:	8e 21       	and	r24, r14
     b94:	9f 21       	and	r25, r15
     b96:	a0 23       	and	r26, r16
     b98:	b1 23       	and	r27, r17
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	a1 05       	cpc	r26, r1
     b9e:	b1 05       	cpc	r27, r1
     ba0:	21 f0       	breq	.+8      	; 0xbaa <__floatunsisf+0x9e>
     ba2:	41 e0       	ldi	r20, 0x01	; 1
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	4a 29       	or	r20, r10
     bac:	5b 29       	or	r21, r11
     bae:	6c 29       	or	r22, r12
     bb0:	7d 29       	or	r23, r13
     bb2:	4d 83       	std	Y+5, r20	; 0x05
     bb4:	5e 83       	std	Y+6, r21	; 0x06
     bb6:	6f 83       	std	Y+7, r22	; 0x07
     bb8:	78 87       	std	Y+8, r23	; 0x08
     bba:	8e e1       	ldi	r24, 0x1E	; 30
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	8e 1b       	sub	r24, r30
     bc0:	9f 0b       	sbc	r25, r31
     bc2:	9c 83       	std	Y+4, r25	; 0x04
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	12 c0       	rjmp	.+36     	; 0xbec <__floatunsisf+0xe0>
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	81 f0       	breq	.+32     	; 0xbec <__floatunsisf+0xe0>
     bcc:	0e 2e       	mov	r0, r30
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__floatunsisf+0xcc>
     bd0:	ee 0c       	add	r14, r14
     bd2:	ff 1c       	adc	r15, r15
     bd4:	00 1f       	adc	r16, r16
     bd6:	11 1f       	adc	r17, r17
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <__floatunsisf+0xc4>
     bdc:	ed 82       	std	Y+5, r14	; 0x05
     bde:	fe 82       	std	Y+6, r15	; 0x06
     be0:	0f 83       	std	Y+7, r16	; 0x07
     be2:	18 87       	std	Y+8, r17	; 0x08
     be4:	ce 1a       	sub	r12, r30
     be6:	df 0a       	sbc	r13, r31
     be8:	dc 82       	std	Y+4, r13	; 0x04
     bea:	cb 82       	std	Y+3, r12	; 0x03
     bec:	1a 82       	std	Y+2, r1	; 0x02
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__pack_f>
     bf6:	28 96       	adiw	r28, 0x08	; 8
     bf8:	ea e0       	ldi	r30, 0x0A	; 10
     bfa:	0c 94 07 20 	jmp	0x400e	; 0x400e <__epilogue_restores__+0x10>

00000bfe <__clzsi2>:
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	7b 01       	movw	r14, r22
     c08:	8c 01       	movw	r16, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	e8 16       	cp	r14, r24
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	f8 06       	cpc	r15, r24
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 07       	cpc	r16, r24
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	18 07       	cpc	r17, r24
     c1a:	88 f4       	brcc	.+34     	; 0xc3e <__clzsi2+0x40>
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	e8 16       	cp	r14, r24
     c20:	f1 04       	cpc	r15, r1
     c22:	01 05       	cpc	r16, r1
     c24:	11 05       	cpc	r17, r1
     c26:	31 f0       	breq	.+12     	; 0xc34 <__clzsi2+0x36>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__clzsi2+0x36>
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	17 c0       	rjmp	.+46     	; 0xc62 <__clzsi2+0x64>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	12 c0       	rjmp	.+36     	; 0xc62 <__clzsi2+0x64>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	e8 16       	cp	r14, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	f8 06       	cpc	r15, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 07       	cpc	r16, r24
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	18 07       	cpc	r17, r24
     c4e:	28 f0       	brcs	.+10     	; 0xc5a <__clzsi2+0x5c>
     c50:	88 e1       	ldi	r24, 0x18	; 24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__clzsi2+0x64>
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	28 1b       	sub	r18, r24
     c6c:	39 0b       	sbc	r19, r25
     c6e:	4a 0b       	sbc	r20, r26
     c70:	5b 0b       	sbc	r21, r27
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <__clzsi2+0x7e>
     c74:	16 95       	lsr	r17
     c76:	07 95       	ror	r16
     c78:	f7 94       	ror	r15
     c7a:	e7 94       	ror	r14
     c7c:	8a 95       	dec	r24
     c7e:	d2 f7       	brpl	.-12     	; 0xc74 <__clzsi2+0x76>
     c80:	f7 01       	movw	r30, r14
     c82:	e9 56       	subi	r30, 0x69	; 105
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	28 1b       	sub	r18, r24
     c8a:	31 09       	sbc	r19, r1
     c8c:	41 09       	sbc	r20, r1
     c8e:	51 09       	sbc	r21, r1
     c90:	c9 01       	movw	r24, r18
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	08 95       	ret

00000c9c <__pack_f>:
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	fc 01       	movw	r30, r24
     ca8:	e4 80       	ldd	r14, Z+4	; 0x04
     caa:	f5 80       	ldd	r15, Z+5	; 0x05
     cac:	06 81       	ldd	r16, Z+6	; 0x06
     cae:	17 81       	ldd	r17, Z+7	; 0x07
     cb0:	d1 80       	ldd	r13, Z+1	; 0x01
     cb2:	80 81       	ld	r24, Z
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	48 f4       	brcc	.+18     	; 0xcca <__pack_f+0x2e>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e1       	ldi	r26, 0x10	; 16
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 2a       	or	r14, r24
     cc2:	f9 2a       	or	r15, r25
     cc4:	0a 2b       	or	r16, r26
     cc6:	1b 2b       	or	r17, r27
     cc8:	a5 c0       	rjmp	.+330    	; 0xe14 <__pack_f+0x178>
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__pack_f+0x34>
     cce:	9f c0       	rjmp	.+318    	; 0xe0e <__pack_f+0x172>
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	21 f4       	brne	.+8      	; 0xcdc <__pack_f+0x40>
     cd4:	ee 24       	eor	r14, r14
     cd6:	ff 24       	eor	r15, r15
     cd8:	87 01       	movw	r16, r14
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__pack_f+0x4a>
     cdc:	e1 14       	cp	r14, r1
     cde:	f1 04       	cpc	r15, r1
     ce0:	01 05       	cpc	r16, r1
     ce2:	11 05       	cpc	r17, r1
     ce4:	19 f4       	brne	.+6      	; 0xcec <__pack_f+0x50>
     ce6:	e0 e0       	ldi	r30, 0x00	; 0
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	96 c0       	rjmp	.+300    	; 0xe18 <__pack_f+0x17c>
     cec:	62 81       	ldd	r22, Z+2	; 0x02
     cee:	73 81       	ldd	r23, Z+3	; 0x03
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	62 38       	cpi	r22, 0x82	; 130
     cf4:	79 07       	cpc	r23, r25
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <__pack_f+0x5e>
     cf8:	5b c0       	rjmp	.+182    	; 0xdb0 <__pack_f+0x114>
     cfa:	22 e8       	ldi	r18, 0x82	; 130
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	26 1b       	sub	r18, r22
     d00:	37 0b       	sbc	r19, r23
     d02:	2a 31       	cpi	r18, 0x1A	; 26
     d04:	31 05       	cpc	r19, r1
     d06:	2c f0       	brlt	.+10     	; 0xd12 <__pack_f+0x76>
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <__pack_f+0xca>
     d12:	b8 01       	movw	r22, r16
     d14:	a7 01       	movw	r20, r14
     d16:	02 2e       	mov	r0, r18
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__pack_f+0x86>
     d1a:	76 95       	lsr	r23
     d1c:	67 95       	ror	r22
     d1e:	57 95       	ror	r21
     d20:	47 95       	ror	r20
     d22:	0a 94       	dec	r0
     d24:	d2 f7       	brpl	.-12     	; 0xd1a <__pack_f+0x7e>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__pack_f+0x9c>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	2a 95       	dec	r18
     d3a:	d2 f7       	brpl	.-12     	; 0xd30 <__pack_f+0x94>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	a1 09       	sbc	r26, r1
     d40:	b1 09       	sbc	r27, r1
     d42:	8e 21       	and	r24, r14
     d44:	9f 21       	and	r25, r15
     d46:	a0 23       	and	r26, r16
     d48:	b1 23       	and	r27, r17
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	a1 05       	cpc	r26, r1
     d4e:	b1 05       	cpc	r27, r1
     d50:	21 f0       	breq	.+8      	; 0xd5a <__pack_f+0xbe>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	9a 01       	movw	r18, r20
     d5c:	ab 01       	movw	r20, r22
     d5e:	28 2b       	or	r18, r24
     d60:	39 2b       	or	r19, r25
     d62:	4a 2b       	or	r20, r26
     d64:	5b 2b       	or	r21, r27
     d66:	da 01       	movw	r26, r20
     d68:	c9 01       	movw	r24, r18
     d6a:	8f 77       	andi	r24, 0x7F	; 127
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	a0 70       	andi	r26, 0x00	; 0
     d70:	b0 70       	andi	r27, 0x00	; 0
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	91 05       	cpc	r25, r1
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <__pack_f+0xee>
     d7c:	27 ff       	sbrs	r18, 7
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__pack_f+0xf6>
     d80:	20 5c       	subi	r18, 0xC0	; 192
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	4f 4f       	sbci	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__pack_f+0xf6>
     d8a:	21 5c       	subi	r18, 0xC1	; 193
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	4f 4f       	sbci	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	e0 e0       	ldi	r30, 0x00	; 0
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	20 30       	cpi	r18, 0x00	; 0
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	3a 07       	cpc	r19, r26
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	4a 07       	cpc	r20, r26
     da0:	a0 e4       	ldi	r26, 0x40	; 64
     da2:	5a 07       	cpc	r21, r26
     da4:	10 f0       	brcs	.+4      	; 0xdaa <__pack_f+0x10e>
     da6:	e1 e0       	ldi	r30, 0x01	; 1
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	79 01       	movw	r14, r18
     dac:	8a 01       	movw	r16, r20
     dae:	27 c0       	rjmp	.+78     	; 0xdfe <__pack_f+0x162>
     db0:	60 38       	cpi	r22, 0x80	; 128
     db2:	71 05       	cpc	r23, r1
     db4:	64 f5       	brge	.+88     	; 0xe0e <__pack_f+0x172>
     db6:	fb 01       	movw	r30, r22
     db8:	e1 58       	subi	r30, 0x81	; 129
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	d8 01       	movw	r26, r16
     dbe:	c7 01       	movw	r24, r14
     dc0:	8f 77       	andi	r24, 0x7F	; 127
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	a0 70       	andi	r26, 0x00	; 0
     dc6:	b0 70       	andi	r27, 0x00	; 0
     dc8:	80 34       	cpi	r24, 0x40	; 64
     dca:	91 05       	cpc	r25, r1
     dcc:	a1 05       	cpc	r26, r1
     dce:	b1 05       	cpc	r27, r1
     dd0:	39 f4       	brne	.+14     	; 0xde0 <__pack_f+0x144>
     dd2:	e7 fe       	sbrs	r14, 7
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__pack_f+0x154>
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <__pack_f+0x14c>
     de0:	8f e3       	ldi	r24, 0x3F	; 63
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 0e       	add	r14, r24
     dea:	f9 1e       	adc	r15, r25
     dec:	0a 1f       	adc	r16, r26
     dee:	1b 1f       	adc	r17, r27
     df0:	17 ff       	sbrs	r17, 7
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <__pack_f+0x162>
     df4:	16 95       	lsr	r17
     df6:	07 95       	ror	r16
     df8:	f7 94       	ror	r15
     dfa:	e7 94       	ror	r14
     dfc:	31 96       	adiw	r30, 0x01	; 1
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	16 95       	lsr	r17
     e02:	07 95       	ror	r16
     e04:	f7 94       	ror	r15
     e06:	e7 94       	ror	r14
     e08:	8a 95       	dec	r24
     e0a:	d1 f7       	brne	.-12     	; 0xe00 <__pack_f+0x164>
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__pack_f+0x17c>
     e0e:	ee 24       	eor	r14, r14
     e10:	ff 24       	eor	r15, r15
     e12:	87 01       	movw	r16, r14
     e14:	ef ef       	ldi	r30, 0xFF	; 255
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	6e 2f       	mov	r22, r30
     e1a:	67 95       	ror	r22
     e1c:	66 27       	eor	r22, r22
     e1e:	67 95       	ror	r22
     e20:	90 2f       	mov	r25, r16
     e22:	9f 77       	andi	r25, 0x7F	; 127
     e24:	d7 94       	ror	r13
     e26:	dd 24       	eor	r13, r13
     e28:	d7 94       	ror	r13
     e2a:	8e 2f       	mov	r24, r30
     e2c:	86 95       	lsr	r24
     e2e:	49 2f       	mov	r20, r25
     e30:	46 2b       	or	r20, r22
     e32:	58 2f       	mov	r21, r24
     e34:	5d 29       	or	r21, r13
     e36:	b7 01       	movw	r22, r14
     e38:	ca 01       	movw	r24, r20
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	08 95       	ret

00000e46 <__unpack_f>:
     e46:	fc 01       	movw	r30, r24
     e48:	db 01       	movw	r26, r22
     e4a:	40 81       	ld	r20, Z
     e4c:	51 81       	ldd	r21, Z+1	; 0x01
     e4e:	22 81       	ldd	r18, Z+2	; 0x02
     e50:	62 2f       	mov	r22, r18
     e52:	6f 77       	andi	r22, 0x7F	; 127
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	22 1f       	adc	r18, r18
     e58:	22 27       	eor	r18, r18
     e5a:	22 1f       	adc	r18, r18
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	89 2f       	mov	r24, r25
     e60:	88 0f       	add	r24, r24
     e62:	82 2b       	or	r24, r18
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	99 1f       	adc	r25, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	99 1f       	adc	r25, r25
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	11 97       	sbiw	r26, 0x01	; 1
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	a9 f5       	brne	.+106    	; 0xee4 <__unpack_f+0x9e>
     e7a:	41 15       	cp	r20, r1
     e7c:	51 05       	cpc	r21, r1
     e7e:	61 05       	cpc	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	11 f4       	brne	.+4      	; 0xe88 <__unpack_f+0x42>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	37 c0       	rjmp	.+110    	; 0xef6 <__unpack_f+0xb0>
     e88:	82 e8       	ldi	r24, 0x82	; 130
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	13 96       	adiw	r26, 0x03	; 3
     e8e:	9c 93       	st	X, r25
     e90:	8e 93       	st	-X, r24
     e92:	12 97       	sbiw	r26, 0x02	; 2
     e94:	9a 01       	movw	r18, r20
     e96:	ab 01       	movw	r20, r22
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	6a 95       	dec	r22
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <__unpack_f+0x54>
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	8c 93       	st	X, r24
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <__unpack_f+0x80>
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	44 1f       	adc	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	13 97       	sbiw	r26, 0x03	; 3
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	20 30       	cpi	r18, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	38 07       	cpc	r19, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	48 07       	cpc	r20, r24
     ed0:	80 e4       	ldi	r24, 0x40	; 64
     ed2:	58 07       	cpc	r21, r24
     ed4:	58 f3       	brcs	.-42     	; 0xeac <__unpack_f+0x66>
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	2d 93       	st	X+, r18
     eda:	3d 93       	st	X+, r19
     edc:	4d 93       	st	X+, r20
     ede:	5c 93       	st	X, r21
     ee0:	17 97       	sbiw	r26, 0x07	; 7
     ee2:	08 95       	ret
     ee4:	2f 3f       	cpi	r18, 0xFF	; 255
     ee6:	31 05       	cpc	r19, r1
     ee8:	79 f4       	brne	.+30     	; 0xf08 <__unpack_f+0xc2>
     eea:	41 15       	cp	r20, r1
     eec:	51 05       	cpc	r21, r1
     eee:	61 05       	cpc	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	19 f4       	brne	.+6      	; 0xefa <__unpack_f+0xb4>
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	8c 93       	st	X, r24
     ef8:	08 95       	ret
     efa:	64 ff       	sbrs	r22, 4
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <__unpack_f+0xbe>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	8c 93       	st	X, r24
     f02:	12 c0       	rjmp	.+36     	; 0xf28 <__unpack_f+0xe2>
     f04:	1c 92       	st	X, r1
     f06:	10 c0       	rjmp	.+32     	; 0xf28 <__unpack_f+0xe2>
     f08:	2f 57       	subi	r18, 0x7F	; 127
     f0a:	30 40       	sbci	r19, 0x00	; 0
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	3c 93       	st	X, r19
     f10:	2e 93       	st	-X, r18
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	8c 93       	st	X, r24
     f18:	87 e0       	ldi	r24, 0x07	; 7
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	8a 95       	dec	r24
     f24:	d1 f7       	brne	.-12     	; 0xf1a <__unpack_f+0xd4>
     f26:	70 64       	ori	r23, 0x40	; 64
     f28:	14 96       	adiw	r26, 0x04	; 4
     f2a:	4d 93       	st	X+, r20
     f2c:	5d 93       	st	X+, r21
     f2e:	6d 93       	st	X+, r22
     f30:	7c 93       	st	X, r23
     f32:	17 97       	sbiw	r26, 0x07	; 7
     f34:	08 95       	ret

00000f36 <__fpcmp_parts_f>:
     f36:	1f 93       	push	r17
     f38:	dc 01       	movw	r26, r24
     f3a:	fb 01       	movw	r30, r22
     f3c:	9c 91       	ld	r25, X
     f3e:	92 30       	cpi	r25, 0x02	; 2
     f40:	08 f4       	brcc	.+2      	; 0xf44 <__fpcmp_parts_f+0xe>
     f42:	47 c0       	rjmp	.+142    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f44:	80 81       	ld	r24, Z
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	08 f4       	brcc	.+2      	; 0xf4c <__fpcmp_parts_f+0x16>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f4c:	94 30       	cpi	r25, 0x04	; 4
     f4e:	51 f4       	brne	.+20     	; 0xf64 <__fpcmp_parts_f+0x2e>
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	1c 91       	ld	r17, X
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	99 f5       	brne	.+102    	; 0xfbe <__fpcmp_parts_f+0x88>
     f58:	81 81       	ldd	r24, Z+1	; 0x01
     f5a:	68 2f       	mov	r22, r24
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	61 1b       	sub	r22, r17
     f60:	71 09       	sbc	r23, r1
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <__fpcmp_parts_f+0xac>
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	21 f0       	breq	.+8      	; 0xf70 <__fpcmp_parts_f+0x3a>
     f68:	92 30       	cpi	r25, 0x02	; 2
     f6a:	31 f4       	brne	.+12     	; 0xf78 <__fpcmp_parts_f+0x42>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	b9 f1       	breq	.+110    	; 0xfde <__fpcmp_parts_f+0xa8>
     f70:	81 81       	ldd	r24, Z+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	89 f1       	breq	.+98     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     f76:	2d c0       	rjmp	.+90     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 91       	ld	r17, X
     f7c:	11 97       	sbiw	r26, 0x01	; 1
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	f1 f0       	breq	.+60     	; 0xfbe <__fpcmp_parts_f+0x88>
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	18 17       	cp	r17, r24
     f86:	d9 f4       	brne	.+54     	; 0xfbe <__fpcmp_parts_f+0x88>
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	2d 91       	ld	r18, X+
     f8c:	3c 91       	ld	r19, X
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	94 f0       	brlt	.+36     	; 0xfbe <__fpcmp_parts_f+0x88>
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	bc f0       	brlt	.+46     	; 0xfce <__fpcmp_parts_f+0x98>
     fa0:	14 96       	adiw	r26, 0x04	; 4
     fa2:	8d 91       	ld	r24, X+
     fa4:	9d 91       	ld	r25, X+
     fa6:	0d 90       	ld	r0, X+
     fa8:	bc 91       	ld	r27, X
     faa:	a0 2d       	mov	r26, r0
     fac:	24 81       	ldd	r18, Z+4	; 0x04
     fae:	35 81       	ldd	r19, Z+5	; 0x05
     fb0:	46 81       	ldd	r20, Z+6	; 0x06
     fb2:	57 81       	ldd	r21, Z+7	; 0x07
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	4a 07       	cpc	r20, r26
     fba:	5b 07       	cpc	r21, r27
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <__fpcmp_parts_f+0x8e>
     fbe:	11 23       	and	r17, r17
     fc0:	41 f0       	breq	.+16     	; 0xfd2 <__fpcmp_parts_f+0x9c>
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	a4 07       	cpc	r26, r20
     fca:	b5 07       	cpc	r27, r21
     fcc:	40 f4       	brcc	.+16     	; 0xfde <__fpcmp_parts_f+0xa8>
     fce:	11 23       	and	r17, r17
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <__fpcmp_parts_f+0xa2>
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <__fpcmp_parts_f+0xac>
     fd8:	6f ef       	ldi	r22, 0xFF	; 255
     fda:	7f ef       	ldi	r23, 0xFF	; 255
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <__fpcmp_parts_f+0xac>
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	cb 01       	movw	r24, r22
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret

00000fe8 <PWM_Init>:


/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <PWM_Init+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <PWM_Init+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Tmr_Channel) {
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	80 81       	ld	r24, Z
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3c 83       	std	Y+4, r19	; 0x04
    1004:	2b 83       	std	Y+3, r18	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	54 f4       	brge	.+20     	; 0x1024 <PWM_Init+0x3c>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	21 30       	cpi	r18, 0x01	; 1
    1016:	31 05       	cpc	r19, r1
    1018:	84 f4       	brge	.+32     	; 0x103a <PWM_Init+0x52>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	39 f0       	breq	.+14     	; 0x1030 <PWM_Init+0x48>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <PWM_Init+0x64>
    1024:	2b 81       	ldd	r18, Y+3	; 0x03
    1026:	3c 81       	ldd	r19, Y+4	; 0x04
    1028:	23 30       	cpi	r18, 0x03	; 3
    102a:	31 05       	cpc	r19, r1
    102c:	59 f0       	breq	.+22     	; 0x1044 <PWM_Init+0x5c>
    102e:	0e c0       	rjmp	.+28     	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	0e 94 4d 0a 	call	0x149a	; 0x149a <PWM_InitTimer0>
    1038:	09 c0       	rjmp	.+18     	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	0e 94 46 0b 	call	0x168c	; 0x168c <PWM_InitTimer1>
    1042:	04 c0       	rjmp	.+8      	; 0x104c <PWM_Init+0x64>
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <PWM_InitTimer2>
		default: break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <PWM_SetDuty>:

void PWM_SetDuty(PWM_ChannelType Tmr_Channel, PWM_OutputStateType State, uint16 Duty_Percent) {
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	2e 97       	sbiw	r28, 0x0e	; 14
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	6a 83       	std	Y+2, r22	; 0x02
    107e:	5c 83       	std	Y+4, r21	; 0x04
    1080:	4b 83       	std	Y+3, r20	; 0x03
	switch (Tmr_Channel) {
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3e 87       	std	Y+14, r19	; 0x0e
    108a:	2d 87       	std	Y+13, r18	; 0x0d
    108c:	4d 85       	ldd	r20, Y+13	; 0x0d
    108e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1090:	41 30       	cpi	r20, 0x01	; 1
    1092:	51 05       	cpc	r21, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <PWM_SetDuty+0x3e>
    1096:	87 c0       	rjmp	.+270    	; 0x11a6 <PWM_SetDuty+0x14c>
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	91 05       	cpc	r25, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <PWM_SetDuty+0x52>
    10a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	71 f0       	breq	.+28     	; 0x10c6 <PWM_SetDuty+0x6c>
    10aa:	e8 c1       	rjmp	.+976    	; 0x147c <PWM_SetDuty+0x422>
    10ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <PWM_SetDuty+0x5e>
    10b6:	f5 c0       	rjmp	.+490    	; 0x12a2 <PWM_SetDuty+0x248>
    10b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    10ba:	5e 85       	ldd	r21, Y+14	; 0x0e
    10bc:	43 30       	cpi	r20, 0x03	; 3
    10be:	51 05       	cpc	r21, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <PWM_SetDuty+0x6a>
    10c2:	6d c1       	rjmp	.+730    	; 0x139e <PWM_SetDuty+0x344>
    10c4:	db c1       	rjmp	.+950    	; 0x147c <PWM_SetDuty+0x422>
		case PWM_TIMER_0_CHANNEL:
			switch (State) {
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	e8 2f       	mov	r30, r24
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	fc 87       	std	Y+12, r31	; 0x0c
    10ce:	eb 87       	std	Y+11, r30	; 0x0b
    10d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    10d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <PWM_SetDuty+0x8c>
    10da:	4b 85       	ldd	r20, Y+11	; 0x0b
    10dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    10de:	41 30       	cpi	r20, 0x01	; 1
    10e0:	51 05       	cpc	r21, r1
    10e2:	79 f1       	breq	.+94     	; 0x1142 <PWM_SetDuty+0xe8>
    10e4:	cb c1       	rjmp	.+918    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_0_RESOLUTION / 100.0); break;
    10e6:	0c e5       	ldi	r16, 0x5C	; 92
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	4b 81       	ldd	r20, Y+3	; 0x03
    10ec:	5c 81       	ldd	r21, Y+4	; 0x04
    10ee:	ca 01       	movw	r24, r20
    10f0:	9c 01       	movw	r18, r24
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	c9 01       	movw	r24, r18
    10f8:	96 95       	lsr	r25
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	97 95       	ror	r25
    1100:	87 95       	ror	r24
    1102:	82 1b       	sub	r24, r18
    1104:	93 0b       	sbc	r25, r19
    1106:	84 0f       	add	r24, r20
    1108:	95 1f       	adc	r25, r21
    110a:	cc 01       	movw	r24, r24
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	bc 01       	movw	r22, r24
    111e:	cd 01       	movw	r24, r26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	48 ec       	ldi	r20, 0xC8	; 200
    1126:	52 e4       	ldi	r21, 0x42	; 66
    1128:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	f8 01       	movw	r30, r16
    113e:	80 83       	st	Z, r24
    1140:	9d c1       	rjmp	.+826    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1142:	0c e5       	ldi	r16, 0x5C	; 92
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	cc 01       	movw	r24, r24
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	92 e4       	ldi	r25, 0x42	; 66
    1164:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	53 e4       	ldi	r21, 0x43	; 67
    1178:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	48 ec       	ldi	r20, 0xC8	; 200
    118a:	52 e4       	ldi	r21, 0x42	; 66
    118c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	f8 01       	movw	r30, r16
    11a2:	80 83       	st	Z, r24
    11a4:	6b c1       	rjmp	.+726    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_A:
			switch (State) {
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3a 87       	std	Y+10, r19	; 0x0a
    11ae:	29 87       	std	Y+9, r18	; 0x09
    11b0:	49 85       	ldd	r20, Y+9	; 0x09
    11b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    11b4:	41 15       	cp	r20, r1
    11b6:	51 05       	cpc	r21, r1
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <PWM_SetDuty+0x16c>
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	71 f1       	breq	.+92     	; 0x1220 <PWM_SetDuty+0x1c6>
    11c4:	5b c1       	rjmp	.+694    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
    11c6:	0a e4       	ldi	r16, 0x4A	; 74
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	20 91 e4 01 	lds	r18, 0x01E4
    11ce:	30 91 e5 01 	lds	r19, 0x01E5
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	fc 01       	movw	r30, r24
    11d8:	2e 9f       	mul	r18, r30
    11da:	c0 01       	movw	r24, r0
    11dc:	2f 9f       	mul	r18, r31
    11de:	90 0d       	add	r25, r0
    11e0:	3e 9f       	mul	r19, r30
    11e2:	90 0d       	add	r25, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	cc 01       	movw	r24, r24
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	48 ec       	ldi	r20, 0xC8	; 200
    1202:	52 e4       	ldi	r21, 0x42	; 66
    1204:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
    121e:	2e c1       	rjmp	.+604    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1220:	0f 2e       	mov	r0, r31
    1222:	fa e4       	ldi	r31, 0x4A	; 74
    1224:	cf 2e       	mov	r12, r31
    1226:	dd 24       	eor	r13, r13
    1228:	f0 2d       	mov	r31, r0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	cc 01       	movw	r24, r24
    1230:	a0 e0       	ldi	r26, 0x00	; 0
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	88 ec       	ldi	r24, 0xC8	; 200
    1246:	92 e4       	ldi	r25, 0x42	; 66
    1248:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	7c 01       	movw	r14, r24
    1252:	8d 01       	movw	r16, r26
    1254:	80 91 e4 01 	lds	r24, 0x01E4
    1258:	90 91 e5 01 	lds	r25, 0x01E5
    125c:	cc 01       	movw	r24, r24
    125e:	a0 e0       	ldi	r26, 0x00	; 0
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	c8 01       	movw	r24, r16
    1270:	b7 01       	movw	r22, r14
    1272:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	48 ec       	ldi	r20, 0xC8	; 200
    1284:	52 e4       	ldi	r21, 0x42	; 66
    1286:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	bc 01       	movw	r22, r24
    1290:	cd 01       	movw	r24, r26
    1292:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	f6 01       	movw	r30, r12
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
    12a0:	ed c0       	rjmp	.+474    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (State) {
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	38 87       	std	Y+8, r19	; 0x08
    12aa:	2f 83       	std	Y+7, r18	; 0x07
    12ac:	4f 81       	ldd	r20, Y+7	; 0x07
    12ae:	58 85       	ldd	r21, Y+8	; 0x08
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <PWM_SetDuty+0x268>
    12b6:	8f 81       	ldd	r24, Y+7	; 0x07
    12b8:	98 85       	ldd	r25, Y+8	; 0x08
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	71 f1       	breq	.+92     	; 0x131c <PWM_SetDuty+0x2c2>
    12c0:	dd c0       	rjmp	.+442    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
    12c2:	08 e4       	ldi	r16, 0x48	; 72
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	20 91 e4 01 	lds	r18, 0x01E4
    12ca:	30 91 e5 01 	lds	r19, 0x01E5
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	fc 01       	movw	r30, r24
    12d4:	2e 9f       	mul	r18, r30
    12d6:	c0 01       	movw	r24, r0
    12d8:	2f 9f       	mul	r18, r31
    12da:	90 0d       	add	r25, r0
    12dc:	3e 9f       	mul	r19, r30
    12de:	90 0d       	add	r25, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	cc 01       	movw	r24, r24
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	48 ec       	ldi	r20, 0xC8	; 200
    12fe:	52 e4       	ldi	r21, 0x42	; 66
    1300:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	f8 01       	movw	r30, r16
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	b0 c0       	rjmp	.+352    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    131c:	0f 2e       	mov	r0, r31
    131e:	f8 e4       	ldi	r31, 0x48	; 72
    1320:	cf 2e       	mov	r12, r31
    1322:	dd 24       	eor	r13, r13
    1324:	f0 2d       	mov	r31, r0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	cc 01       	movw	r24, r24
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	92 e4       	ldi	r25, 0x42	; 66
    1344:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	7c 01       	movw	r14, r24
    134e:	8d 01       	movw	r16, r26
    1350:	80 91 e4 01 	lds	r24, 0x01E4
    1354:	90 91 e5 01 	lds	r25, 0x01E5
    1358:	cc 01       	movw	r24, r24
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1366:	9b 01       	movw	r18, r22
    1368:	ac 01       	movw	r20, r24
    136a:	c8 01       	movw	r24, r16
    136c:	b7 01       	movw	r22, r14
    136e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	48 ec       	ldi	r20, 0xC8	; 200
    1380:	52 e4       	ldi	r21, 0x42	; 66
    1382:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	f6 01       	movw	r30, r12
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
    139c:	6f c0       	rjmp	.+222    	; 0x147c <PWM_SetDuty+0x422>
				default: break;
			}
			break;
		case PWM_TIMER_2_CHANNEL:
			switch (State) {
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3e 83       	std	Y+6, r19	; 0x06
    13a6:	2d 83       	std	Y+5, r18	; 0x05
    13a8:	4d 81       	ldd	r20, Y+5	; 0x05
    13aa:	5e 81       	ldd	r21, Y+6	; 0x06
    13ac:	41 15       	cp	r20, r1
    13ae:	51 05       	cpc	r21, r1
    13b0:	31 f0       	breq	.+12     	; 0x13be <PWM_SetDuty+0x364>
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	79 f1       	breq	.+94     	; 0x141a <PWM_SetDuty+0x3c0>
    13bc:	5f c0       	rjmp	.+190    	; 0x147c <PWM_SetDuty+0x422>
				case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_2_RESOLUTION / 100.0); break;
    13be:	03 e4       	ldi	r16, 0x43	; 67
    13c0:	10 e0       	ldi	r17, 0x00	; 0
    13c2:	4b 81       	ldd	r20, Y+3	; 0x03
    13c4:	5c 81       	ldd	r21, Y+4	; 0x04
    13c6:	ca 01       	movw	r24, r20
    13c8:	9c 01       	movw	r18, r24
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	c9 01       	movw	r24, r18
    13d0:	96 95       	lsr	r25
    13d2:	98 2f       	mov	r25, r24
    13d4:	88 27       	eor	r24, r24
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	82 1b       	sub	r24, r18
    13dc:	93 0b       	sbc	r25, r19
    13de:	84 0f       	add	r24, r20
    13e0:	95 1f       	adc	r25, r21
    13e2:	cc 01       	movw	r24, r24
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	48 ec       	ldi	r20, 0xC8	; 200
    13fe:	52 e4       	ldi	r21, 0x42	; 66
    1400:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
    1418:	31 c0       	rjmp	.+98     	; 0x147c <PWM_SetDuty+0x422>
				case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    141a:	03 e4       	ldi	r16, 0x43	; 67
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	cc 01       	movw	r24, r24
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1430:	9b 01       	movw	r18, r22
    1432:	ac 01       	movw	r20, r24
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	88 ec       	ldi	r24, 0xC8	; 200
    143a:	92 e4       	ldi	r25, 0x42	; 66
    143c:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	48 ec       	ldi	r20, 0xC8	; 200
    1462:	52 e4       	ldi	r21, 0x42	; 66
    1464:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	f8 01       	movw	r30, r16
    147a:	80 83       	st	Z, r24
				default: break;
			}
			break;
		default: break;
	}
}
    147c:	2e 96       	adiw	r28, 0x0e	; 14
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	08 95       	ret

0000149a <PWM_InitTimer0>:

/************************************************************************/
/*				Private Functions Implementations                       */
/************************************************************************/
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <PWM_InitTimer0+0xa>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <PWM_InitTimer0+0xc>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <PWM_InitTimer0+0xe>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	SET_BIT(*PORTB_DIR_REG, 3U);
    14b0:	a7 e3       	ldi	r26, 0x37	; 55
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e7 e3       	ldi	r30, 0x37	; 55
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	88 60       	ori	r24, 0x08	; 8
    14bc:	8c 93       	st	X, r24
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    14be:	e3 e5       	ldi	r30, 0x53	; 83
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
    14c4:	a3 e5       	ldi	r26, 0x53	; 83
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e3 e5       	ldi	r30, 0x53	; 83
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	90 81       	ld	r25, Z
    14ce:	e9 81       	ldd	r30, Y+1	; 0x01
    14d0:	fa 81       	ldd	r31, Y+2	; 0x02
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	88 0f       	add	r24, r24
    14d6:	88 0f       	add	r24, r24
    14d8:	88 0f       	add	r24, r24
    14da:	89 2b       	or	r24, r25
    14dc:	80 64       	ori	r24, 0x40	; 64
    14de:	8c 93       	st	X, r24
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
    14e0:	a3 e5       	ldi	r26, 0x53	; 83
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e3 e5       	ldi	r30, 0x53	; 83
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	90 81       	ld	r25, Z
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	83 81       	ldd	r24, Z+3	; 0x03
    14f0:	82 95       	swap	r24
    14f2:	80 7f       	andi	r24, 0xF0	; 240
    14f4:	89 2b       	or	r24, r25
    14f6:	80 62       	ori	r24, 0x20	; 32
    14f8:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	2d 83       	std	Y+5, r18	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	91 05       	cpc	r25, r1
    1510:	f1 f0       	breq	.+60     	; 0x154e <PWM_InitTimer0+0xb4>
    1512:	ed 81       	ldd	r30, Y+5	; 0x05
    1514:	fe 81       	ldd	r31, Y+6	; 0x06
    1516:	e5 30       	cpi	r30, 0x05	; 5
    1518:	f1 05       	cpc	r31, r1
    151a:	3c f4       	brge	.+14     	; 0x152a <PWM_InitTimer0+0x90>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	00 96       	adiw	r24, 0x00	; 0
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	50 f5       	brcc	.+84     	; 0x157c <PWM_InitTimer0+0xe2>
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <PWM_InitTimer0+0x9e>
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	06 97       	sbiw	r24, 0x06	; 6
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	18 f5       	brcc	.+70     	; 0x157c <PWM_InitTimer0+0xe2>
    1536:	17 c0       	rjmp	.+46     	; 0x1566 <PWM_InitTimer0+0xcc>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    1538:	a3 e5       	ldi	r26, 0x53	; 83
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e3 e5       	ldi	r30, 0x53	; 83
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	90 81       	ld	r25, Z
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	89 2b       	or	r24, r25
    154a:	8c 93       	st	X, r24
    154c:	17 c0       	rjmp	.+46     	; 0x157c <PWM_InitTimer0+0xe2>
		case PWM_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    154e:	a3 e5       	ldi	r26, 0x53	; 83
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e3 e5       	ldi	r30, 0x53	; 83
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	90 81       	ld	r25, Z
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	81 50       	subi	r24, 0x01	; 1
    1560:	89 2b       	or	r24, r25
    1562:	8c 93       	st	X, r24
    1564:	0b c0       	rjmp	.+22     	; 0x157c <PWM_InitTimer0+0xe2>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	90 81       	ld	r25, Z
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	82 50       	subi	r24, 0x02	; 2
    1578:	89 2b       	or	r24, r25
    157a:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
    157c:	ec e5       	ldi	r30, 0x5C	; 92
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
	switch (Config_Ptr->State) {
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	83 81       	ldd	r24, Z+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	31 f0       	breq	.+12     	; 0x15a4 <PWM_InitTimer0+0x10a>
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	e1 30       	cpi	r30, 0x01	; 1
    159e:	f1 05       	cpc	r31, r1
    15a0:	91 f1       	breq	.+100    	; 0x1606 <PWM_InitTimer0+0x16c>
    15a2:	66 c0       	rjmp	.+204    	; 0x1670 <PWM_InitTimer0+0x1d6>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    15a4:	0c e5       	ldi	r16, 0x5C	; 92
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	80 85       	ldd	r24, Z+8	; 0x08
    15ae:	48 2f       	mov	r20, r24
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ca 01       	movw	r24, r20
    15b4:	9c 01       	movw	r18, r24
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	c9 01       	movw	r24, r18
    15bc:	96 95       	lsr	r25
    15be:	98 2f       	mov	r25, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	97 95       	ror	r25
    15c4:	87 95       	ror	r24
    15c6:	82 1b       	sub	r24, r18
    15c8:	93 0b       	sbc	r25, r19
    15ca:	84 0f       	add	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	48 ec       	ldi	r20, 0xC8	; 200
    15ea:	52 e4       	ldi	r21, 0x42	; 66
    15ec:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	80 83       	st	Z, r24
    1604:	35 c0       	rjmp	.+106    	; 0x1670 <PWM_InitTimer0+0x1d6>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1606:	0c e5       	ldi	r16, 0x5C	; 92
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	80 85       	ldd	r24, Z+8	; 0x08
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	aa 27       	eor	r26, r26
    1616:	97 fd       	sbrc	r25, 7
    1618:	a0 95       	com	r26
    161a:	ba 2f       	mov	r27, r26
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	88 ec       	ldi	r24, 0xC8	; 200
    162e:	92 e4       	ldi	r25, 0x42	; 66
    1630:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	48 ec       	ldi	r20, 0xC8	; 200
    1656:	52 e4       	ldi	r21, 0x42	; 66
    1658:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	80 83       	st	Z, r24
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
    1670:	e2 e5       	ldi	r30, 0x52	; 82
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
}
    1676:	26 96       	adiw	r28, 0x06	; 6
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <PWM_InitTimer1>:

void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr) {
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2e 97       	sbiw	r28, 0x0e	; 14
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
	/* Make PD5=OC1A or PD4=OC1B as output */
	switch (Config_Ptr->Tmr_Channel) {
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3e 87       	std	Y+14, r19	; 0x0e
    16bc:	2d 87       	std	Y+13, r18	; 0x0d
    16be:	4d 85       	ldd	r20, Y+13	; 0x0d
    16c0:	5e 85       	ldd	r21, Y+14	; 0x0e
    16c2:	41 30       	cpi	r20, 0x01	; 1
    16c4:	51 05       	cpc	r21, r1
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <PWM_InitTimer1+0x48>
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	91 05       	cpc	r25, r1
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <PWM_InitTimer1+0x58>
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <PWM_InitTimer1+0x66>
		case PWM_TIMER_1_CHANNEL_A:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_5, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 5U);
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 62       	ori	r24, 0x20	; 32
    16e0:	8c 93       	st	X, r24
    16e2:	07 c0       	rjmp	.+14     	; 0x16f2 <PWM_InitTimer1+0x66>
			break;
		case PWM_TIMER_1_CHANNEL_B:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_4, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 4U);
    16e4:	a1 e3       	ldi	r26, 0x31	; 49
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e1 e3       	ldi	r30, 0x31	; 49
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 61       	ori	r24, 0x10	; 16
    16f0:	8c 93       	st	X, r24
			break;
		default: break;
	}
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
	*TIMER1_CTRL_REG_B = 0x00U;
    16f8:	ee e4       	ldi	r30, 0x4E	; 78
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER1_CTRL_REG_A |= (0x02U);
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	8c 93       	st	X, r24
	*TIMER1_CTRL_REG_B |= (1U<<4U) | ((Config_Ptr->Mode)<<PWM_TIMER_1_FAST_BIT);
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	90 81       	ld	r25, Z
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	88 0f       	add	r24, r24
    171e:	88 0f       	add	r24, r24
    1720:	88 0f       	add	r24, r24
    1722:	89 2b       	or	r24, r25
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
	/* Set Output State and Channel OC1A or OC1B */
	switch (Config_Ptr->Tmr_Channel) {
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	fa 81       	ldd	r31, Y+2	; 0x02
    172c:	80 81       	ld	r24, Z
    172e:	e8 2f       	mov	r30, r24
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	fc 87       	std	Y+12, r31	; 0x0c
    1734:	eb 87       	std	Y+11, r30	; 0x0b
    1736:	2b 85       	ldd	r18, Y+11	; 0x0b
    1738:	3c 85       	ldd	r19, Y+12	; 0x0c
    173a:	21 30       	cpi	r18, 0x01	; 1
    173c:	31 05       	cpc	r19, r1
    173e:	31 f0       	breq	.+12     	; 0x174c <PWM_InitTimer1+0xc0>
    1740:	4b 85       	ldd	r20, Y+11	; 0x0b
    1742:	5c 85       	ldd	r21, Y+12	; 0x0c
    1744:	42 30       	cpi	r20, 0x02	; 2
    1746:	51 05       	cpc	r21, r1
    1748:	89 f0       	breq	.+34     	; 0x176c <PWM_InitTimer1+0xe0>
    174a:	1d c0       	rjmp	.+58     	; 0x1786 <PWM_InitTimer1+0xfa>
		case PWM_TIMER_1_CHANNEL_A:
			*TIMER1_CTRL_REG_A |= (1U<<7U) | ((Config_Ptr->State)<<PWM_TIMER_1_A_INVERTING_BIT);
    174c:	af e4       	ldi	r26, 0x4F	; 79
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e4       	ldi	r30, 0x4F	; 79
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	e9 81       	ldd	r30, Y+1	; 0x01
    1758:	fa 81       	ldd	r31, Y+2	; 0x02
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	82 95       	swap	r24
    175e:	88 0f       	add	r24, r24
    1760:	88 0f       	add	r24, r24
    1762:	80 7c       	andi	r24, 0xC0	; 192
    1764:	89 2b       	or	r24, r25
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	8c 93       	st	X, r24
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <PWM_InitTimer1+0xfa>
			break;
		case PWM_TIMER_1_CHANNEL_B: 
			*TIMER1_CTRL_REG_A |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_1_B_INVERTING_BIT);
    176c:	af e4       	ldi	r26, 0x4F	; 79
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ef e4       	ldi	r30, 0x4F	; 79
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	90 81       	ld	r25, Z
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	83 81       	ldd	r24, Z+3	; 0x03
    177c:	82 95       	swap	r24
    177e:	80 7f       	andi	r24, 0xF0	; 240
    1780:	89 2b       	or	r24, r25
    1782:	80 62       	ori	r24, 0x20	; 32
    1784:	8c 93       	st	X, r24
			break;
		default: break;
	}
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    1786:	e9 81       	ldd	r30, Y+1	; 0x01
    1788:	fa 81       	ldd	r31, Y+2	; 0x02
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	e8 2f       	mov	r30, r24
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	fa 87       	std	Y+10, r31	; 0x0a
    1792:	e9 87       	std	Y+9, r30	; 0x09
    1794:	29 85       	ldd	r18, Y+9	; 0x09
    1796:	3a 85       	ldd	r19, Y+10	; 0x0a
    1798:	24 30       	cpi	r18, 0x04	; 4
    179a:	31 05       	cpc	r19, r1
    179c:	f1 f0       	breq	.+60     	; 0x17da <PWM_InitTimer1+0x14e>
    179e:	49 85       	ldd	r20, Y+9	; 0x09
    17a0:	5a 85       	ldd	r21, Y+10	; 0x0a
    17a2:	45 30       	cpi	r20, 0x05	; 5
    17a4:	51 05       	cpc	r21, r1
    17a6:	3c f4       	brge	.+14     	; 0x17b6 <PWM_InitTimer1+0x12a>
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	00 96       	adiw	r24, 0x00	; 0
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	50 f5       	brcc	.+84     	; 0x1808 <PWM_InitTimer1+0x17c>
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <PWM_InitTimer1+0x138>
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	06 97       	sbiw	r24, 0x06	; 6
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	91 05       	cpc	r25, r1
    17c0:	18 f5       	brcc	.+70     	; 0x1808 <PWM_InitTimer1+0x17c>
    17c2:	17 c0       	rjmp	.+46     	; 0x17f2 <PWM_InitTimer1+0x166>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
    17c4:	ae e4       	ldi	r26, 0x4E	; 78
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ee e4       	ldi	r30, 0x4E	; 78
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	90 81       	ld	r25, Z
    17ce:	e9 81       	ldd	r30, Y+1	; 0x01
    17d0:	fa 81       	ldd	r31, Y+2	; 0x02
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	89 2b       	or	r24, r25
    17d6:	8c 93       	st	X, r24
    17d8:	17 c0       	rjmp	.+46     	; 0x1808 <PWM_InitTimer1+0x17c>
		case PWM_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
    17da:	ae e4       	ldi	r26, 0x4E	; 78
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ee e4       	ldi	r30, 0x4E	; 78
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	90 81       	ld	r25, Z
    17e4:	e9 81       	ldd	r30, Y+1	; 0x01
    17e6:	fa 81       	ldd	r31, Y+2	; 0x02
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	81 50       	subi	r24, 0x01	; 1
    17ec:	89 2b       	or	r24, r25
    17ee:	8c 93       	st	X, r24
    17f0:	0b c0       	rjmp	.+22     	; 0x1808 <PWM_InitTimer1+0x17c>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
    17f2:	ae e4       	ldi	r26, 0x4E	; 78
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ee e4       	ldi	r30, 0x4E	; 78
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	90 81       	ld	r25, Z
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	82 50       	subi	r24, 0x02	; 2
    1804:	89 2b       	or	r24, r25
    1806:	8c 93       	st	X, r24
		default: break;
	}
	/* Set Period through TOP Value in ICR1 Register */
	gu16_PWM_TimerTopValue = (uint16)((F_CPU * (Config_Ptr->Period_ms) / ((Config_Ptr->Prescale_Value) * 1000.0)) - 1U);
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	86 81       	ldd	r24, Z+6	; 0x06
    180e:	97 81       	ldd	r25, Z+7	; 0x07
    1810:	cc 01       	movw	r24, r24
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	34 e2       	ldi	r19, 0x24	; 36
    181a:	44 ef       	ldi	r20, 0xF4	; 244
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__mulsi3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	e9 81       	ldd	r30, Y+1	; 0x01
    1838:	fa 81       	ldd	r31, Y+2	; 0x02
    183a:	84 81       	ldd	r24, Z+4	; 0x04
    183c:	95 81       	ldd	r25, Z+5	; 0x05
    183e:	cc 01       	movw	r24, r24
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a e7       	ldi	r20, 0x7A	; 122
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9c 01       	movw	r18, r24
    1866:	ad 01       	movw	r20, r26
    1868:	c8 01       	movw	r24, r16
    186a:	b7 01       	movw	r22, r14
    186c:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	90 93 e5 01 	sts	0x01E5, r25
    1898:	80 93 e4 01 	sts	0x01E4, r24
	*(uint16*)TIMER1_INP_CAPT_REG_L = gu16_PWM_TimerTopValue;
    189c:	e6 e4       	ldi	r30, 0x46	; 70
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 91 e4 01 	lds	r24, 0x01E4
    18a4:	90 91 e5 01 	lds	r25, 0x01E5
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24
	/* Set Duty Value in OCR1A or OCR1B Register */
	switch (Config_Ptr->Tmr_Channel) {
    18ac:	e9 81       	ldd	r30, Y+1	; 0x01
    18ae:	fa 81       	ldd	r31, Y+2	; 0x02
    18b0:	80 81       	ld	r24, Z
    18b2:	e8 2f       	mov	r30, r24
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	f8 87       	std	Y+8, r31	; 0x08
    18b8:	ef 83       	std	Y+7, r30	; 0x07
    18ba:	2f 81       	ldd	r18, Y+7	; 0x07
    18bc:	38 85       	ldd	r19, Y+8	; 0x08
    18be:	21 30       	cpi	r18, 0x01	; 1
    18c0:	31 05       	cpc	r19, r1
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <PWM_InitTimer1+0x246>
    18c4:	4f 81       	ldd	r20, Y+7	; 0x07
    18c6:	58 85       	ldd	r21, Y+8	; 0x08
    18c8:	42 30       	cpi	r20, 0x02	; 2
    18ca:	51 05       	cpc	r21, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <PWM_InitTimer1+0x244>
    18ce:	88 c0       	rjmp	.+272    	; 0x19e0 <PWM_InitTimer1+0x354>
    18d0:	0d c1       	rjmp	.+538    	; 0x1aec <PWM_InitTimer1+0x460>
		case PWM_TIMER_1_CHANNEL_A:
			switch (Config_Ptr->State) {
    18d2:	e9 81       	ldd	r30, Y+1	; 0x01
    18d4:	fa 81       	ldd	r31, Y+2	; 0x02
    18d6:	83 81       	ldd	r24, Z+3	; 0x03
    18d8:	e8 2f       	mov	r30, r24
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	fe 83       	std	Y+6, r31	; 0x06
    18de:	ed 83       	std	Y+5, r30	; 0x05
    18e0:	2d 81       	ldd	r18, Y+5	; 0x05
    18e2:	3e 81       	ldd	r19, Y+6	; 0x06
    18e4:	21 15       	cp	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	31 f0       	breq	.+12     	; 0x18f6 <PWM_InitTimer1+0x26a>
    18ea:	4d 81       	ldd	r20, Y+5	; 0x05
    18ec:	5e 81       	ldd	r21, Y+6	; 0x06
    18ee:	41 30       	cpi	r20, 0x01	; 1
    18f0:	51 05       	cpc	r21, r1
    18f2:	89 f1       	breq	.+98     	; 0x1956 <PWM_InitTimer1+0x2ca>
    18f4:	fb c0       	rjmp	.+502    	; 0x1aec <PWM_InitTimer1+0x460>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    18f6:	0a e4       	ldi	r16, 0x4A	; 74
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	e9 81       	ldd	r30, Y+1	; 0x01
    18fc:	fa 81       	ldd	r31, Y+2	; 0x02
    18fe:	80 85       	ldd	r24, Z+8	; 0x08
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	80 91 e4 01 	lds	r24, 0x01E4
    1908:	90 91 e5 01 	lds	r25, 0x01E5
    190c:	fc 01       	movw	r30, r24
    190e:	2e 9f       	mul	r18, r30
    1910:	c0 01       	movw	r24, r0
    1912:	2f 9f       	mul	r18, r31
    1914:	90 0d       	add	r25, r0
    1916:	3e 9f       	mul	r19, r30
    1918:	90 0d       	add	r25, r0
    191a:	11 24       	eor	r1, r1
    191c:	cc 01       	movw	r24, r24
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	48 ec       	ldi	r20, 0xC8	; 200
    1938:	52 e4       	ldi	r21, 0x42	; 66
    193a:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	f8 01       	movw	r30, r16
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	cb c0       	rjmp	.+406    	; 0x1aec <PWM_InitTimer1+0x460>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1956:	0f 2e       	mov	r0, r31
    1958:	fa e4       	ldi	r31, 0x4A	; 74
    195a:	cf 2e       	mov	r12, r31
    195c:	dd 24       	eor	r13, r13
    195e:	f0 2d       	mov	r31, r0
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	80 85       	ldd	r24, Z+8	; 0x08
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	aa 27       	eor	r26, r26
    196c:	97 fd       	sbrc	r25, 7
    196e:	a0 95       	com	r26
    1970:	ba 2f       	mov	r27, r26
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    197a:	9b 01       	movw	r18, r22
    197c:	ac 01       	movw	r20, r24
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	88 ec       	ldi	r24, 0xC8	; 200
    1984:	92 e4       	ldi	r25, 0x42	; 66
    1986:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	7c 01       	movw	r14, r24
    1990:	8d 01       	movw	r16, r26
    1992:	80 91 e4 01 	lds	r24, 0x01E4
    1996:	90 91 e5 01 	lds	r25, 0x01E5
    199a:	cc 01       	movw	r24, r24
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	c8 01       	movw	r24, r16
    19ae:	b7 01       	movw	r22, r14
    19b0:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	48 ec       	ldi	r20, 0xC8	; 200
    19c2:	52 e4       	ldi	r21, 0x42	; 66
    19c4:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f6 01       	movw	r30, r12
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	86 c0       	rjmp	.+268    	; 0x1aec <PWM_InitTimer1+0x460>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (Config_Ptr->State) {
    19e0:	e9 81       	ldd	r30, Y+1	; 0x01
    19e2:	fa 81       	ldd	r31, Y+2	; 0x02
    19e4:	83 81       	ldd	r24, Z+3	; 0x03
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	3c 83       	std	Y+4, r19	; 0x04
    19ec:	2b 83       	std	Y+3, r18	; 0x03
    19ee:	4b 81       	ldd	r20, Y+3	; 0x03
    19f0:	5c 81       	ldd	r21, Y+4	; 0x04
    19f2:	41 15       	cp	r20, r1
    19f4:	51 05       	cpc	r21, r1
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <PWM_InitTimer1+0x378>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	89 f1       	breq	.+98     	; 0x1a64 <PWM_InitTimer1+0x3d8>
    1a02:	74 c0       	rjmp	.+232    	; 0x1aec <PWM_InitTimer1+0x460>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1a04:	08 e4       	ldi	r16, 0x48	; 72
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	80 85       	ldd	r24, Z+8	; 0x08
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	80 91 e4 01 	lds	r24, 0x01E4
    1a16:	90 91 e5 01 	lds	r25, 0x01E5
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	2e 9f       	mul	r18, r30
    1a1e:	c0 01       	movw	r24, r0
    1a20:	2f 9f       	mul	r18, r31
    1a22:	90 0d       	add	r25, r0
    1a24:	3e 9f       	mul	r19, r30
    1a26:	90 0d       	add	r25, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	cc 01       	movw	r24, r24
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	48 ec       	ldi	r20, 0xC8	; 200
    1a46:	52 e4       	ldi	r21, 0x42	; 66
    1a48:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	44 c0       	rjmp	.+136    	; 0x1aec <PWM_InitTimer1+0x460>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1a64:	0f 2e       	mov	r0, r31
    1a66:	f8 e4       	ldi	r31, 0x48	; 72
    1a68:	cf 2e       	mov	r12, r31
    1a6a:	dd 24       	eor	r13, r13
    1a6c:	f0 2d       	mov	r31, r0
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	80 85       	ldd	r24, Z+8	; 0x08
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	aa 27       	eor	r26, r26
    1a7a:	97 fd       	sbrc	r25, 7
    1a7c:	a0 95       	com	r26
    1a7e:	ba 2f       	mov	r27, r26
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	92 e4       	ldi	r25, 0x42	; 66
    1a94:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	8d 01       	movw	r16, r26
    1aa0:	80 91 e4 01 	lds	r24, 0x01E4
    1aa4:	90 91 e5 01 	lds	r25, 0x01E5
    1aa8:	cc 01       	movw	r24, r24
    1aaa:	a0 e0       	ldi	r26, 0x00	; 0
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	c8 01       	movw	r24, r16
    1abc:	b7 01       	movw	r22, r14
    1abe:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	48 ec       	ldi	r20, 0xC8	; 200
    1ad0:	52 e4       	ldi	r21, 0x42	; 66
    1ad2:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
			}
			break;
		default: break;
	}
	/* Clear TCNT1 Register Configuration */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    1aec:	ec e4       	ldi	r30, 0x4C	; 76
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	11 82       	std	Z+1, r1	; 0x01
    1af2:	10 82       	st	Z, r1
}
    1af4:	2e 96       	adiw	r28, 0x0e	; 14
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	08 95       	ret

00001b12 <PWM_InitTimer2>:

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <PWM_InitTimer2+0xa>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <PWM_InitTimer2+0xc>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
	/* Make PD7=OC2 as output */
	// DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_7, DIO_OUTPUT);
	SET_BIT(*PORTD_DIR_REG, 7U);
    1b26:	a1 e3       	ldi	r26, 0x31	; 49
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e1 e3       	ldi	r30, 0x31	; 49
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 68       	ori	r24, 0x80	; 128
    1b32:	8c 93       	st	X, r24
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
    1b34:	e5 e4       	ldi	r30, 0x45	; 69
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	10 82       	st	Z, r1
	/* Set PWM Mode */
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
    1b3a:	a5 e4       	ldi	r26, 0x45	; 69
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e4       	ldi	r30, 0x45	; 69
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	90 81       	ld	r25, Z
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	81 81       	ldd	r24, Z+1	; 0x01
    1b4a:	88 0f       	add	r24, r24
    1b4c:	88 0f       	add	r24, r24
    1b4e:	88 0f       	add	r24, r24
    1b50:	89 2b       	or	r24, r25
    1b52:	80 64       	ori	r24, 0x40	; 64
    1b54:	8c 93       	st	X, r24
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
    1b56:	a3 e5       	ldi	r26, 0x53	; 83
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e3 e5       	ldi	r30, 0x53	; 83
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	90 81       	ld	r25, Z
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	83 81       	ldd	r24, Z+3	; 0x03
    1b66:	82 95       	swap	r24
    1b68:	80 7f       	andi	r24, 0xF0	; 240
    1b6a:	89 2b       	or	r24, r25
    1b6c:	80 62       	ori	r24, 0x20	; 32
    1b6e:	8c 93       	st	X, r24
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
    1b70:	e9 81       	ldd	r30, Y+1	; 0x01
    1b72:	fa 81       	ldd	r31, Y+2	; 0x02
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	88 30       	cpi	r24, 0x08	; 8
    1b78:	79 f0       	breq	.+30     	; 0x1b98 <PWM_InitTimer2+0x86>
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	89 30       	cpi	r24, 0x09	; 9
    1b82:	51 f0       	breq	.+20     	; 0x1b98 <PWM_InitTimer2+0x86>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    1b84:	a5 e4       	ldi	r26, 0x45	; 69
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e5 e4       	ldi	r30, 0x45	; 69
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	90 81       	ld	r25, Z
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	82 81       	ldd	r24, Z+2	; 0x02
    1b94:	89 2b       	or	r24, r25
    1b96:	8c 93       	st	X, r24
	}
	/* Set Duty Value in OCR2 Register */
	*TIMER2_CMP_REG = 0x00U;
    1b98:	e3 e4       	ldi	r30, 0x43	; 67
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	10 82       	st	Z, r1
	switch (Config_Ptr->State) {
    1b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba2:	83 81       	ldd	r24, Z+3	; 0x03
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3c 83       	std	Y+4, r19	; 0x04
    1baa:	2b 83       	std	Y+3, r18	; 0x03
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	31 f0       	breq	.+12     	; 0x1bc0 <PWM_InitTimer2+0xae>
    1bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb8:	e1 30       	cpi	r30, 0x01	; 1
    1bba:	f1 05       	cpc	r31, r1
    1bbc:	91 f1       	breq	.+100    	; 0x1c22 <PWM_InitTimer2+0x110>
    1bbe:	66 c0       	rjmp	.+204    	; 0x1c8c <PWM_InitTimer2+0x17a>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    1bc0:	03 e4       	ldi	r16, 0x43	; 67
    1bc2:	10 e0       	ldi	r17, 0x00	; 0
    1bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc8:	80 85       	ldd	r24, Z+8	; 0x08
    1bca:	48 2f       	mov	r20, r24
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	ca 01       	movw	r24, r20
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	22 0f       	add	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	96 95       	lsr	r25
    1bda:	98 2f       	mov	r25, r24
    1bdc:	88 27       	eor	r24, r24
    1bde:	97 95       	ror	r25
    1be0:	87 95       	ror	r24
    1be2:	82 1b       	sub	r24, r18
    1be4:	93 0b       	sbc	r25, r19
    1be6:	84 0f       	add	r24, r20
    1be8:	95 1f       	adc	r25, r21
    1bea:	cc 01       	movw	r24, r24
    1bec:	a0 e0       	ldi	r26, 0x00	; 0
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	48 ec       	ldi	r20, 0xC8	; 200
    1c06:	52 e4       	ldi	r21, 0x42	; 66
    1c08:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	80 83       	st	Z, r24
    1c20:	35 c0       	rjmp	.+106    	; 0x1c8c <PWM_InitTimer2+0x17a>
		case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    1c22:	03 e4       	ldi	r16, 0x43	; 67
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	80 85       	ldd	r24, Z+8	; 0x08
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	aa 27       	eor	r26, r26
    1c32:	97 fd       	sbrc	r25, 7
    1c34:	a0 95       	com	r26
    1c36:	ba 2f       	mov	r27, r26
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	92 e4       	ldi	r25, 0x42	; 66
    1c4c:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	53 e4       	ldi	r21, 0x43	; 67
    1c60:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	48 ec       	ldi	r20, 0xC8	; 200
    1c72:	52 e4       	ldi	r21, 0x42	; 66
    1c74:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
		default: break;
	}
	/* Clear TCNT2 Register Configurations */
	*TIMER2_CNTR_REG = 0x00U;
    1c8c:	e4 e4       	ldi	r30, 0x44	; 68
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	10 82       	st	Z, r1
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <ICU_Init>:
void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr);

/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <ICU_Init+0x6>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Tmr_Channel) {
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	21 f4       	brne	.+8      	; 0x1cc8 <ICU_Init+0x24>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <ICU_InitTimer1>
		default: break;
	}
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <ICU_SetTriggerEdge>:

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <ICU_SetTriggerEdge+0x6>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
    1ce0:	ae e4       	ldi	r26, 0x4E	; 78
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	ee e4       	ldi	r30, 0x4E	; 78
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7b       	andi	r24, 0xBF	; 191
    1cec:	8c 93       	st	X, r24
	switch (Tmr_Channel) {
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	a1 f4       	brne	.+40     	; 0x1d20 <ICU_SetTriggerEdge+0x4e>
		case ICU_TIMER_1: *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT); break;
    1cf8:	ae e4       	ldi	r26, 0x4E	; 78
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ee e4       	ldi	r30, 0x4E	; 78
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	28 2f       	mov	r18, r24
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	00 24       	eor	r0, r0
    1d0c:	96 95       	lsr	r25
    1d0e:	87 95       	ror	r24
    1d10:	07 94       	ror	r0
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	07 94       	ror	r0
    1d18:	98 2f       	mov	r25, r24
    1d1a:	80 2d       	mov	r24, r0
    1d1c:	82 2b       	or	r24, r18
    1d1e:	8c 93       	st	X, r24
		default: break;
	}
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <ICU_ClearTimerValue>:

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	0f 92       	push	r0
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	89 83       	std	Y+1, r24	; 0x01
	switch (Tmr_Channel) {
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	21 f4       	brne	.+8      	; 0x1d48 <ICU_ClearTimerValue+0x1e>
		case ICU_TIMER_1: *(uint16*)TIMER1_CNTR_REG_L = 0x0000U; break;
    1d40:	ec e4       	ldi	r30, 0x4C	; 76
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	11 82       	std	Z+1, r1	; 0x01
    1d46:	10 82       	st	Z, r1
		default: break;
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <ICU_GetInputCaptureValue>:

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <ICU_GetInputCaptureValue+0x6>
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 u16Local_Value = 0U;
    1d5e:	1a 82       	std	Y+2, r1	; 0x02
    1d60:	19 82       	std	Y+1, r1	; 0x01
	switch (Tmr_Channel) {
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	31 f4       	brne	.+12     	; 0x1d78 <ICU_GetInputCaptureValue+0x28>
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
    1d6c:	e6 e4       	ldi	r30, 0x46	; 70
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	9a 83       	std	Y+2, r25	; 0x02
    1d76:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return u16Local_Value;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <ICU_GetStatus+0x6>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
	switch (Tmr_Channel) {
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	c1 f4       	brne	.+48     	; 0x1dce <ICU_GetStatus+0x46>
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
    1d9e:	e8 e5       	ldi	r30, 0x58	; 88
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	82 95       	swap	r24
    1da6:	86 95       	lsr	r24
    1da8:	87 70       	andi	r24, 0x07	; 7
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	90 70       	andi	r25, 0x00	; 0
    1db2:	88 23       	and	r24, r24
    1db4:	51 f0       	breq	.+20     	; 0x1dca <ICU_GetStatus+0x42>
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
    1db6:	a8 e5       	ldi	r26, 0x58	; 88
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e8 e5       	ldi	r30, 0x58	; 88
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 62       	ori	r24, 0x20	; 32
    1dc2:	8c 93       	st	X, r24
				return ICU_EVENT_CATURED;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <ICU_GetStatus+0x48>
			} else {
				return ICU_RUNNING;
    1dca:	1a 82       	std	Y+2, r1	; 0x02
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <ICU_GetStatus+0x48>
			}
		default: break;
	}
	return ICU_RUNNING;
    1dce:	1a 82       	std	Y+2, r1	; 0x02
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <ICU_GetDutyCycle>:

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <ICU_GetDutyCycle+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <ICU_GetDutyCycle+0x8>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	7b 83       	std	Y+3, r23	; 0x03
    1dee:	6a 83       	std	Y+2, r22	; 0x02
    1df0:	5d 83       	std	Y+5, r21	; 0x05
    1df2:	4c 83       	std	Y+4, r20	; 0x04
	switch (Tmr_Channel) {
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	39 f4       	brne	.+14     	; 0x1e0c <ICU_GetDutyCycle+0x30>
		case ICU_TIMER_1:
			ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	2c 81       	ldd	r18, Y+4	; 0x04
    1e04:	3d 81       	ldd	r19, Y+5	; 0x05
    1e06:	b9 01       	movw	r22, r18
    1e08:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <ICU_GetDutyCycle_Timer1>
			break;
		default: break;
	}
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <ICU_InitTimer1>:

/************************************************************************/
/*					Private Functions Implementations                   */
/************************************************************************/
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <ICU_InitTimer1+0x6>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLEAR_BIT(*PORTD_DIR_REG, 6U);
    1e2a:	a1 e3       	ldi	r26, 0x31	; 49
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e1 e3       	ldi	r30, 0x31	; 49
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7b       	andi	r24, 0xBF	; 191
    1e36:	8c 93       	st	X, r24
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
    1e38:	ef e4       	ldi	r30, 0x4F	; 79
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	10 82       	st	Z, r1
	*TIMER1_CTRL_REG_B = 0x00U;
    1e3e:	ee e4       	ldi	r30, 0x4E	; 78
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	10 82       	st	Z, r1
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
    1e44:	ae e4       	ldi	r26, 0x4E	; 78
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	ee e4       	ldi	r30, 0x4E	; 78
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	90 81       	ld	r25, Z
    1e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e50:	fa 81       	ldd	r31, Y+2	; 0x02
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
    1e54:	89 2b       	or	r24, r25
    1e56:	8c 93       	st	X, r24
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
    1e58:	ae e4       	ldi	r26, 0x4E	; 78
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ee e4       	ldi	r30, 0x4E	; 78
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	28 2f       	mov	r18, r24
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	00 24       	eor	r0, r0
    1e70:	96 95       	lsr	r25
    1e72:	87 95       	ror	r24
    1e74:	07 94       	ror	r0
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	07 94       	ror	r0
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	80 2d       	mov	r24, r0
    1e80:	82 2b       	or	r24, r18
    1e82:	8c 93       	st	X, r24
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
    1e84:	a9 e5       	ldi	r26, 0x59	; 89
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e9 e5       	ldi	r30, 0x59	; 89
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	28 2f       	mov	r18, r24
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	83 81       	ldd	r24, Z+3	; 0x03
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	82 95       	swap	r24
    1ea0:	92 95       	swap	r25
    1ea2:	90 7f       	andi	r25, 0xF0	; 240
    1ea4:	98 27       	eor	r25, r24
    1ea6:	80 7f       	andi	r24, 0xF0	; 240
    1ea8:	98 27       	eor	r25, r24
    1eaa:	82 2b       	or	r24, r18
    1eac:	8c 93       	st	X, r24
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    1eae:	ec e4       	ldi	r30, 0x4C	; 76
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	11 82       	std	Z+1, r1	; 0x01
    1eb4:	10 82       	st	Z, r1
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
    1eb6:	e6 e4       	ldi	r30, 0x46	; 70
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	11 82       	std	Z+1, r1	; 0x01
    1ebc:	10 82       	st	Z, r1
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <ICU_GetDutyCycle_Timer1>:

void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	2c 97       	sbiw	r28, 0x0c	; 12
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	9a 87       	std	Y+10, r25	; 0x0a
    1ee6:	89 87       	std	Y+9, r24	; 0x09
    1ee8:	7c 87       	std	Y+12, r23	; 0x0c
    1eea:	6b 87       	std	Y+11, r22	; 0x0b
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    1eec:	a8 e5       	ldi	r26, 0x58	; 88
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e8 e5       	ldi	r30, 0x58	; 88
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 62       	ori	r24, 0x20	; 32
    1ef8:	8c 93       	st	X, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <ICU_GetStatus>
    1f08:	88 23       	and	r24, r24
    1f0a:	d9 f3       	breq	.-10     	; 0x1f02 <ICU_GetDutyCycle_Timer1+0x3a>
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
    1f0c:	1d 82       	std	Y+5, r1	; 0x05
    1f0e:	1e 82       	std	Y+6, r1	; 0x06
    1f10:	1f 82       	std	Y+7, r1	; 0x07
    1f12:	18 86       	std	Y+8, r1	; 0x08
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    1f22:	a8 e5       	ldi	r26, 0x58	; 88
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e8 e5       	ldi	r30, 0x58	; 88
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 62       	ori	r24, 0x20	; 32
    1f2e:	8c 93       	st	X, r24
    1f30:	1e c0       	rjmp	.+60     	; 0x1f6e <ICU_GetDutyCycle_Timer1+0xa6>
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    1f32:	e8 e5       	ldi	r30, 0x58	; 88
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	86 95       	lsr	r24
    1f3a:	86 95       	lsr	r24
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	81 70       	andi	r24, 0x01	; 1
    1f42:	90 70       	andi	r25, 0x00	; 0
    1f44:	88 23       	and	r24, r24
    1f46:	99 f0       	breq	.+38     	; 0x1f6e <ICU_GetDutyCycle_Timer1+0xa6>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    1f48:	a8 e5       	ldi	r26, 0x58	; 88
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e8 e5       	ldi	r30, 0x58	; 88
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	84 60       	ori	r24, 0x04	; 4
    1f54:	8c 93       	st	X, r24
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	af 81       	ldd	r26, Y+7	; 0x07
    1f5c:	b8 85       	ldd	r27, Y+8	; 0x08
    1f5e:	80 50       	subi	r24, 0x00	; 0
    1f60:	90 40       	sbci	r25, 0x00	; 0
    1f62:	af 4f       	sbci	r26, 0xFF	; 255
    1f64:	bf 4f       	sbci	r27, 0xFF	; 255
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	af 83       	std	Y+7, r26	; 0x07
    1f6c:	b8 87       	std	Y+8, r27	; 0x08
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <ICU_GetStatus>
    1f74:	88 23       	and	r24, r24
    1f76:	e9 f2       	breq	.-70     	; 0x1f32 <ICU_GetDutyCycle_Timer1+0x6a>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <ICU_GetInputCaptureValue>
    1f7e:	9c 01       	movw	r18, r24
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	af 81       	ldd	r26, Y+7	; 0x07
    1f8a:	b8 85       	ldd	r27, Y+8	; 0x08
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	a4 1f       	adc	r26, r20
    1f92:	b5 1f       	adc	r27, r21
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	af 83       	std	Y+7, r26	; 0x07
    1f9a:	b8 87       	std	Y+8, r27	; 0x08

	uint32 u32Local_OFF_Counts = 0U;
    1f9c:	19 82       	std	Y+1, r1	; 0x01
    1f9e:	1a 82       	std	Y+2, r1	; 0x02
    1fa0:	1b 82       	std	Y+3, r1	; 0x03
    1fa2:	1c 82       	std	Y+4, r1	; 0x04
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
    1fb2:	a8 e5       	ldi	r26, 0x58	; 88
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e8 e5       	ldi	r30, 0x58	; 88
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 62       	ori	r24, 0x20	; 32
    1fbe:	8c 93       	st	X, r24
    1fc0:	1e c0       	rjmp	.+60     	; 0x1ffe <ICU_GetDutyCycle_Timer1+0x136>
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
    1fc2:	e8 e5       	ldi	r30, 0x58	; 88
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	86 95       	lsr	r24
    1fca:	86 95       	lsr	r24
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	81 70       	andi	r24, 0x01	; 1
    1fd2:	90 70       	andi	r25, 0x00	; 0
    1fd4:	88 23       	and	r24, r24
    1fd6:	99 f0       	breq	.+38     	; 0x1ffe <ICU_GetDutyCycle_Timer1+0x136>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
    1fd8:	a8 e5       	ldi	r26, 0x58	; 88
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e5       	ldi	r30, 0x58	; 88
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	84 60       	ori	r24, 0x04	; 4
    1fe4:	8c 93       	st	X, r24
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	ab 81       	ldd	r26, Y+3	; 0x03
    1fec:	bc 81       	ldd	r27, Y+4	; 0x04
    1fee:	80 50       	subi	r24, 0x00	; 0
    1ff0:	90 40       	sbci	r25, 0x00	; 0
    1ff2:	af 4f       	sbci	r26, 0xFF	; 255
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	ab 83       	std	Y+3, r26	; 0x03
    1ffc:	bc 83       	std	Y+4, r27	; 0x04
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <ICU_GetStatus>
    2004:	88 23       	and	r24, r24
    2006:	e9 f2       	breq	.-70     	; 0x1fc2 <ICU_GetDutyCycle_Timer1+0xfa>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <ICU_GetInputCaptureValue>
    200e:	cc 01       	movw	r24, r24
    2010:	a0 e0       	ldi	r26, 0x00	; 0
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	ab 83       	std	Y+3, r26	; 0x03
    201a:	bc 83       	std	Y+4, r27	; 0x04

	/* Set counts */
	//strLocal_Duty.High_Time = u32Local_ON_Counts;
	//strLocal_Duty.Period_Time = u32Local_ON_Counts + u32Local_OFF_Counts;
	/* Convert these into milliseconds */
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	cc 01       	movw	r24, r24
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	2d 81       	ldd	r18, Y+5	; 0x05
    2028:	3e 81       	ldd	r19, Y+6	; 0x06
    202a:	4f 81       	ldd	r20, Y+7	; 0x07
    202c:	58 85       	ldd	r21, Y+8	; 0x08
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__mulsi3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a e7       	ldi	r20, 0x7A	; 122
    2050:	54 e4       	ldi	r21, 0x44	; 68
    2052:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	34 e2       	ldi	r19, 0x24	; 36
    2062:	44 e7       	ldi	r20, 0x74	; 116
    2064:	5b e4       	ldi	r21, 0x4B	; 75
    2066:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2070:	fc 85       	ldd	r31, Y+12	; 0x0c
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
	Duty_Ptr->Period_Time = (float32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
    207a:	2d 81       	ldd	r18, Y+5	; 0x05
    207c:	3e 81       	ldd	r19, Y+6	; 0x06
    207e:	4f 81       	ldd	r20, Y+7	; 0x07
    2080:	58 85       	ldd	r21, Y+8	; 0x08
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	ab 81       	ldd	r26, Y+3	; 0x03
    2088:	bc 81       	ldd	r27, Y+4	; 0x04
    208a:	79 01       	movw	r14, r18
    208c:	8a 01       	movw	r16, r20
    208e:	e8 0e       	add	r14, r24
    2090:	f9 1e       	adc	r15, r25
    2092:	0a 1f       	adc	r16, r26
    2094:	1b 1f       	adc	r17, r27
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	9c 01       	movw	r18, r24
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	c8 01       	movw	r24, r16
    20a2:	b7 01       	movw	r22, r14
    20a4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <__mulsi3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	54 e4       	ldi	r21, 0x44	; 68
    20c4:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	34 e2       	ldi	r19, 0x24	; 36
    20d4:	44 e7       	ldi	r20, 0x74	; 116
    20d6:	5b e4       	ldi	r21, 0x4B	; 75
    20d8:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    20e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    20e4:	84 83       	std	Z+4, r24	; 0x04
    20e6:	95 83       	std	Z+5, r25	; 0x05
    20e8:	a6 83       	std	Z+6, r26	; 0x06
    20ea:	b7 83       	std	Z+7, r27	; 0x07
}
    20ec:	2c 96       	adiw	r28, 0x0c	; 12
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	08 95       	ret

00002106 <DIO_ObtainRegister>:
	DIO_DIRECTION_REG,
	DIO_OUTPUT_REG,
	DIO_INPUT_REG
}DIO_RegisterType;

static volatile uint8* DIO_ObtainRegister(DIO_PortType Port, DIO_RegisterType Reg) {
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	2e 97       	sbiw	r28, 0x0e	; 14
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3e 87       	std	Y+14, r19	; 0x0e
    2126:	2d 87       	std	Y+13, r18	; 0x0d
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	d1 f1       	breq	.+116    	; 0x21a6 <DIO_ObtainRegister+0xa0>
    2132:	2d 85       	ldd	r18, Y+13	; 0x0d
    2134:	3e 85       	ldd	r19, Y+14	; 0x0e
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	2c f4       	brge	.+10     	; 0x2146 <DIO_ObtainRegister+0x40>
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	71 f0       	breq	.+28     	; 0x2160 <DIO_ObtainRegister+0x5a>
    2144:	97 c0       	rjmp	.+302    	; 0x2274 <DIO_ObtainRegister+0x16e>
    2146:	2d 85       	ldd	r18, Y+13	; 0x0d
    2148:	3e 85       	ldd	r19, Y+14	; 0x0e
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	09 f4       	brne	.+2      	; 0x2152 <DIO_ObtainRegister+0x4c>
    2150:	4d c0       	rjmp	.+154    	; 0x21ec <DIO_ObtainRegister+0xe6>
    2152:	8d 85       	ldd	r24, Y+13	; 0x0d
    2154:	9e 85       	ldd	r25, Y+14	; 0x0e
    2156:	83 30       	cpi	r24, 0x03	; 3
    2158:	91 05       	cpc	r25, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <DIO_ObtainRegister+0x58>
    215c:	69 c0       	rjmp	.+210    	; 0x2230 <DIO_ObtainRegister+0x12a>
    215e:	8a c0       	rjmp	.+276    	; 0x2274 <DIO_ObtainRegister+0x16e>
		case DIO_PORT_A: 
			switch (Reg) {
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	3c 87       	std	Y+12, r19	; 0x0c
    2168:	2b 87       	std	Y+11, r18	; 0x0b
    216a:	8b 85       	ldd	r24, Y+11	; 0x0b
    216c:	9c 85       	ldd	r25, Y+12	; 0x0c
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	91 05       	cpc	r25, r1
    2172:	79 f0       	breq	.+30     	; 0x2192 <DIO_ObtainRegister+0x8c>
    2174:	2b 85       	ldd	r18, Y+11	; 0x0b
    2176:	3c 85       	ldd	r19, Y+12	; 0x0c
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	79 f0       	breq	.+30     	; 0x219c <DIO_ObtainRegister+0x96>
    217e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2180:	9c 85       	ldd	r25, Y+12	; 0x0c
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	09 f0       	breq	.+2      	; 0x2188 <DIO_ObtainRegister+0x82>
    2186:	76 c0       	rjmp	.+236    	; 0x2274 <DIO_ObtainRegister+0x16e>
			case DIO_DIRECTION_REG: return PORTA_DIR_REG;
    2188:	2a e3       	ldi	r18, 0x3A	; 58
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3a 87       	std	Y+10, r19	; 0x0a
    218e:	29 87       	std	Y+9, r18	; 0x09
    2190:	73 c0       	rjmp	.+230    	; 0x2278 <DIO_ObtainRegister+0x172>
			case DIO_OUTPUT_REG: return PORTA_OUT_REG;
    2192:	8b e3       	ldi	r24, 0x3B	; 59
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a 87       	std	Y+10, r25	; 0x0a
    2198:	89 87       	std	Y+9, r24	; 0x09
    219a:	6e c0       	rjmp	.+220    	; 0x2278 <DIO_ObtainRegister+0x172>
			case DIO_INPUT_REG: return PORTA_INP_REG;
    219c:	29 e3       	ldi	r18, 0x39	; 57
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3a 87       	std	Y+10, r19	; 0x0a
    21a2:	29 87       	std	Y+9, r18	; 0x09
    21a4:	69 c0       	rjmp	.+210    	; 0x2278 <DIO_ObtainRegister+0x172>
			default: break;
			}
			break;
		case DIO_PORT_B: 
			switch (Reg) {
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	38 87       	std	Y+8, r19	; 0x08
    21ae:	2f 83       	std	Y+7, r18	; 0x07
    21b0:	8f 81       	ldd	r24, Y+7	; 0x07
    21b2:	98 85       	ldd	r25, Y+8	; 0x08
    21b4:	81 30       	cpi	r24, 0x01	; 1
    21b6:	91 05       	cpc	r25, r1
    21b8:	79 f0       	breq	.+30     	; 0x21d8 <DIO_ObtainRegister+0xd2>
    21ba:	2f 81       	ldd	r18, Y+7	; 0x07
    21bc:	38 85       	ldd	r19, Y+8	; 0x08
    21be:	22 30       	cpi	r18, 0x02	; 2
    21c0:	31 05       	cpc	r19, r1
    21c2:	79 f0       	breq	.+30     	; 0x21e2 <DIO_ObtainRegister+0xdc>
    21c4:	8f 81       	ldd	r24, Y+7	; 0x07
    21c6:	98 85       	ldd	r25, Y+8	; 0x08
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	09 f0       	breq	.+2      	; 0x21ce <DIO_ObtainRegister+0xc8>
    21cc:	53 c0       	rjmp	.+166    	; 0x2274 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTB_DIR_REG;
    21ce:	27 e3       	ldi	r18, 0x37	; 55
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	3a 87       	std	Y+10, r19	; 0x0a
    21d4:	29 87       	std	Y+9, r18	; 0x09
    21d6:	50 c0       	rjmp	.+160    	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTB_OUT_REG;
    21d8:	88 e3       	ldi	r24, 0x38	; 56
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9a 87       	std	Y+10, r25	; 0x0a
    21de:	89 87       	std	Y+9, r24	; 0x09
    21e0:	4b c0       	rjmp	.+150    	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTB_INP_REG;
    21e2:	26 e3       	ldi	r18, 0x36	; 54
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3a 87       	std	Y+10, r19	; 0x0a
    21e8:	29 87       	std	Y+9, r18	; 0x09
    21ea:	46 c0       	rjmp	.+140    	; 0x2278 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		case DIO_PORT_C: 
			switch (Reg) {
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	3e 83       	std	Y+6, r19	; 0x06
    21f4:	2d 83       	std	Y+5, r18	; 0x05
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	71 f0       	breq	.+28     	; 0x221c <DIO_ObtainRegister+0x116>
    2200:	2d 81       	ldd	r18, Y+5	; 0x05
    2202:	3e 81       	ldd	r19, Y+6	; 0x06
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	71 f0       	breq	.+28     	; 0x2226 <DIO_ObtainRegister+0x120>
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	89 f5       	brne	.+98     	; 0x2274 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTC_DIR_REG;
    2212:	24 e3       	ldi	r18, 0x34	; 52
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3a 87       	std	Y+10, r19	; 0x0a
    2218:	29 87       	std	Y+9, r18	; 0x09
    221a:	2e c0       	rjmp	.+92     	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTC_OUT_REG;
    221c:	85 e3       	ldi	r24, 0x35	; 53
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9a 87       	std	Y+10, r25	; 0x0a
    2222:	89 87       	std	Y+9, r24	; 0x09
    2224:	29 c0       	rjmp	.+82     	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTC_INP_REG;
    2226:	23 e3       	ldi	r18, 0x33	; 51
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	3a 87       	std	Y+10, r19	; 0x0a
    222c:	29 87       	std	Y+9, r18	; 0x09
    222e:	24 c0       	rjmp	.+72     	; 0x2278 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		case DIO_PORT_D: 
			switch (Reg) {
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3c 83       	std	Y+4, r19	; 0x04
    2238:	2b 83       	std	Y+3, r18	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	71 f0       	breq	.+28     	; 0x2260 <DIO_ObtainRegister+0x15a>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	71 f0       	breq	.+28     	; 0x226a <DIO_ObtainRegister+0x164>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	79 f4       	brne	.+30     	; 0x2274 <DIO_ObtainRegister+0x16e>
				case DIO_DIRECTION_REG: return PORTD_DIR_REG;
    2256:	21 e3       	ldi	r18, 0x31	; 49
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3a 87       	std	Y+10, r19	; 0x0a
    225c:	29 87       	std	Y+9, r18	; 0x09
    225e:	0c c0       	rjmp	.+24     	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_OUTPUT_REG: return PORTD_OUT_REG;
    2260:	82 e3       	ldi	r24, 0x32	; 50
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9a 87       	std	Y+10, r25	; 0x0a
    2266:	89 87       	std	Y+9, r24	; 0x09
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <DIO_ObtainRegister+0x172>
				case DIO_INPUT_REG: return PORTD_INP_REG;
    226a:	20 e3       	ldi	r18, 0x30	; 48
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3a 87       	std	Y+10, r19	; 0x0a
    2270:	29 87       	std	Y+9, r18	; 0x09
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_ObtainRegister+0x172>
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
    2274:	1a 86       	std	Y+10, r1	; 0x0a
    2276:	19 86       	std	Y+9, r1	; 0x09
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    227c:	2e 96       	adiw	r28, 0x0e	; 14
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <DIO_SetPinDirection>:

void DIO_SetPinDirection(DIO_PortType Port, DIO_PinType Pin, DIO_DirectionType Direction) {
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	27 97       	sbiw	r28, 0x07	; 7
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8b 83       	std	Y+3, r24	; 0x03
    22a4:	6c 83       	std	Y+4, r22	; 0x04
    22a6:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	3f 83       	std	Y+7, r19	; 0x07
    22bc:	2e 83       	std	Y+6, r18	; 0x06
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	9f 81       	ldd	r25, Y+7	; 0x07
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	31 f0       	breq	.+12     	; 0x22d2 <DIO_SetPinDirection+0x44>
    22c6:	2e 81       	ldd	r18, Y+6	; 0x06
    22c8:	3f 81       	ldd	r19, Y+7	; 0x07
    22ca:	21 30       	cpi	r18, 0x01	; 1
    22cc:	31 05       	cpc	r19, r1
    22ce:	a9 f0       	breq	.+42     	; 0x22fa <DIO_SetPinDirection+0x6c>
    22d0:	26 c0       	rjmp	.+76     	; 0x231e <DIO_SetPinDirection+0x90>
		case DIO_INPUT: CLEAR_BIT(*Reg_Ptr, Pin); break;
    22d2:	e9 81       	ldd	r30, Y+1	; 0x01
    22d4:	fa 81       	ldd	r31, Y+2	; 0x02
    22d6:	40 81       	ld	r20, Z
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <DIO_SetPinDirection+0x5c>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <DIO_SetPinDirection+0x58>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	e9 81       	ldd	r30, Y+1	; 0x01
    22f4:	fa 81       	ldd	r31, Y+2	; 0x02
    22f6:	80 83       	st	Z, r24
    22f8:	12 c0       	rjmp	.+36     	; 0x231e <DIO_SetPinDirection+0x90>
		case DIO_OUTPUT: SET_BIT(*Reg_Ptr, Pin); break;
    22fa:	e9 81       	ldd	r30, Y+1	; 0x01
    22fc:	fa 81       	ldd	r31, Y+2	; 0x02
    22fe:	40 81       	ld	r20, Z
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <DIO_SetPinDirection+0x84>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <DIO_SetPinDirection+0x80>
    2316:	84 2b       	or	r24, r20
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	80 83       	st	Z, r24
		default: break;
	}
}
    231e:	27 96       	adiw	r28, 0x07	; 7
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <DIO_WritePin>:

void DIO_WritePin(DIO_PortType Port, DIO_PinType Pin, DIO_StateType State) {
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	27 97       	sbiw	r28, 0x07	; 7
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	6c 83       	std	Y+4, r22	; 0x04
    2348:	4d 83       	std	Y+5, r20	; 0x05
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
	switch (State) {
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	3f 83       	std	Y+7, r19	; 0x07
    235e:	2e 83       	std	Y+6, r18	; 0x06
    2360:	8e 81       	ldd	r24, Y+6	; 0x06
    2362:	9f 81       	ldd	r25, Y+7	; 0x07
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	31 f0       	breq	.+12     	; 0x2374 <DIO_WritePin+0x44>
    2368:	2e 81       	ldd	r18, Y+6	; 0x06
    236a:	3f 81       	ldd	r19, Y+7	; 0x07
    236c:	21 30       	cpi	r18, 0x01	; 1
    236e:	31 05       	cpc	r19, r1
    2370:	a9 f0       	breq	.+42     	; 0x239c <DIO_WritePin+0x6c>
    2372:	26 c0       	rjmp	.+76     	; 0x23c0 <DIO_WritePin+0x90>
		case DIO_LOW: CLEAR_BIT(*Reg_Ptr, Pin); break;
    2374:	e9 81       	ldd	r30, Y+1	; 0x01
    2376:	fa 81       	ldd	r31, Y+2	; 0x02
    2378:	40 81       	ld	r20, Z
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_WritePin+0x5c>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_WritePin+0x58>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	80 83       	st	Z, r24
    239a:	12 c0       	rjmp	.+36     	; 0x23c0 <DIO_WritePin+0x90>
		case DIO_HIGH: SET_BIT(*Reg_Ptr, Pin); break;
    239c:	e9 81       	ldd	r30, Y+1	; 0x01
    239e:	fa 81       	ldd	r31, Y+2	; 0x02
    23a0:	40 81       	ld	r20, Z
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	02 2e       	mov	r0, r18
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <DIO_WritePin+0x84>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	0a 94       	dec	r0
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <DIO_WritePin+0x80>
    23b8:	84 2b       	or	r24, r20
    23ba:	e9 81       	ldd	r30, Y+1	; 0x01
    23bc:	fa 81       	ldd	r31, Y+2	; 0x02
    23be:	80 83       	st	Z, r24
		default: break;
	}
}
    23c0:	27 96       	adiw	r28, 0x07	; 7
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <DIO_TogglePin>:

void DIO_TogglePin(DIO_PortType Port, DIO_PinType Pin) {
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <DIO_TogglePin+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <DIO_TogglePin+0x8>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
	TOGGLE_BIT(*Reg_Ptr, Pin);
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	fa 81       	ldd	r31, Y+2	; 0x02
    23f2:	40 81       	ld	r20, Z
    23f4:	8c 81       	ldd	r24, Y+4	; 0x04
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	02 2e       	mov	r0, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <DIO_TogglePin+0x34>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	0a 94       	dec	r0
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <DIO_TogglePin+0x30>
    240a:	84 27       	eor	r24, r20
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	80 83       	st	Z, r24
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <DIO_ReadPin>:

DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	00 d0       	rcall	.+0      	; 0x2426 <DIO_ReadPin+0x6>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <DIO_ReadPin+0x8>
    2428:	0f 92       	push	r0
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	8c 83       	std	Y+4, r24	; 0x04
    2430:	6d 83       	std	Y+5, r22	; 0x05
	DIO_StateType eLocal_State = DIO_LOW;
    2432:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	eLocal_State = READ_BIT(*Reg_Ptr, Pin);
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8d 81       	ldd	r24, Y+5	; 0x05
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a9 01       	movw	r20, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_ReadPin+0x38>
    2454:	55 95       	asr	r21
    2456:	47 95       	ror	r20
    2458:	8a 95       	dec	r24
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <DIO_ReadPin+0x34>
    245c:	ca 01       	movw	r24, r20
    245e:	81 70       	andi	r24, 0x01	; 1
    2460:	8b 83       	std	Y+3, r24	; 0x03
	return eLocal_State;
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <DIO_SetPortDirection+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <DIO_SetPortDirection+0x8>
    247c:	00 d0       	rcall	.+0      	; 0x247e <DIO_SetPortDirection+0xa>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    2492:	8c 81       	ldd	r24, Y+4	; 0x04
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	3e 83       	std	Y+6, r19	; 0x06
    249a:	2d 83       	std	Y+5, r18	; 0x05
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	31 f0       	breq	.+12     	; 0x24b0 <DIO_SetPortDirection+0x3c>
    24a4:	2d 81       	ldd	r18, Y+5	; 0x05
    24a6:	3e 81       	ldd	r19, Y+6	; 0x06
    24a8:	21 30       	cpi	r18, 0x01	; 1
    24aa:	31 05       	cpc	r19, r1
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <DIO_SetPortDirection+0x44>
    24ae:	08 c0       	rjmp	.+16     	; 0x24c0 <DIO_SetPortDirection+0x4c>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	10 82       	st	Z, r1
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <DIO_SetPortDirection+0x4c>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
    24b8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ba:	fa 81       	ldd	r31, Y+2	; 0x02
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	80 83       	st	Z, r24
		default: break;
	}
}
    24c0:	26 96       	adiw	r28, 0x06	; 6
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8 Value) {
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <DIO_WritePort+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <DIO_WritePort+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr = Value;
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	80 83       	st	Z, r24
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <DIO_ReadPort>:

uint8 DIO_ReadPort(DIO_PortType Port) {
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	00 d0       	rcall	.+0      	; 0x250a <DIO_ReadPort+0x6>
    250a:	00 d0       	rcall	.+0      	; 0x250c <DIO_ReadPort+0x8>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    2512:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = *Reg_Ptr;
    2520:	e9 81       	ldd	r30, Y+1	; 0x01
    2522:	fa 81       	ldd	r31, Y+2	; 0x02
    2524:	80 81       	ld	r24, Z
    2526:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <DIO_SetHighHalfPortDirection>:

void DIO_SetHighHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <DIO_SetHighHalfPortDirection+0x6>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <DIO_SetHighHalfPortDirection+0x8>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <DIO_SetHighHalfPortDirection+0xa>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	3e 83       	std	Y+6, r19	; 0x06
    255e:	2d 83       	std	Y+5, r18	; 0x05
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	31 f0       	breq	.+12     	; 0x2574 <DIO_SetHighHalfPortDirection+0x3c>
    2568:	2d 81       	ldd	r18, Y+5	; 0x05
    256a:	3e 81       	ldd	r19, Y+6	; 0x06
    256c:	21 30       	cpi	r18, 0x01	; 1
    256e:	31 05       	cpc	r19, r1
    2570:	49 f0       	breq	.+18     	; 0x2584 <DIO_SetHighHalfPortDirection+0x4c>
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <DIO_SetHighHalfPortDirection+0x5a>
		case DIO_INPUT: *Reg_Ptr &= ~(0xF0U); break;
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	80 81       	ld	r24, Z
    257a:	8f 70       	andi	r24, 0x0F	; 15
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	80 83       	st	Z, r24
    2582:	07 c0       	rjmp	.+14     	; 0x2592 <DIO_SetHighHalfPortDirection+0x5a>
		case DIO_OUTPUT: *Reg_Ptr |= (0xF0U); break;
    2584:	e9 81       	ldd	r30, Y+1	; 0x01
    2586:	fa 81       	ldd	r31, Y+2	; 0x02
    2588:	80 81       	ld	r24, Z
    258a:	80 6f       	ori	r24, 0xF0	; 240
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	80 83       	st	Z, r24
		default: break;
	}
}
    2592:	26 96       	adiw	r28, 0x06	; 6
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <DIO_SetLowHalfPortDirection>:

void DIO_SetLowHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <DIO_SetLowHalfPortDirection+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <DIO_SetLowHalfPortDirection+0x8>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <DIO_SetLowHalfPortDirection+0xa>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
	switch (Direction) {
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	3e 83       	std	Y+6, r19	; 0x06
    25ca:	2d 83       	std	Y+5, r18	; 0x05
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <DIO_SetLowHalfPortDirection+0x3c>
    25d4:	2d 81       	ldd	r18, Y+5	; 0x05
    25d6:	3e 81       	ldd	r19, Y+6	; 0x06
    25d8:	21 30       	cpi	r18, 0x01	; 1
    25da:	31 05       	cpc	r19, r1
    25dc:	49 f0       	breq	.+18     	; 0x25f0 <DIO_SetLowHalfPortDirection+0x4c>
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <DIO_SetLowHalfPortDirection+0x5a>
		case DIO_INPUT: *Reg_Ptr &= ~(0x0FU); break;
    25e0:	e9 81       	ldd	r30, Y+1	; 0x01
    25e2:	fa 81       	ldd	r31, Y+2	; 0x02
    25e4:	80 81       	ld	r24, Z
    25e6:	80 7f       	andi	r24, 0xF0	; 240
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	80 83       	st	Z, r24
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <DIO_SetLowHalfPortDirection+0x5a>
		case DIO_OUTPUT: *Reg_Ptr |= (0x0FU); break;
    25f0:	e9 81       	ldd	r30, Y+1	; 0x01
    25f2:	fa 81       	ldd	r31, Y+2	; 0x02
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 60       	ori	r24, 0x0F	; 15
    25f8:	e9 81       	ldd	r30, Y+1	; 0x01
    25fa:	fa 81       	ldd	r31, Y+2	; 0x02
    25fc:	80 83       	st	Z, r24
		default: break;
	}
}
    25fe:	26 96       	adiw	r28, 0x06	; 6
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <DIO_WriteHighHalfPort>:

void DIO_WriteHighHalfPort(DIO_PortType Port, uint8 HighValue) {
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <DIO_WriteHighHalfPort+0x6>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <DIO_WriteHighHalfPort+0x8>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr &= (0x0FU);
    262c:	e9 81       	ldd	r30, Y+1	; 0x01
    262e:	fa 81       	ldd	r31, Y+2	; 0x02
    2630:	80 81       	ld	r24, Z
    2632:	8f 70       	andi	r24, 0x0F	; 15
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	80 83       	st	Z, r24
	*Reg_Ptr |= (HighValue & 0xF0U);
    263a:	e9 81       	ldd	r30, Y+1	; 0x01
    263c:	fa 81       	ldd	r31, Y+2	; 0x02
    263e:	90 81       	ld	r25, Z
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	80 7f       	andi	r24, 0xF0	; 240
    2644:	89 2b       	or	r24, r25
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	80 83       	st	Z, r24
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <DIO_WriteLowHalfPort>:

void DIO_WriteLowHalfPort(DIO_PortType Port, uint8 LowValue) {
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <DIO_WriteLowHalfPort+0x6>
    2660:	00 d0       	rcall	.+0      	; 0x2662 <DIO_WriteLowHalfPort+0x8>
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	8b 83       	std	Y+3, r24	; 0x03
    2668:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
	*Reg_Ptr &= (0xF0U);
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	80 81       	ld	r24, Z
    267c:	80 7f       	andi	r24, 0xF0	; 240
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	80 83       	st	Z, r24
	*Reg_Ptr |= (LowValue & 0x0F);
    2684:	e9 81       	ldd	r30, Y+1	; 0x01
    2686:	fa 81       	ldd	r31, Y+2	; 0x02
    2688:	80 81       	ld	r24, Z
    268a:	98 2f       	mov	r25, r24
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	8f 70       	andi	r24, 0x0F	; 15
    2690:	89 2b       	or	r24, r25
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	80 83       	st	Z, r24
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <DIO_ReadHighHalfPort>:

uint8 DIO_ReadHighHalfPort(DIO_PortType Port) {
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <DIO_ReadHighHalfPort+0x6>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <DIO_ReadHighHalfPort+0x8>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    26b4:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	62 e0       	ldi	r22, 0x02	; 2
    26ba:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = (((*Reg_Ptr) & 0xF0U)>>4);
    26c2:	e9 81       	ldd	r30, Y+1	; 0x01
    26c4:	fa 81       	ldd	r31, Y+2	; 0x02
    26c6:	80 81       	ld	r24, Z
    26c8:	82 95       	swap	r24
    26ca:	8f 70       	andi	r24, 0x0F	; 15
    26cc:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <DIO_ReadLowHalfPort>:

uint8 DIO_ReadLowHalfPort(DIO_PortType Port) {
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <DIO_ReadLowHalfPort+0x6>
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <DIO_ReadLowHalfPort+0x8>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	8c 83       	std	Y+4, r24	; 0x04
	uint8 u8Local_Value = 0x00U;
    26ec:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_ObtainRegister>
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
	u8Local_Value = ((*Reg_Ptr) & 0x0FU);
    26fa:	e9 81       	ldd	r30, Y+1	; 0x01
    26fc:	fa 81       	ldd	r31, Y+2	; 0x02
    26fe:	80 81       	ld	r24, Z
    2700:	8f 70       	andi	r24, 0x0F	; 15
    2702:	8b 83       	std	Y+3, r24	; 0x03
	return u8Local_Value;
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <GLCD_Init>:

uint8 gu8_Curr_X_Address = 0;
uint8 gu8_Curr_Y_Address = 0;
uint8 gu8_Curr_Page = 0;

void GLCD_Init(void) {
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62

	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	66 e0       	ldi	r22, 0x06	; 6
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	64 e0       	ldi	r22, 0x04	; 4
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	65 e0       	ldi	r22, 0x05	; 5
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 47 11 	call	0x228e	; 0x228e <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	0e 94 3a 12 	call	0x2474	; 0x2474 <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	66 e0       	ldi	r22, 0x06	; 6
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
    2770:	8e e3       	ldi	r24, 0x3E	; 62
    2772:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
    2776:	88 eb       	ldi	r24, 0xB8	; 184
    2778:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
    277c:	10 92 e6 01 	sts	0x01E6, r1
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
    2780:	80 e4       	ldi	r24, 0x40	; 64
    2782:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
    2786:	10 92 e7 01 	sts	0x01E7, r1
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
    278a:	80 ec       	ldi	r24, 0xC0	; 192
    278c:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
    2790:	8f e3       	ldi	r24, 0x3F	; 63
    2792:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    279c:	10 92 e8 01 	sts	0x01E8, r1
}
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <GLCD_SelectPage>:

void GLCD_SelectPage(GLCD_PageSelectType Page) {
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <GLCD_SelectPage+0x6>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	89 83       	std	Y+1, r24	; 0x01
	switch (Page) {
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	3b 83       	std	Y+3, r19	; 0x03
    27bc:	2a 83       	std	Y+2, r18	; 0x02
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	91 05       	cpc	r25, r1
    27c6:	01 f1       	breq	.+64     	; 0x2808 <GLCD_SelectPage+0x62>
    27c8:	2a 81       	ldd	r18, Y+2	; 0x02
    27ca:	3b 81       	ldd	r19, Y+3	; 0x03
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <GLCD_SelectPage+0x36>
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	61 f0       	breq	.+24     	; 0x27f2 <GLCD_SelectPage+0x4c>
    27da:	36 c0       	rjmp	.+108    	; 0x2848 <GLCD_SelectPage+0xa2>
    27dc:	2a 81       	ldd	r18, Y+2	; 0x02
    27de:	3b 81       	ldd	r19, Y+3	; 0x03
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	e1 f0       	breq	.+56     	; 0x281e <GLCD_SelectPage+0x78>
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	91 05       	cpc	r25, r1
    27ee:	11 f1       	breq	.+68     	; 0x2834 <GLCD_SelectPage+0x8e>
    27f0:	2b c0       	rjmp	.+86     	; 0x2848 <GLCD_SelectPage+0xa2>
		case GLCD_NO_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	64 e0       	ldi	r22, 0x04	; 4
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	65 e0       	ldi	r22, 0x05	; 5
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    2806:	20 c0       	rjmp	.+64     	; 0x2848 <GLCD_SelectPage+0xa2>
			break;
		case GLCD_PAGE_0:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	64 e0       	ldi	r22, 0x04	; 4
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	65 e0       	ldi	r22, 0x05	; 5
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    281c:	15 c0       	rjmp	.+42     	; 0x2848 <GLCD_SelectPage+0xa2>
			break;
		case GLCD_PAGE_1:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	64 e0       	ldi	r22, 0x04	; 4
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	65 e0       	ldi	r22, 0x05	; 5
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    2832:	0a c0       	rjmp	.+20     	; 0x2848 <GLCD_SelectPage+0xa2>
			break;
		case GLCD_BOTH_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	65 e0       	ldi	r22, 0x05	; 5
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
			break;
		default: break;
	}
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <GLCD_SendInstruction>:

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	69 97       	sbiw	r28, 0x19	; 25
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	89 8f       	std	Y+25, r24	; 0x19
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	62 e0       	ldi	r22, 0x02	; 2
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	69 8d       	ldd	r22, Y+25	; 0x19
    2882:	0e 94 69 12 	call	0x24d2	; 0x24d2 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 ea       	ldi	r26, 0xA0	; 160
    2896:	b0 e4       	ldi	r27, 0x40	; 64
    2898:	8d 8b       	std	Y+21, r24	; 0x15
    289a:	9e 8b       	std	Y+22, r25	; 0x16
    289c:	af 8b       	std	Y+23, r26	; 0x17
    289e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	2b ea       	ldi	r18, 0xAB	; 171
    28aa:	3a ea       	ldi	r19, 0xAA	; 170
    28ac:	4a ea       	ldi	r20, 0xAA	; 170
    28ae:	50 e4       	ldi	r21, 0x40	; 64
    28b0:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	89 8b       	std	Y+17, r24	; 0x11
    28ba:	9a 8b       	std	Y+18, r25	; 0x12
    28bc:	ab 8b       	std	Y+19, r26	; 0x13
    28be:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28c0:	69 89       	ldd	r22, Y+17	; 0x11
    28c2:	7a 89       	ldd	r23, Y+18	; 0x12
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	1c f4       	brge	.+6      	; 0x28de <GLCD_SendInstruction+0x8a>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	88 8b       	std	Y+16, r24	; 0x10
    28dc:	91 c0       	rjmp	.+290    	; 0x2a00 <GLCD_SendInstruction+0x1ac>
	else if (__tmp > 255)
    28de:	69 89       	ldd	r22, Y+17	; 0x11
    28e0:	7a 89       	ldd	r23, Y+18	; 0x12
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	53 e4       	ldi	r21, 0x43	; 67
    28ee:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	0c f0       	brlt	.+2      	; 0x28f8 <GLCD_SendInstruction+0xa4>
    28f6:	7b c0       	rjmp	.+246    	; 0x29ee <GLCD_SendInstruction+0x19a>
	{
		_delay_ms(__us / 1000.0);
    28f8:	6d 89       	ldd	r22, Y+21	; 0x15
    28fa:	7e 89       	ldd	r23, Y+22	; 0x16
    28fc:	8f 89       	ldd	r24, Y+23	; 0x17
    28fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a e7       	ldi	r20, 0x7A	; 122
    2906:	54 e4       	ldi	r21, 0x44	; 68
    2908:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8c 87       	std	Y+12, r24	; 0x0c
    2912:	9d 87       	std	Y+13, r25	; 0x0d
    2914:	ae 87       	std	Y+14, r26	; 0x0e
    2916:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	6c 85       	ldd	r22, Y+12	; 0x0c
    291a:	7d 85       	ldd	r23, Y+13	; 0x0d
    291c:	8e 85       	ldd	r24, Y+14	; 0x0e
    291e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	55 e4       	ldi	r21, 0x45	; 69
    2928:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	88 87       	std	Y+8, r24	; 0x08
    2932:	99 87       	std	Y+9, r25	; 0x09
    2934:	aa 87       	std	Y+10, r26	; 0x0a
    2936:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2938:	68 85       	ldd	r22, Y+8	; 0x08
    293a:	79 85       	ldd	r23, Y+9	; 0x09
    293c:	8a 85       	ldd	r24, Y+10	; 0x0a
    293e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <GLCD_SendInstruction+0x106>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9f 83       	std	Y+7, r25	; 0x07
    2956:	8e 83       	std	Y+6, r24	; 0x06
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <GLCD_SendInstruction+0x184>
	else if (__tmp > 65535)
    295a:	68 85       	ldd	r22, Y+8	; 0x08
    295c:	79 85       	ldd	r23, Y+9	; 0x09
    295e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2960:	9b 85       	ldd	r25, Y+11	; 0x0b
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <GLCD_SendInstruction+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	6c 85       	ldd	r22, Y+12	; 0x0c
    2974:	7d 85       	ldd	r23, Y+13	; 0x0d
    2976:	8e 85       	ldd	r24, Y+14	; 0x0e
    2978:	9f 85       	ldd	r25, Y+15	; 0x0f
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9f 83       	std	Y+7, r25	; 0x07
    2998:	8e 83       	std	Y+6, r24	; 0x06
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <GLCD_SendInstruction+0x166>
    299c:	80 e9       	ldi	r24, 0x90	; 144
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	9d 83       	std	Y+5, r25	; 0x05
    29a2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <GLCD_SendInstruction+0x154>
    29ac:	9d 83       	std	Y+5, r25	; 0x05
    29ae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	8e 81       	ldd	r24, Y+6	; 0x06
    29b2:	9f 81       	ldd	r25, Y+7	; 0x07
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9f 83       	std	Y+7, r25	; 0x07
    29b8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	8e 81       	ldd	r24, Y+6	; 0x06
    29bc:	9f 81       	ldd	r25, Y+7	; 0x07
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <GLCD_SendInstruction+0x148>
    29c2:	24 c0       	rjmp	.+72     	; 0x2a0c <GLCD_SendInstruction+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	68 85       	ldd	r22, Y+8	; 0x08
    29c6:	79 85       	ldd	r23, Y+9	; 0x09
    29c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    29cc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9f 83       	std	Y+7, r25	; 0x07
    29d6:	8e 83       	std	Y+6, r24	; 0x06
    29d8:	8e 81       	ldd	r24, Y+6	; 0x06
    29da:	9f 81       	ldd	r25, Y+7	; 0x07
    29dc:	9b 83       	std	Y+3, r25	; 0x03
    29de:	8a 83       	std	Y+2, r24	; 0x02
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <GLCD_SendInstruction+0x190>
    29e8:	9b 83       	std	Y+3, r25	; 0x03
    29ea:	8a 83       	std	Y+2, r24	; 0x02
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <GLCD_SendInstruction+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ee:	69 89       	ldd	r22, Y+17	; 0x11
    29f0:	7a 89       	ldd	r23, Y+18	; 0x12
    29f2:	8b 89       	ldd	r24, Y+19	; 0x13
    29f4:	9c 89       	ldd	r25, Y+20	; 0x14
    29f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	88 8b       	std	Y+16, r24	; 0x10
    2a00:	88 89       	ldd	r24, Y+16	; 0x10
    2a02:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	8a 95       	dec	r24
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <GLCD_SendInstruction+0x1b2>
    2a0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
}
    2a16:	69 96       	adiw	r28, 0x19	; 25
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <GLCD_SendData>:

void GLCD_SendData(uint8 Data) {
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	69 97       	sbiw	r28, 0x19	; 25
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	89 8f       	std	Y+25, r24	; 0x19
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	62 e0       	ldi	r22, 0x02	; 2
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	61 e0       	ldi	r22, 0x01	; 1
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	69 8d       	ldd	r22, Y+25	; 0x19
    2a56:	0e 94 69 12 	call	0x24d2	; 0x24d2 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 ea       	ldi	r26, 0xA0	; 160
    2a6a:	b0 e4       	ldi	r27, 0x40	; 64
    2a6c:	8d 8b       	std	Y+21, r24	; 0x15
    2a6e:	9e 8b       	std	Y+22, r25	; 0x16
    2a70:	af 8b       	std	Y+23, r26	; 0x17
    2a72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a74:	6d 89       	ldd	r22, Y+21	; 0x15
    2a76:	7e 89       	ldd	r23, Y+22	; 0x16
    2a78:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7c:	2b ea       	ldi	r18, 0xAB	; 171
    2a7e:	3a ea       	ldi	r19, 0xAA	; 170
    2a80:	4a ea       	ldi	r20, 0xAA	; 170
    2a82:	50 e4       	ldi	r21, 0x40	; 64
    2a84:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	89 8b       	std	Y+17, r24	; 0x11
    2a8e:	9a 8b       	std	Y+18, r25	; 0x12
    2a90:	ab 8b       	std	Y+19, r26	; 0x13
    2a92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a94:	69 89       	ldd	r22, Y+17	; 0x11
    2a96:	7a 89       	ldd	r23, Y+18	; 0x12
    2a98:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	1c f4       	brge	.+6      	; 0x2ab2 <GLCD_SendData+0x8a>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	88 8b       	std	Y+16, r24	; 0x10
    2ab0:	91 c0       	rjmp	.+290    	; 0x2bd4 <GLCD_SendData+0x1ac>
	else if (__tmp > 255)
    2ab2:	69 89       	ldd	r22, Y+17	; 0x11
    2ab4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4f e7       	ldi	r20, 0x7F	; 127
    2ac0:	53 e4       	ldi	r21, 0x43	; 67
    2ac2:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2ac6:	18 16       	cp	r1, r24
    2ac8:	0c f0       	brlt	.+2      	; 0x2acc <GLCD_SendData+0xa4>
    2aca:	7b c0       	rjmp	.+246    	; 0x2bc2 <GLCD_SendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2acc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ace:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8c 87       	std	Y+12, r24	; 0x0c
    2ae6:	9d 87       	std	Y+13, r25	; 0x0d
    2ae8:	ae 87       	std	Y+14, r26	; 0x0e
    2aea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	55 e4       	ldi	r21, 0x45	; 69
    2afc:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	88 87       	std	Y+8, r24	; 0x08
    2b06:	99 87       	std	Y+9, r25	; 0x09
    2b08:	aa 87       	std	Y+10, r26	; 0x0a
    2b0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b0c:	68 85       	ldd	r22, Y+8	; 0x08
    2b0e:	79 85       	ldd	r23, Y+9	; 0x09
    2b10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	2c f4       	brge	.+10     	; 0x2b2e <GLCD_SendData+0x106>
		__ticks = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9f 83       	std	Y+7, r25	; 0x07
    2b2a:	8e 83       	std	Y+6, r24	; 0x06
    2b2c:	3f c0       	rjmp	.+126    	; 0x2bac <GLCD_SendData+0x184>
	else if (__tmp > 65535)
    2b2e:	68 85       	ldd	r22, Y+8	; 0x08
    2b30:	79 85       	ldd	r23, Y+9	; 0x09
    2b32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	3f ef       	ldi	r19, 0xFF	; 255
    2b3a:	4f e7       	ldi	r20, 0x7F	; 127
    2b3c:	57 e4       	ldi	r21, 0x47	; 71
    2b3e:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2b42:	18 16       	cp	r1, r24
    2b44:	4c f5       	brge	.+82     	; 0x2b98 <GLCD_SendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e2       	ldi	r20, 0x20	; 32
    2b54:	51 e4       	ldi	r21, 0x41	; 65
    2b56:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9f 83       	std	Y+7, r25	; 0x07
    2b6c:	8e 83       	std	Y+6, r24	; 0x06
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <GLCD_SendData+0x166>
    2b70:	80 e9       	ldi	r24, 0x90	; 144
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	9d 83       	std	Y+5, r25	; 0x05
    2b76:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <GLCD_SendData+0x154>
    2b80:	9d 83       	std	Y+5, r25	; 0x05
    2b82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	9f 81       	ldd	r25, Y+7	; 0x07
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	9f 83       	std	Y+7, r25	; 0x07
    2b8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b90:	9f 81       	ldd	r25, Y+7	; 0x07
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <GLCD_SendData+0x148>
    2b96:	24 c0       	rjmp	.+72     	; 0x2be0 <GLCD_SendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	68 85       	ldd	r22, Y+8	; 0x08
    2b9a:	79 85       	ldd	r23, Y+9	; 0x09
    2b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9f 83       	std	Y+7, r25	; 0x07
    2baa:	8e 83       	std	Y+6, r24	; 0x06
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <GLCD_SendData+0x190>
    2bbc:	9b 83       	std	Y+3, r25	; 0x03
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <GLCD_SendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc2:	69 89       	ldd	r22, Y+17	; 0x11
    2bc4:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	88 8b       	std	Y+16, r24	; 0x10
    2bd4:	88 89       	ldd	r24, Y+16	; 0x10
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	8a 95       	dec	r24
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <GLCD_SendData+0x1b2>
    2bde:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
}
    2bea:	69 96       	adiw	r28, 0x19	; 25
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <GLCD_Reset>:

void GLCD_Reset(void) {
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	68 97       	sbiw	r28, 0x18	; 24
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	66 e0       	ldi	r22, 0x06	; 6
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e2       	ldi	r26, 0x20	; 32
    2c20:	b1 e4       	ldi	r27, 0x41	; 65
    2c22:	8d 8b       	std	Y+21, r24	; 0x15
    2c24:	9e 8b       	std	Y+22, r25	; 0x16
    2c26:	af 8b       	std	Y+23, r26	; 0x17
    2c28:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c30:	98 8d       	ldd	r25, Y+24	; 0x18
    2c32:	2b ea       	ldi	r18, 0xAB	; 171
    2c34:	3a ea       	ldi	r19, 0xAA	; 170
    2c36:	4a ea       	ldi	r20, 0xAA	; 170
    2c38:	50 e4       	ldi	r21, 0x40	; 64
    2c3a:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	89 8b       	std	Y+17, r24	; 0x11
    2c44:	9a 8b       	std	Y+18, r25	; 0x12
    2c46:	ab 8b       	std	Y+19, r26	; 0x13
    2c48:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c4a:	69 89       	ldd	r22, Y+17	; 0x11
    2c4c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c50:	9c 89       	ldd	r25, Y+20	; 0x14
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	1c f4       	brge	.+6      	; 0x2c68 <GLCD_Reset+0x6c>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	88 8b       	std	Y+16, r24	; 0x10
    2c66:	91 c0       	rjmp	.+290    	; 0x2d8a <GLCD_Reset+0x18e>
	else if (__tmp > 255)
    2c68:	69 89       	ldd	r22, Y+17	; 0x11
    2c6a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4f e7       	ldi	r20, 0x7F	; 127
    2c76:	53 e4       	ldi	r21, 0x43	; 67
    2c78:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	0c f0       	brlt	.+2      	; 0x2c82 <GLCD_Reset+0x86>
    2c80:	7b c0       	rjmp	.+246    	; 0x2d78 <GLCD_Reset+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2c82:	6d 89       	ldd	r22, Y+21	; 0x15
    2c84:	7e 89       	ldd	r23, Y+22	; 0x16
    2c86:	8f 89       	ldd	r24, Y+23	; 0x17
    2c88:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4a e7       	ldi	r20, 0x7A	; 122
    2c90:	54 e4       	ldi	r21, 0x44	; 68
    2c92:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	8c 87       	std	Y+12, r24	; 0x0c
    2c9c:	9d 87       	std	Y+13, r25	; 0x0d
    2c9e:	ae 87       	std	Y+14, r26	; 0x0e
    2ca0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ca4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ca6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a e7       	ldi	r20, 0x7A	; 122
    2cb0:	55 e4       	ldi	r21, 0x45	; 69
    2cb2:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	88 87       	std	Y+8, r24	; 0x08
    2cbc:	99 87       	std	Y+9, r25	; 0x09
    2cbe:	aa 87       	std	Y+10, r26	; 0x0a
    2cc0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cc2:	68 85       	ldd	r22, Y+8	; 0x08
    2cc4:	79 85       	ldd	r23, Y+9	; 0x09
    2cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <GLCD_Reset+0xe8>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9f 83       	std	Y+7, r25	; 0x07
    2ce0:	8e 83       	std	Y+6, r24	; 0x06
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <GLCD_Reset+0x166>
	else if (__tmp > 65535)
    2ce4:	68 85       	ldd	r22, Y+8	; 0x08
    2ce6:	79 85       	ldd	r23, Y+9	; 0x09
    2ce8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <GLCD_Reset+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cfe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9f 83       	std	Y+7, r25	; 0x07
    2d22:	8e 83       	std	Y+6, r24	; 0x06
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <GLCD_Reset+0x148>
    2d26:	80 e9       	ldi	r24, 0x90	; 144
    2d28:	91 e0       	ldi	r25, 0x01	; 1
    2d2a:	9d 83       	std	Y+5, r25	; 0x05
    2d2c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	9d 81       	ldd	r25, Y+5	; 0x05
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <GLCD_Reset+0x136>
    2d36:	9d 83       	std	Y+5, r25	; 0x05
    2d38:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9f 83       	std	Y+7, r25	; 0x07
    2d42:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8e 81       	ldd	r24, Y+6	; 0x06
    2d46:	9f 81       	ldd	r25, Y+7	; 0x07
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <GLCD_Reset+0x12a>
    2d4c:	24 c0       	rjmp	.+72     	; 0x2d96 <GLCD_Reset+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	68 85       	ldd	r22, Y+8	; 0x08
    2d50:	79 85       	ldd	r23, Y+9	; 0x09
    2d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d56:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9f 83       	std	Y+7, r25	; 0x07
    2d60:	8e 83       	std	Y+6, r24	; 0x06
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	9f 81       	ldd	r25, Y+7	; 0x07
    2d66:	9b 83       	std	Y+3, r25	; 0x03
    2d68:	8a 83       	std	Y+2, r24	; 0x02
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <GLCD_Reset+0x172>
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <GLCD_Reset+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d78:	69 89       	ldd	r22, Y+17	; 0x11
    2d7a:	7a 89       	ldd	r23, Y+18	; 0x12
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	88 8b       	std	Y+16, r24	; 0x10
    2d8a:	88 89       	ldd	r24, Y+16	; 0x10
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	8a 95       	dec	r24
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <GLCD_Reset+0x194>
    2d94:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	66 e0       	ldi	r22, 0x06	; 6
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 98 11 	call	0x2330	; 0x2330 <DIO_WritePin>
}
    2da0:	68 96       	adiw	r28, 0x18	; 24
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <GLCD_DisplaySpecialPattern>:

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	29 97       	sbiw	r28, 0x09	; 9
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	2a 83       	std	Y+2, r18	; 0x02
    2dd8:	3b 83       	std	Y+3, r19	; 0x03
    2dda:	4c 83       	std	Y+4, r20	; 0x04
    2ddc:	5d 83       	std	Y+5, r21	; 0x05
    2dde:	6e 83       	std	Y+6, r22	; 0x06
    2de0:	7f 83       	std	Y+7, r23	; 0x07
    2de2:	88 87       	std	Y+8, r24	; 0x08
    2de4:	99 87       	std	Y+9, r25	; 0x09
	for(uint8 i = 0; i < 5; i++) {
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	47 c0       	rjmp	.+142    	; 0x2e78 <GLCD_DisplaySpecialPattern+0xc6>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    2dea:	80 91 e6 01 	lds	r24, 0x01E6
    2dee:	88 54       	subi	r24, 0x48	; 72
    2df0:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    2df4:	80 91 e7 01 	lds	r24, 0x01E7
    2df8:	80 5c       	subi	r24, 0xC0	; 192
    2dfa:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	fc 01       	movw	r30, r24
    2e12:	2a 81       	ldd	r18, Y+2	; 0x02
    2e14:	3b 81       	ldd	r19, Y+3	; 0x03
    2e16:	4c 81       	ldd	r20, Y+4	; 0x04
    2e18:	5d 81       	ldd	r21, Y+5	; 0x05
    2e1a:	6e 81       	ldd	r22, Y+6	; 0x06
    2e1c:	7f 81       	ldd	r23, Y+7	; 0x07
    2e1e:	88 85       	ldd	r24, Y+8	; 0x08
    2e20:	99 85       	ldd	r25, Y+9	; 0x09
    2e22:	0e 2f       	mov	r16, r30
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    2e28:	a2 2e       	mov	r10, r18
    2e2a:	b3 2e       	mov	r11, r19
    2e2c:	c4 2e       	mov	r12, r20
    2e2e:	d5 2e       	mov	r13, r21
    2e30:	e6 2e       	mov	r14, r22
    2e32:	f7 2e       	mov	r15, r23
    2e34:	08 2f       	mov	r16, r24
    2e36:	19 2f       	mov	r17, r25
    2e38:	2a 2d       	mov	r18, r10
    2e3a:	3b 2d       	mov	r19, r11
    2e3c:	4c 2d       	mov	r20, r12
    2e3e:	5d 2d       	mov	r21, r13
    2e40:	6e 2d       	mov	r22, r14
    2e42:	7f 2d       	mov	r23, r15
    2e44:	80 2f       	mov	r24, r16
    2e46:	91 2f       	mov	r25, r17
    2e48:	82 2f       	mov	r24, r18
    2e4a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <GLCD_SendData>
		gu8_Curr_Y_Address++;
    2e4e:	80 91 e7 01 	lds	r24, 0x01E7
    2e52:	8f 5f       	subi	r24, 0xFF	; 255
    2e54:	80 93 e7 01 	sts	0x01E7, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
    2e58:	80 91 e7 01 	lds	r24, 0x01E7
    2e5c:	80 34       	cpi	r24, 0x40	; 64
    2e5e:	48 f0       	brcs	.+18     	; 0x2e72 <GLCD_DisplaySpecialPattern+0xc0>
    2e60:	80 91 e8 01 	lds	r24, 0x01E8
    2e64:	88 23       	and	r24, r24
    2e66:	29 f4       	brne	.+10     	; 0x2e72 <GLCD_DisplaySpecialPattern+0xc0>
			GLCD_SelectPage(GLCD_PAGE_1);
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
    2e6e:	10 92 e7 01 	sts	0x01E7, r1
		_delay_us(10);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
	for(uint8 i = 0; i < 5; i++) {
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	8f 5f       	subi	r24, 0xFF	; 255
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	85 30       	cpi	r24, 0x05	; 5
    2e7c:	08 f4       	brcc	.+2      	; 0x2e80 <GLCD_DisplaySpecialPattern+0xce>
    2e7e:	b5 cf       	rjmp	.-150    	; 0x2dea <GLCD_DisplaySpecialPattern+0x38>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
    2e80:	29 96       	adiw	r28, 0x09	; 9
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	bf 90       	pop	r11
    2e9e:	af 90       	pop	r10
    2ea0:	08 95       	ret

00002ea2 <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <GLCD_DisplayCharacter+0x6>
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <GLCD_DisplayCharacter+0x8>
    2eaa:	0f 92       	push	r0
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	89 83       	std	Y+1, r24	; 0x01
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
    2eb2:	80 91 e8 01 	lds	r24, 0x01E8
    2eb6:	1d 82       	std	Y+5, r1	; 0x05
    2eb8:	88 23       	and	r24, r24
    2eba:	11 f4       	brne	.+4      	; 0x2ec0 <GLCD_DisplayCharacter+0x1e>
    2ebc:	21 e0       	ldi	r18, 0x01	; 1
    2ebe:	2d 83       	std	Y+5, r18	; 0x05
    2ec0:	80 91 e7 01 	lds	r24, 0x01E7
    2ec4:	1c 82       	std	Y+4, r1	; 0x04
    2ec6:	89 33       	cpi	r24, 0x39	; 57
    2ec8:	10 f4       	brcc	.+4      	; 0x2ece <GLCD_DisplayCharacter+0x2c>
    2eca:	31 e0       	ldi	r19, 0x01	; 1
    2ecc:	3c 83       	std	Y+4, r19	; 0x04
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	89 2b       	or	r24, r25
    2ed4:	88 23       	and	r24, r24
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <GLCD_DisplayCharacter+0x38>
    2ed8:	0d c3       	rjmp	.+1562   	; 0x34f4 <GLCD_DisplayCharacter+0x652>
		/* Enough space to write character */
		switch (Data) {
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	3b 83       	std	Y+3, r19	; 0x03
    2ee2:	2a 83       	std	Y+2, r18	; 0x02
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee8:	81 35       	cpi	r24, 0x51	; 81
    2eea:	91 05       	cpc	r25, r1
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <GLCD_DisplayCharacter+0x4e>
    2eee:	b0 c1       	rjmp	.+864    	; 0x3250 <GLCD_DisplayCharacter+0x3ae>
    2ef0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ef2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ef4:	22 35       	cpi	r18, 0x52	; 82
    2ef6:	31 05       	cpc	r19, r1
    2ef8:	0c f0       	brlt	.+2      	; 0x2efc <GLCD_DisplayCharacter+0x5a>
    2efa:	c8 c0       	rjmp	.+400    	; 0x308c <GLCD_DisplayCharacter+0x1ea>
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	89 33       	cpi	r24, 0x39	; 57
    2f02:	91 05       	cpc	r25, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <GLCD_DisplayCharacter+0x66>
    2f06:	cd c2       	rjmp	.+1434   	; 0x34a2 <GLCD_DisplayCharacter+0x600>
    2f08:	2a 81       	ldd	r18, Y+2	; 0x02
    2f0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f0c:	2a 33       	cpi	r18, 0x3A	; 58
    2f0e:	31 05       	cpc	r19, r1
    2f10:	0c f0       	brlt	.+2      	; 0x2f14 <GLCD_DisplayCharacter+0x72>
    2f12:	67 c0       	rjmp	.+206    	; 0x2fe2 <GLCD_DisplayCharacter+0x140>
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	9b 81       	ldd	r25, Y+3	; 0x03
    2f18:	83 33       	cpi	r24, 0x33	; 51
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <GLCD_DisplayCharacter+0x7e>
    2f1e:	7f c2       	rjmp	.+1278   	; 0x341e <GLCD_DisplayCharacter+0x57c>
    2f20:	2a 81       	ldd	r18, Y+2	; 0x02
    2f22:	3b 81       	ldd	r19, Y+3	; 0x03
    2f24:	24 33       	cpi	r18, 0x34	; 52
    2f26:	31 05       	cpc	r19, r1
    2f28:	bc f5       	brge	.+110    	; 0x2f98 <GLCD_DisplayCharacter+0xf6>
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	80 33       	cpi	r24, 0x30	; 48
    2f30:	91 05       	cpc	r25, r1
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <GLCD_DisplayCharacter+0x94>
    2f34:	53 c2       	rjmp	.+1190   	; 0x33dc <GLCD_DisplayCharacter+0x53a>
    2f36:	2a 81       	ldd	r18, Y+2	; 0x02
    2f38:	3b 81       	ldd	r19, Y+3	; 0x03
    2f3a:	21 33       	cpi	r18, 0x31	; 49
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	fc f4       	brge	.+62     	; 0x2f7e <GLCD_DisplayCharacter+0xdc>
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	9b 81       	ldd	r25, Y+3	; 0x03
    2f44:	85 32       	cpi	r24, 0x25	; 37
    2f46:	91 05       	cpc	r25, r1
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <GLCD_DisplayCharacter+0xaa>
    2f4a:	11 c2       	rjmp	.+1058   	; 0x336e <GLCD_DisplayCharacter+0x4cc>
    2f4c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f4e:	3b 81       	ldd	r19, Y+3	; 0x03
    2f50:	26 32       	cpi	r18, 0x26	; 38
    2f52:	31 05       	cpc	r19, r1
    2f54:	3c f4       	brge	.+14     	; 0x2f64 <GLCD_DisplayCharacter+0xc2>
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	80 32       	cpi	r24, 0x20	; 32
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <GLCD_DisplayCharacter+0xc0>
    2f60:	27 c2       	rjmp	.+1102   	; 0x33b0 <GLCD_DisplayCharacter+0x50e>
    2f62:	a9 c2       	rjmp	.+1362   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    2f64:	2a 81       	ldd	r18, Y+2	; 0x02
    2f66:	3b 81       	ldd	r19, Y+3	; 0x03
    2f68:	2d 32       	cpi	r18, 0x2D	; 45
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <GLCD_DisplayCharacter+0xce>
    2f6e:	2b c2       	rjmp	.+1110   	; 0x33c6 <GLCD_DisplayCharacter+0x524>
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	8e 32       	cpi	r24, 0x2E	; 46
    2f76:	91 05       	cpc	r25, r1
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <GLCD_DisplayCharacter+0xda>
    2f7a:	0f c2       	rjmp	.+1054   	; 0x339a <GLCD_DisplayCharacter+0x4f8>
    2f7c:	9c c2       	rjmp	.+1336   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    2f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f80:	3b 81       	ldd	r19, Y+3	; 0x03
    2f82:	21 33       	cpi	r18, 0x31	; 49
    2f84:	31 05       	cpc	r19, r1
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <GLCD_DisplayCharacter+0xe8>
    2f88:	34 c2       	rjmp	.+1128   	; 0x33f2 <GLCD_DisplayCharacter+0x550>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8e:	82 33       	cpi	r24, 0x32	; 50
    2f90:	91 05       	cpc	r25, r1
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <GLCD_DisplayCharacter+0xf4>
    2f94:	39 c2       	rjmp	.+1138   	; 0x3408 <GLCD_DisplayCharacter+0x566>
    2f96:	8f c2       	rjmp	.+1310   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    2f98:	2a 81       	ldd	r18, Y+2	; 0x02
    2f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f9c:	26 33       	cpi	r18, 0x36	; 54
    2f9e:	31 05       	cpc	r19, r1
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <GLCD_DisplayCharacter+0x102>
    2fa2:	5e c2       	rjmp	.+1212   	; 0x3460 <GLCD_DisplayCharacter+0x5be>
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	87 33       	cpi	r24, 0x37	; 55
    2faa:	91 05       	cpc	r25, r1
    2fac:	6c f4       	brge	.+26     	; 0x2fc8 <GLCD_DisplayCharacter+0x126>
    2fae:	2a 81       	ldd	r18, Y+2	; 0x02
    2fb0:	3b 81       	ldd	r19, Y+3	; 0x03
    2fb2:	24 33       	cpi	r18, 0x34	; 52
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <GLCD_DisplayCharacter+0x118>
    2fb8:	3d c2       	rjmp	.+1146   	; 0x3434 <GLCD_DisplayCharacter+0x592>
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	85 33       	cpi	r24, 0x35	; 53
    2fc0:	91 05       	cpc	r25, r1
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <GLCD_DisplayCharacter+0x124>
    2fc4:	42 c2       	rjmp	.+1156   	; 0x344a <GLCD_DisplayCharacter+0x5a8>
    2fc6:	77 c2       	rjmp	.+1262   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    2fc8:	2a 81       	ldd	r18, Y+2	; 0x02
    2fca:	3b 81       	ldd	r19, Y+3	; 0x03
    2fcc:	27 33       	cpi	r18, 0x37	; 55
    2fce:	31 05       	cpc	r19, r1
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <GLCD_DisplayCharacter+0x132>
    2fd2:	51 c2       	rjmp	.+1186   	; 0x3476 <GLCD_DisplayCharacter+0x5d4>
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	88 33       	cpi	r24, 0x38	; 56
    2fda:	91 05       	cpc	r25, r1
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <GLCD_DisplayCharacter+0x13e>
    2fde:	56 c2       	rjmp	.+1196   	; 0x348c <GLCD_DisplayCharacter+0x5ea>
    2fe0:	6a c2       	rjmp	.+1236   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    2fe2:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe4:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe6:	26 34       	cpi	r18, 0x46	; 70
    2fe8:	31 05       	cpc	r19, r1
    2fea:	09 f4       	brne	.+2      	; 0x2fee <GLCD_DisplayCharacter+0x14c>
    2fec:	10 c1       	rjmp	.+544    	; 0x320e <GLCD_DisplayCharacter+0x36c>
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff2:	87 34       	cpi	r24, 0x47	; 71
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	2c f5       	brge	.+74     	; 0x3042 <GLCD_DisplayCharacter+0x1a0>
    2ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    2ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    2ffc:	23 34       	cpi	r18, 0x43	; 67
    2ffe:	31 05       	cpc	r19, r1
    3000:	09 f4       	brne	.+2      	; 0x3004 <GLCD_DisplayCharacter+0x162>
    3002:	47 c1       	rjmp	.+654    	; 0x3292 <GLCD_DisplayCharacter+0x3f0>
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	84 34       	cpi	r24, 0x44	; 68
    300a:	91 05       	cpc	r25, r1
    300c:	6c f4       	brge	.+26     	; 0x3028 <GLCD_DisplayCharacter+0x186>
    300e:	2a 81       	ldd	r18, Y+2	; 0x02
    3010:	3b 81       	ldd	r19, Y+3	; 0x03
    3012:	2d 33       	cpi	r18, 0x3D	; 61
    3014:	31 05       	cpc	r19, r1
    3016:	09 f4       	brne	.+2      	; 0x301a <GLCD_DisplayCharacter+0x178>
    3018:	b5 c1       	rjmp	.+874    	; 0x3384 <GLCD_DisplayCharacter+0x4e2>
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	9b 81       	ldd	r25, Y+3	; 0x03
    301e:	81 34       	cpi	r24, 0x41	; 65
    3020:	91 05       	cpc	r25, r1
    3022:	09 f4       	brne	.+2      	; 0x3026 <GLCD_DisplayCharacter+0x184>
    3024:	e9 c0       	rjmp	.+466    	; 0x31f8 <GLCD_DisplayCharacter+0x356>
    3026:	47 c2       	rjmp	.+1166   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3028:	2a 81       	ldd	r18, Y+2	; 0x02
    302a:	3b 81       	ldd	r19, Y+3	; 0x03
    302c:	24 34       	cpi	r18, 0x44	; 68
    302e:	31 05       	cpc	r19, r1
    3030:	09 f4       	brne	.+2      	; 0x3034 <GLCD_DisplayCharacter+0x192>
    3032:	45 c1       	rjmp	.+650    	; 0x32be <GLCD_DisplayCharacter+0x41c>
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	9b 81       	ldd	r25, Y+3	; 0x03
    3038:	85 34       	cpi	r24, 0x45	; 69
    303a:	91 05       	cpc	r25, r1
    303c:	09 f4       	brne	.+2      	; 0x3040 <GLCD_DisplayCharacter+0x19e>
    303e:	fd c0       	rjmp	.+506    	; 0x323a <GLCD_DisplayCharacter+0x398>
    3040:	3a c2       	rjmp	.+1140   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3042:	2a 81       	ldd	r18, Y+2	; 0x02
    3044:	3b 81       	ldd	r19, Y+3	; 0x03
    3046:	2b 34       	cpi	r18, 0x4B	; 75
    3048:	31 05       	cpc	r19, r1
    304a:	09 f4       	brne	.+2      	; 0x304e <GLCD_DisplayCharacter+0x1ac>
    304c:	4e c1       	rjmp	.+668    	; 0x32ea <GLCD_DisplayCharacter+0x448>
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	9b 81       	ldd	r25, Y+3	; 0x03
    3052:	8c 34       	cpi	r24, 0x4C	; 76
    3054:	91 05       	cpc	r25, r1
    3056:	6c f4       	brge	.+26     	; 0x3072 <GLCD_DisplayCharacter+0x1d0>
    3058:	2a 81       	ldd	r18, Y+2	; 0x02
    305a:	3b 81       	ldd	r19, Y+3	; 0x03
    305c:	28 34       	cpi	r18, 0x48	; 72
    305e:	31 05       	cpc	r19, r1
    3060:	09 f4       	brne	.+2      	; 0x3064 <GLCD_DisplayCharacter+0x1c2>
    3062:	4e c1       	rjmp	.+668    	; 0x3300 <GLCD_DisplayCharacter+0x45e>
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	89 34       	cpi	r24, 0x49	; 73
    306a:	91 05       	cpc	r25, r1
    306c:	09 f4       	brne	.+2      	; 0x3070 <GLCD_DisplayCharacter+0x1ce>
    306e:	74 c1       	rjmp	.+744    	; 0x3358 <GLCD_DisplayCharacter+0x4b6>
    3070:	22 c2       	rjmp	.+1092   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3072:	2a 81       	ldd	r18, Y+2	; 0x02
    3074:	3b 81       	ldd	r19, Y+3	; 0x03
    3076:	2d 34       	cpi	r18, 0x4D	; 77
    3078:	31 05       	cpc	r19, r1
    307a:	09 f4       	brne	.+2      	; 0x307e <GLCD_DisplayCharacter+0x1dc>
    307c:	57 c1       	rjmp	.+686    	; 0x332c <GLCD_DisplayCharacter+0x48a>
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	8e 34       	cpi	r24, 0x4E	; 78
    3084:	91 05       	cpc	r25, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <GLCD_DisplayCharacter+0x1e8>
    3088:	f9 c0       	rjmp	.+498    	; 0x327c <GLCD_DisplayCharacter+0x3da>
    308a:	15 c2       	rjmp	.+1066   	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    308c:	2a 81       	ldd	r18, Y+2	; 0x02
    308e:	3b 81       	ldd	r19, Y+3	; 0x03
    3090:	28 36       	cpi	r18, 0x68	; 104
    3092:	31 05       	cpc	r19, r1
    3094:	09 f4       	brne	.+2      	; 0x3098 <GLCD_DisplayCharacter+0x1f6>
    3096:	34 c1       	rjmp	.+616    	; 0x3300 <GLCD_DisplayCharacter+0x45e>
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	9b 81       	ldd	r25, Y+3	; 0x03
    309c:	89 36       	cpi	r24, 0x69	; 105
    309e:	91 05       	cpc	r25, r1
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <GLCD_DisplayCharacter+0x202>
    30a2:	55 c0       	rjmp	.+170    	; 0x314e <GLCD_DisplayCharacter+0x2ac>
    30a4:	2a 81       	ldd	r18, Y+2	; 0x02
    30a6:	3b 81       	ldd	r19, Y+3	; 0x03
    30a8:	2a 35       	cpi	r18, 0x5A	; 90
    30aa:	31 05       	cpc	r19, r1
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <GLCD_DisplayCharacter+0x20e>
    30ae:	33 c1       	rjmp	.+614    	; 0x3316 <GLCD_DisplayCharacter+0x474>
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	8b 35       	cpi	r24, 0x5B	; 91
    30b6:	91 05       	cpc	r25, r1
    30b8:	2c f5       	brge	.+74     	; 0x3104 <GLCD_DisplayCharacter+0x262>
    30ba:	2a 81       	ldd	r18, Y+2	; 0x02
    30bc:	3b 81       	ldd	r19, Y+3	; 0x03
    30be:	24 35       	cpi	r18, 0x54	; 84
    30c0:	31 05       	cpc	r19, r1
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <GLCD_DisplayCharacter+0x224>
    30c4:	07 c1       	rjmp	.+526    	; 0x32d4 <GLCD_DisplayCharacter+0x432>
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	85 35       	cpi	r24, 0x55	; 85
    30cc:	91 05       	cpc	r25, r1
    30ce:	6c f4       	brge	.+26     	; 0x30ea <GLCD_DisplayCharacter+0x248>
    30d0:	2a 81       	ldd	r18, Y+2	; 0x02
    30d2:	3b 81       	ldd	r19, Y+3	; 0x03
    30d4:	22 35       	cpi	r18, 0x52	; 82
    30d6:	31 05       	cpc	r19, r1
    30d8:	09 f4       	brne	.+2      	; 0x30dc <GLCD_DisplayCharacter+0x23a>
    30da:	a4 c0       	rjmp	.+328    	; 0x3224 <GLCD_DisplayCharacter+0x382>
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	83 35       	cpi	r24, 0x53	; 83
    30e2:	91 05       	cpc	r25, r1
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <GLCD_DisplayCharacter+0x246>
    30e6:	2d c1       	rjmp	.+602    	; 0x3342 <GLCD_DisplayCharacter+0x4a0>
    30e8:	e6 c1       	rjmp	.+972    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    30ea:	2a 81       	ldd	r18, Y+2	; 0x02
    30ec:	3b 81       	ldd	r19, Y+3	; 0x03
    30ee:	25 35       	cpi	r18, 0x55	; 85
    30f0:	31 05       	cpc	r19, r1
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <GLCD_DisplayCharacter+0x254>
    30f4:	b8 c0       	rjmp	.+368    	; 0x3266 <GLCD_DisplayCharacter+0x3c4>
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	89 35       	cpi	r24, 0x59	; 89
    30fc:	91 05       	cpc	r25, r1
    30fe:	09 f4       	brne	.+2      	; 0x3102 <GLCD_DisplayCharacter+0x260>
    3100:	d3 c0       	rjmp	.+422    	; 0x32a8 <GLCD_DisplayCharacter+0x406>
    3102:	d9 c1       	rjmp	.+946    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3104:	2a 81       	ldd	r18, Y+2	; 0x02
    3106:	3b 81       	ldd	r19, Y+3	; 0x03
    3108:	24 36       	cpi	r18, 0x64	; 100
    310a:	31 05       	cpc	r19, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <GLCD_DisplayCharacter+0x26e>
    310e:	d7 c0       	rjmp	.+430    	; 0x32be <GLCD_DisplayCharacter+0x41c>
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	85 36       	cpi	r24, 0x65	; 101
    3116:	91 05       	cpc	r25, r1
    3118:	6c f4       	brge	.+26     	; 0x3134 <GLCD_DisplayCharacter+0x292>
    311a:	2a 81       	ldd	r18, Y+2	; 0x02
    311c:	3b 81       	ldd	r19, Y+3	; 0x03
    311e:	21 36       	cpi	r18, 0x61	; 97
    3120:	31 05       	cpc	r19, r1
    3122:	09 f4       	brne	.+2      	; 0x3126 <GLCD_DisplayCharacter+0x284>
    3124:	69 c0       	rjmp	.+210    	; 0x31f8 <GLCD_DisplayCharacter+0x356>
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	83 36       	cpi	r24, 0x63	; 99
    312c:	91 05       	cpc	r25, r1
    312e:	09 f4       	brne	.+2      	; 0x3132 <GLCD_DisplayCharacter+0x290>
    3130:	b0 c0       	rjmp	.+352    	; 0x3292 <GLCD_DisplayCharacter+0x3f0>
    3132:	c1 c1       	rjmp	.+898    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3134:	2a 81       	ldd	r18, Y+2	; 0x02
    3136:	3b 81       	ldd	r19, Y+3	; 0x03
    3138:	25 36       	cpi	r18, 0x65	; 101
    313a:	31 05       	cpc	r19, r1
    313c:	09 f4       	brne	.+2      	; 0x3140 <GLCD_DisplayCharacter+0x29e>
    313e:	7d c0       	rjmp	.+250    	; 0x323a <GLCD_DisplayCharacter+0x398>
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	86 36       	cpi	r24, 0x66	; 102
    3146:	91 05       	cpc	r25, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <GLCD_DisplayCharacter+0x2aa>
    314a:	61 c0       	rjmp	.+194    	; 0x320e <GLCD_DisplayCharacter+0x36c>
    314c:	b4 c1       	rjmp	.+872    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    314e:	2a 81       	ldd	r18, Y+2	; 0x02
    3150:	3b 81       	ldd	r19, Y+3	; 0x03
    3152:	22 37       	cpi	r18, 0x72	; 114
    3154:	31 05       	cpc	r19, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <GLCD_DisplayCharacter+0x2b8>
    3158:	65 c0       	rjmp	.+202    	; 0x3224 <GLCD_DisplayCharacter+0x382>
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	9b 81       	ldd	r25, Y+3	; 0x03
    315e:	83 37       	cpi	r24, 0x73	; 115
    3160:	91 05       	cpc	r25, r1
    3162:	2c f5       	brge	.+74     	; 0x31ae <GLCD_DisplayCharacter+0x30c>
    3164:	2a 81       	ldd	r18, Y+2	; 0x02
    3166:	3b 81       	ldd	r19, Y+3	; 0x03
    3168:	2d 36       	cpi	r18, 0x6D	; 109
    316a:	31 05       	cpc	r19, r1
    316c:	09 f4       	brne	.+2      	; 0x3170 <GLCD_DisplayCharacter+0x2ce>
    316e:	de c0       	rjmp	.+444    	; 0x332c <GLCD_DisplayCharacter+0x48a>
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	9b 81       	ldd	r25, Y+3	; 0x03
    3174:	8e 36       	cpi	r24, 0x6E	; 110
    3176:	91 05       	cpc	r25, r1
    3178:	6c f4       	brge	.+26     	; 0x3194 <GLCD_DisplayCharacter+0x2f2>
    317a:	2a 81       	ldd	r18, Y+2	; 0x02
    317c:	3b 81       	ldd	r19, Y+3	; 0x03
    317e:	29 36       	cpi	r18, 0x69	; 105
    3180:	31 05       	cpc	r19, r1
    3182:	09 f4       	brne	.+2      	; 0x3186 <GLCD_DisplayCharacter+0x2e4>
    3184:	e9 c0       	rjmp	.+466    	; 0x3358 <GLCD_DisplayCharacter+0x4b6>
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	8b 36       	cpi	r24, 0x6B	; 107
    318c:	91 05       	cpc	r25, r1
    318e:	09 f4       	brne	.+2      	; 0x3192 <GLCD_DisplayCharacter+0x2f0>
    3190:	ac c0       	rjmp	.+344    	; 0x32ea <GLCD_DisplayCharacter+0x448>
    3192:	91 c1       	rjmp	.+802    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    3194:	2a 81       	ldd	r18, Y+2	; 0x02
    3196:	3b 81       	ldd	r19, Y+3	; 0x03
    3198:	2e 36       	cpi	r18, 0x6E	; 110
    319a:	31 05       	cpc	r19, r1
    319c:	09 f4       	brne	.+2      	; 0x31a0 <GLCD_DisplayCharacter+0x2fe>
    319e:	6e c0       	rjmp	.+220    	; 0x327c <GLCD_DisplayCharacter+0x3da>
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	9b 81       	ldd	r25, Y+3	; 0x03
    31a4:	81 37       	cpi	r24, 0x71	; 113
    31a6:	91 05       	cpc	r25, r1
    31a8:	09 f4       	brne	.+2      	; 0x31ac <GLCD_DisplayCharacter+0x30a>
    31aa:	52 c0       	rjmp	.+164    	; 0x3250 <GLCD_DisplayCharacter+0x3ae>
    31ac:	84 c1       	rjmp	.+776    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    31ae:	2a 81       	ldd	r18, Y+2	; 0x02
    31b0:	3b 81       	ldd	r19, Y+3	; 0x03
    31b2:	25 37       	cpi	r18, 0x75	; 117
    31b4:	31 05       	cpc	r19, r1
    31b6:	09 f4       	brne	.+2      	; 0x31ba <GLCD_DisplayCharacter+0x318>
    31b8:	56 c0       	rjmp	.+172    	; 0x3266 <GLCD_DisplayCharacter+0x3c4>
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	9b 81       	ldd	r25, Y+3	; 0x03
    31be:	86 37       	cpi	r24, 0x76	; 118
    31c0:	91 05       	cpc	r25, r1
    31c2:	6c f4       	brge	.+26     	; 0x31de <GLCD_DisplayCharacter+0x33c>
    31c4:	2a 81       	ldd	r18, Y+2	; 0x02
    31c6:	3b 81       	ldd	r19, Y+3	; 0x03
    31c8:	23 37       	cpi	r18, 0x73	; 115
    31ca:	31 05       	cpc	r19, r1
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <GLCD_DisplayCharacter+0x32e>
    31ce:	b9 c0       	rjmp	.+370    	; 0x3342 <GLCD_DisplayCharacter+0x4a0>
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	84 37       	cpi	r24, 0x74	; 116
    31d6:	91 05       	cpc	r25, r1
    31d8:	09 f4       	brne	.+2      	; 0x31dc <GLCD_DisplayCharacter+0x33a>
    31da:	7c c0       	rjmp	.+248    	; 0x32d4 <GLCD_DisplayCharacter+0x432>
    31dc:	6c c1       	rjmp	.+728    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
    31de:	2a 81       	ldd	r18, Y+2	; 0x02
    31e0:	3b 81       	ldd	r19, Y+3	; 0x03
    31e2:	29 37       	cpi	r18, 0x79	; 121
    31e4:	31 05       	cpc	r19, r1
    31e6:	09 f4       	brne	.+2      	; 0x31ea <GLCD_DisplayCharacter+0x348>
    31e8:	5f c0       	rjmp	.+190    	; 0x32a8 <GLCD_DisplayCharacter+0x406>
    31ea:	8a 81       	ldd	r24, Y+2	; 0x02
    31ec:	9b 81       	ldd	r25, Y+3	; 0x03
    31ee:	8a 37       	cpi	r24, 0x7A	; 122
    31f0:	91 05       	cpc	r25, r1
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <GLCD_DisplayCharacter+0x354>
    31f4:	90 c0       	rjmp	.+288    	; 0x3316 <GLCD_DisplayCharacter+0x474>
    31f6:	5f c1       	rjmp	.+702    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
    31f8:	2c e7       	ldi	r18, 0x7C	; 124
    31fa:	32 e1       	ldi	r19, 0x12	; 18
    31fc:	41 e1       	ldi	r20, 0x11	; 17
    31fe:	52 e1       	ldi	r21, 0x12	; 18
    3200:	6c e7       	ldi	r22, 0x7C	; 124
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    320c:	54 c1       	rjmp	.+680    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
    320e:	2f e7       	ldi	r18, 0x7F	; 127
    3210:	39 e0       	ldi	r19, 0x09	; 9
    3212:	49 e0       	ldi	r20, 0x09	; 9
    3214:	59 e0       	ldi	r21, 0x09	; 9
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3222:	49 c1       	rjmp	.+658    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
    3224:	2f e7       	ldi	r18, 0x7F	; 127
    3226:	39 e0       	ldi	r19, 0x09	; 9
    3228:	49 e1       	ldi	r20, 0x19	; 25
    322a:	59 e2       	ldi	r21, 0x29	; 41
    322c:	6f e4       	ldi	r22, 0x4F	; 79
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3238:	3e c1       	rjmp	.+636    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
    323a:	2f e7       	ldi	r18, 0x7F	; 127
    323c:	39 e4       	ldi	r19, 0x49	; 73
    323e:	49 e4       	ldi	r20, 0x49	; 73
    3240:	59 e4       	ldi	r21, 0x49	; 73
    3242:	61 e4       	ldi	r22, 0x41	; 65
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    324e:	33 c1       	rjmp	.+614    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
    3250:	2e e1       	ldi	r18, 0x1E	; 30
    3252:	31 e2       	ldi	r19, 0x21	; 33
    3254:	41 e3       	ldi	r20, 0x31	; 49
    3256:	5e e3       	ldi	r21, 0x3E	; 62
    3258:	60 e4       	ldi	r22, 0x40	; 64
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3264:	28 c1       	rjmp	.+592    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
    3266:	2f e3       	ldi	r18, 0x3F	; 63
    3268:	30 e4       	ldi	r19, 0x40	; 64
    326a:	40 e4       	ldi	r20, 0x40	; 64
    326c:	50 e4       	ldi	r21, 0x40	; 64
    326e:	6f e3       	ldi	r22, 0x3F	; 63
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    327a:	1d c1       	rjmp	.+570    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
    327c:	2f e7       	ldi	r18, 0x7F	; 127
    327e:	32 e0       	ldi	r19, 0x02	; 2
    3280:	4c e1       	ldi	r20, 0x1C	; 28
    3282:	50 e2       	ldi	r21, 0x20	; 32
    3284:	6f e7       	ldi	r22, 0x7F	; 127
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3290:	12 c1       	rjmp	.+548    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
    3292:	2e e3       	ldi	r18, 0x3E	; 62
    3294:	31 e4       	ldi	r19, 0x41	; 65
    3296:	41 e4       	ldi	r20, 0x41	; 65
    3298:	51 e4       	ldi	r21, 0x41	; 65
    329a:	61 e4       	ldi	r22, 0x41	; 65
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    32a6:	07 c1       	rjmp	.+526    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
    32a8:	23 e0       	ldi	r18, 0x03	; 3
    32aa:	3c e0       	ldi	r19, 0x0C	; 12
    32ac:	40 e7       	ldi	r20, 0x70	; 112
    32ae:	5c e0       	ldi	r21, 0x0C	; 12
    32b0:	63 e0       	ldi	r22, 0x03	; 3
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    32bc:	fc c0       	rjmp	.+504    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
    32be:	2f e7       	ldi	r18, 0x7F	; 127
    32c0:	31 e4       	ldi	r19, 0x41	; 65
    32c2:	41 e4       	ldi	r20, 0x41	; 65
    32c4:	5e e3       	ldi	r21, 0x3E	; 62
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    32d2:	f1 c0       	rjmp	.+482    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
    32d4:	21 e0       	ldi	r18, 0x01	; 1
    32d6:	31 e0       	ldi	r19, 0x01	; 1
    32d8:	4f e7       	ldi	r20, 0x7F	; 127
    32da:	51 e0       	ldi	r21, 0x01	; 1
    32dc:	61 e0       	ldi	r22, 0x01	; 1
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    32e8:	e6 c0       	rjmp	.+460    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
    32ea:	2f e7       	ldi	r18, 0x7F	; 127
    32ec:	38 e0       	ldi	r19, 0x08	; 8
    32ee:	44 e1       	ldi	r20, 0x14	; 20
    32f0:	52 e2       	ldi	r21, 0x22	; 34
    32f2:	61 e4       	ldi	r22, 0x41	; 65
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    32fe:	db c0       	rjmp	.+438    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
    3300:	2f e7       	ldi	r18, 0x7F	; 127
    3302:	38 e0       	ldi	r19, 0x08	; 8
    3304:	48 e0       	ldi	r20, 0x08	; 8
    3306:	58 e0       	ldi	r21, 0x08	; 8
    3308:	6f e7       	ldi	r22, 0x7F	; 127
    330a:	70 e0       	ldi	r23, 0x00	; 0
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3314:	d0 c0       	rjmp	.+416    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
    3316:	21 e6       	ldi	r18, 0x61	; 97
    3318:	31 e5       	ldi	r19, 0x51	; 81
    331a:	49 e4       	ldi	r20, 0x49	; 73
    331c:	55 e4       	ldi	r21, 0x45	; 69
    331e:	63 e4       	ldi	r22, 0x43	; 67
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    332a:	c5 c0       	rjmp	.+394    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
    332c:	2f e7       	ldi	r18, 0x7F	; 127
    332e:	32 e0       	ldi	r19, 0x02	; 2
    3330:	4c e0       	ldi	r20, 0x0C	; 12
    3332:	52 e0       	ldi	r21, 0x02	; 2
    3334:	6f e7       	ldi	r22, 0x7F	; 127
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3340:	ba c0       	rjmp	.+372    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
    3342:	2f e4       	ldi	r18, 0x4F	; 79
    3344:	39 e4       	ldi	r19, 0x49	; 73
    3346:	49 e4       	ldi	r20, 0x49	; 73
    3348:	59 e4       	ldi	r21, 0x49	; 73
    334a:	69 ef       	ldi	r22, 0xF9	; 249
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3356:	af c0       	rjmp	.+350    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
    3358:	21 e4       	ldi	r18, 0x41	; 65
    335a:	31 e4       	ldi	r19, 0x41	; 65
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	51 e4       	ldi	r21, 0x41	; 65
    3360:	61 e4       	ldi	r22, 0x41	; 65
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    336c:	a4 c0       	rjmp	.+328    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
    336e:	23 ec       	ldi	r18, 0xC3	; 195
    3370:	33 e7       	ldi	r19, 0x73	; 115
    3372:	48 e1       	ldi	r20, 0x18	; 24
    3374:	5e ec       	ldi	r21, 0xCE	; 206
    3376:	63 ec       	ldi	r22, 0xC3	; 195
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3382:	99 c0       	rjmp	.+306    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
    3384:	24 e2       	ldi	r18, 0x24	; 36
    3386:	34 e2       	ldi	r19, 0x24	; 36
    3388:	44 e2       	ldi	r20, 0x24	; 36
    338a:	54 e2       	ldi	r21, 0x24	; 36
    338c:	64 e2       	ldi	r22, 0x24	; 36
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3398:	8e c0       	rjmp	.+284    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e7       	ldi	r19, 0x70	; 112
    339e:	40 e7       	ldi	r20, 0x70	; 112
    33a0:	50 e7       	ldi	r21, 0x70	; 112
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    33ae:	83 c0       	rjmp	.+262    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    33c4:	78 c0       	rjmp	.+240    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
    33c6:	28 e1       	ldi	r18, 0x18	; 24
    33c8:	38 e1       	ldi	r19, 0x18	; 24
    33ca:	48 e1       	ldi	r20, 0x18	; 24
    33cc:	58 e1       	ldi	r21, 0x18	; 24
    33ce:	68 e1       	ldi	r22, 0x18	; 24
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    33da:	6d c0       	rjmp	.+218    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
    33dc:	2e e3       	ldi	r18, 0x3E	; 62
    33de:	31 e5       	ldi	r19, 0x51	; 81
    33e0:	49 e4       	ldi	r20, 0x49	; 73
    33e2:	55 e4       	ldi	r21, 0x45	; 69
    33e4:	6e e3       	ldi	r22, 0x3E	; 62
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    33f0:	62 c0       	rjmp	.+196    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
    33f2:	24 e4       	ldi	r18, 0x44	; 68
    33f4:	32 e4       	ldi	r19, 0x42	; 66
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	50 e4       	ldi	r21, 0x40	; 64
    33fa:	60 e4       	ldi	r22, 0x40	; 64
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3406:	57 c0       	rjmp	.+174    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
    3408:	26 e4       	ldi	r18, 0x46	; 70
    340a:	31 e6       	ldi	r19, 0x61	; 97
    340c:	41 e5       	ldi	r20, 0x51	; 81
    340e:	5e e4       	ldi	r21, 0x4E	; 78
    3410:	60 e4       	ldi	r22, 0x40	; 64
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    341c:	4c c0       	rjmp	.+152    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
    341e:	21 e4       	ldi	r18, 0x41	; 65
    3420:	39 e4       	ldi	r19, 0x49	; 73
    3422:	49 e4       	ldi	r20, 0x49	; 73
    3424:	59 e4       	ldi	r21, 0x49	; 73
    3426:	66 e3       	ldi	r22, 0x36	; 54
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3432:	41 c0       	rjmp	.+130    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
    3434:	28 e1       	ldi	r18, 0x18	; 24
    3436:	34 e1       	ldi	r19, 0x14	; 20
    3438:	42 e1       	ldi	r20, 0x12	; 18
    343a:	5f e7       	ldi	r21, 0x7F	; 127
    343c:	60 e1       	ldi	r22, 0x10	; 16
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3448:	36 c0       	rjmp	.+108    	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
    344a:	2f e4       	ldi	r18, 0x4F	; 79
    344c:	39 e4       	ldi	r19, 0x49	; 73
    344e:	49 e4       	ldi	r20, 0x49	; 73
    3450:	51 e5       	ldi	r21, 0x51	; 81
    3452:	61 e2       	ldi	r22, 0x21	; 33
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    345e:	2b c0       	rjmp	.+86     	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
    3460:	2c e7       	ldi	r18, 0x7C	; 124
    3462:	3a e4       	ldi	r19, 0x4A	; 74
    3464:	49 e4       	ldi	r20, 0x49	; 73
    3466:	59 e4       	ldi	r21, 0x49	; 73
    3468:	61 e3       	ldi	r22, 0x31	; 49
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3474:	20 c0       	rjmp	.+64     	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
    3476:	21 e0       	ldi	r18, 0x01	; 1
    3478:	39 e4       	ldi	r19, 0x49	; 73
    347a:	49 e2       	ldi	r20, 0x29	; 41
    347c:	59 e1       	ldi	r21, 0x19	; 25
    347e:	6f e0       	ldi	r22, 0x0F	; 15
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    348a:	15 c0       	rjmp	.+42     	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
    348c:	27 e7       	ldi	r18, 0x77	; 119
    348e:	39 e4       	ldi	r19, 0x49	; 73
    3490:	49 e4       	ldi	r20, 0x49	; 73
    3492:	59 e4       	ldi	r21, 0x49	; 73
    3494:	67 e7       	ldi	r22, 0x77	; 119
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    34a0:	0a c0       	rjmp	.+20     	; 0x34b6 <GLCD_DisplayCharacter+0x614>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
    34a2:	2f e4       	ldi	r18, 0x4F	; 79
    34a4:	39 e4       	ldi	r19, 0x49	; 73
    34a6:	49 e4       	ldi	r20, 0x49	; 73
    34a8:	59 e4       	ldi	r21, 0x49	; 73
    34aa:	6f e7       	ldi	r22, 0x7F	; 127
    34ac:	70 e0       	ldi	r23, 0x00	; 0
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    34b6:	80 91 e6 01 	lds	r24, 0x01E6
    34ba:	88 54       	subi	r24, 0x48	; 72
    34bc:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    34c0:	80 91 e7 01 	lds	r24, 0x01E7
    34c4:	80 5c       	subi	r24, 0xC0	; 192
    34c6:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
		GLCD_SendData(0);
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	0e 94 14 15 	call	0x2a28	; 0x2a28 <GLCD_SendData>
		gu8_Curr_Y_Address++;
    34d0:	80 91 e7 01 	lds	r24, 0x01E7
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	80 93 e7 01 	sts	0x01E7, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
    34da:	80 91 e7 01 	lds	r24, 0x01E7
    34de:	80 34       	cpi	r24, 0x40	; 64
    34e0:	48 f0       	brcs	.+18     	; 0x34f4 <GLCD_DisplayCharacter+0x652>
    34e2:	80 91 e8 01 	lds	r24, 0x01E8
    34e6:	88 23       	and	r24, r24
    34e8:	29 f4       	brne	.+10     	; 0x34f4 <GLCD_DisplayCharacter+0x652>
			GLCD_SelectPage(GLCD_PAGE_1);
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
    34f0:	10 92 e7 01 	sts	0x01E7, r1
		}
	}
}
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <GLCD_DisplayString>:

void GLCD_DisplayString(char* Data_Ptr) {
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <GLCD_DisplayString+0x6>
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 83       	std	Y+1, r24	; 0x01
    3512:	0a c0       	rjmp	.+20     	; 0x3528 <GLCD_DisplayString+0x24>
	while (*Data_Ptr != '\0') {	
		GLCD_DisplayCharacter(*Data_Ptr);
    3514:	e9 81       	ldd	r30, Y+1	; 0x01
    3516:	fa 81       	ldd	r31, Y+2	; 0x02
    3518:	80 81       	ld	r24, Z
    351a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <GLCD_DisplayCharacter>
		Data_Ptr++;
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	9a 81       	ldd	r25, Y+2	; 0x02
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	89 83       	std	Y+1, r24	; 0x01
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {	
    3528:	e9 81       	ldd	r30, Y+1	; 0x01
    352a:	fa 81       	ldd	r31, Y+2	; 0x02
    352c:	80 81       	ld	r24, Z
    352e:	88 23       	and	r24, r24
    3530:	89 f7       	brne	.-30     	; 0x3514 <GLCD_DisplayString+0x10>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	08 95       	ret

0000353c <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32 Data) {
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	2c 97       	sbiw	r28, 0x0c	; 12
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	69 87       	std	Y+9, r22	; 0x09
    3552:	7a 87       	std	Y+10, r23	; 0x0a
    3554:	8b 87       	std	Y+11, r24	; 0x0b
    3556:	9c 87       	std	Y+12, r25	; 0x0c
	if (Data < 0) {
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	ab 85       	ldd	r26, Y+11	; 0x0b
    355e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3560:	bb 23       	and	r27, r27
    3562:	94 f4       	brge	.+36     	; 0x3588 <GLCD_DisplayInteger+0x4c>
		GLCD_DisplayCharacter('-');
    3564:	8d e2       	ldi	r24, 0x2D	; 45
    3566:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <GLCD_DisplayCharacter>
		Data = -1 * Data;
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3570:	bc 85       	ldd	r27, Y+12	; 0x0c
    3572:	b0 95       	com	r27
    3574:	a0 95       	com	r26
    3576:	90 95       	com	r25
    3578:	81 95       	neg	r24
    357a:	9f 4f       	sbci	r25, 0xFF	; 255
    357c:	af 4f       	sbci	r26, 0xFF	; 255
    357e:	bf 4f       	sbci	r27, 0xFF	; 255
    3580:	89 87       	std	Y+9, r24	; 0x09
    3582:	9a 87       	std	Y+10, r25	; 0x0a
    3584:	ab 87       	std	Y+11, r26	; 0x0b
    3586:	bc 87       	std	Y+12, r27	; 0x0c
	}
	uint8 u8Local_Digit = 0U;
    3588:	1b 82       	std	Y+3, r1	; 0x03
	char str_reversed[5] = "";
    358a:	1c 82       	std	Y+4, r1	; 0x04
    358c:	1d 82       	std	Y+5, r1	; 0x05
    358e:	1e 82       	std	Y+6, r1	; 0x06
    3590:	1f 82       	std	Y+7, r1	; 0x07
    3592:	18 86       	std	Y+8, r1	; 0x08
	char* str_ptr = str_reversed;
    3594:	ce 01       	movw	r24, r28
    3596:	04 96       	adiw	r24, 0x04	; 4
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01
	do {
		u8Local_Digit = Data%10;
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    35a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    35a4:	2a e0       	ldi	r18, 0x0A	; 10
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__divmodsi4>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	8b 83       	std	Y+3, r24	; 0x03
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	80 5d       	subi	r24, 0xD0	; 208
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	80 83       	st	Z, r24
		Data = Data/10;
    35c4:	89 85       	ldd	r24, Y+9	; 0x09
    35c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    35ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    35cc:	2a e0       	ldi	r18, 0x0A	; 10
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__divmodsi4>
    35dc:	da 01       	movw	r26, r20
    35de:	c9 01       	movw	r24, r18
    35e0:	89 87       	std	Y+9, r24	; 0x09
    35e2:	9a 87       	std	Y+10, r25	; 0x0a
    35e4:	ab 87       	std	Y+11, r26	; 0x0b
    35e6:	bc 87       	std	Y+12, r27	; 0x0c
		str_ptr++;
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	01 96       	adiw	r24, 0x01	; 1
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
	} while (Data > 0);
    35f2:	89 85       	ldd	r24, Y+9	; 0x09
    35f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    35f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    35fa:	18 16       	cp	r1, r24
    35fc:	19 06       	cpc	r1, r25
    35fe:	1a 06       	cpc	r1, r26
    3600:	1b 06       	cpc	r1, r27
    3602:	64 f2       	brlt	.-104    	; 0x359c <GLCD_DisplayInteger+0x60>
	do {
		str_ptr--;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
		GLCD_DisplayCharacter(*str_ptr);
    360e:	e9 81       	ldd	r30, Y+1	; 0x01
    3610:	fa 81       	ldd	r31, Y+2	; 0x02
    3612:	80 81       	ld	r24, Z
    3614:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
    3618:	9e 01       	movw	r18, r28
    361a:	2c 5f       	subi	r18, 0xFC	; 252
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	82 17       	cp	r24, r18
    3624:	93 07       	cpc	r25, r19
    3626:	71 f7       	brne	.-36     	; 0x3604 <GLCD_DisplayInteger+0xc8>
}
    3628:	2c 96       	adiw	r28, 0x0c	; 12
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(float32 Data) {
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	2c 97       	sbiw	r28, 0x0c	; 12
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
    3656:	69 87       	std	Y+9, r22	; 0x09
    3658:	7a 87       	std	Y+10, r23	; 0x0a
    365a:	8b 87       	std	Y+11, r24	; 0x0b
    365c:	9c 87       	std	Y+12, r25	; 0x0c
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
    365e:	69 85       	ldd	r22, Y+9	; 0x09
    3660:	7a 85       	ldd	r23, Y+10	; 0x0a
    3662:	8b 85       	ldd	r24, Y+11	; 0x0b
    3664:	9c 85       	ldd	r25, Y+12	; 0x0c
    3666:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	98 87       	std	Y+8, r25	; 0x08
    3670:	8f 83       	std	Y+7, r24	; 0x07
	GLCD_DisplayInteger(IntegerPart);
    3672:	8f 81       	ldd	r24, Y+7	; 0x07
    3674:	98 85       	ldd	r25, Y+8	; 0x08
    3676:	cc 01       	movw	r24, r24
    3678:	a0 e0       	ldi	r26, 0x00	; 0
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 9e 1a 	call	0x353c	; 0x353c <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
    3684:	8e e2       	ldi	r24, 0x2E	; 46
    3686:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <GLCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
    368a:	8f 81       	ldd	r24, Y+7	; 0x07
    368c:	98 85       	ldd	r25, Y+8	; 0x08
    368e:	cc 01       	movw	r24, r24
    3690:	a0 e0       	ldi	r26, 0x00	; 0
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 86 05 	call	0xb0c	; 0xb0c <__floatunsisf>
    369c:	9b 01       	movw	r18, r22
    369e:	ac 01       	movw	r20, r24
    36a0:	69 85       	ldd	r22, Y+9	; 0x09
    36a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    36a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    36a8:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	8b 83       	std	Y+3, r24	; 0x03
    36b2:	9c 83       	std	Y+4, r25	; 0x04
    36b4:	ad 83       	std	Y+5, r26	; 0x05
    36b6:	be 83       	std	Y+6, r27	; 0x06
	uint8 Digit = 0;
    36b8:	1a 82       	std	Y+2, r1	; 0x02
	for (uint8 i = 0; i < 3; i++) {
    36ba:	19 82       	std	Y+1, r1	; 0x01
    36bc:	3f c0       	rjmp	.+126    	; 0x373c <GLCD_DisplayFloatingPoint+0x102>
		Digit = (uint8)(DecimalPart * 10.0);
    36be:	6b 81       	ldd	r22, Y+3	; 0x03
    36c0:	7c 81       	ldd	r23, Y+4	; 0x04
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8a 83       	std	Y+2, r24	; 0x02
		GLCD_DisplayCharacter((char)(48+Digit));
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	80 5d       	subi	r24, 0xD0	; 208
    36e8:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
    36ec:	6b 81       	ldd	r22, Y+3	; 0x03
    36ee:	7c 81       	ldd	r23, Y+4	; 0x04
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	9e 81       	ldd	r25, Y+6	; 0x06
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e2       	ldi	r20, 0x20	; 32
    36fa:	51 e4       	ldi	r21, 0x41	; 65
    36fc:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	7c 01       	movw	r14, r24
    3706:	8d 01       	movw	r16, r26
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	aa 27       	eor	r26, r26
    3710:	97 fd       	sbrc	r25, 7
    3712:	a0 95       	com	r26
    3714:	ba 2f       	mov	r27, r26
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__floatsisf>
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    3722:	c8 01       	movw	r24, r16
    3724:	b7 01       	movw	r22, r14
    3726:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	8b 83       	std	Y+3, r24	; 0x03
    3730:	9c 83       	std	Y+4, r25	; 0x04
    3732:	ad 83       	std	Y+5, r26	; 0x05
    3734:	be 83       	std	Y+6, r27	; 0x06
	uint16 IntegerPart = (uint16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	8f 5f       	subi	r24, 0xFF	; 255
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	83 30       	cpi	r24, 0x03	; 3
    3740:	08 f4       	brcc	.+2      	; 0x3744 <GLCD_DisplayFloatingPoint+0x10a>
    3742:	bd cf       	rjmp	.-134    	; 0x36be <GLCD_DisplayFloatingPoint+0x84>
		Digit = (uint8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
    3744:	2c 96       	adiw	r28, 0x0c	; 12
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	08 95       	ret

0000375e <GLCD_GoToLine>:

void GLCD_GoToLine(uint8 Line) {
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	0f 92       	push	r0
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	89 83       	std	Y+1, r24	; 0x01
	if (Line < GLCD_MAX_LINES) {
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	88 30       	cpi	r24, 0x08	; 8
    376e:	90 f4       	brcc	.+36     	; 0x3794 <GLCD_GoToLine+0x36>
		GLCD_SelectPage(GLCD_PAGE_0);
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	80 93 e6 01 	sts	0x01E6, r24
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    377c:	80 91 e6 01 	lds	r24, 0x01E6
    3780:	88 54       	subi	r24, 0x48	; 72
    3782:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
    3786:	10 92 e7 01 	sts	0x01E7, r1
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    378a:	80 91 e7 01 	lds	r24, 0x01E7
    378e:	80 5c       	subi	r24, 0xC0	; 192
    3790:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
	}
}
    3794:	0f 90       	pop	r0
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <GLCD_ClearDisplay+0x6>
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    37a6:	1a 82       	std	Y+2, r1	; 0x02
    37a8:	18 c0       	rjmp	.+48     	; 0x37da <GLCD_ClearDisplay+0x3e>
		GLCD_GoToLine(Line);
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    37b6:	19 82       	std	Y+1, r1	; 0x01
    37b8:	0a c0       	rjmp	.+20     	; 0x37ce <GLCD_ClearDisplay+0x32>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	80 5c       	subi	r24, 0xC0	; 192
    37be:	0e 94 2a 14 	call	0x2854	; 0x2854 <GLCD_SendInstruction>
			GLCD_SendData(0);
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	8f 5f       	subi	r24, 0xFF	; 255
    37cc:	89 83       	std	Y+1, r24	; 0x01
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	80 34       	cpi	r24, 0x40	; 64
    37d2:	98 f3       	brcs	.-26     	; 0x37ba <GLCD_ClearDisplay+0x1e>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	88 30       	cpi	r24, 0x08	; 8
    37de:	28 f3       	brcs	.-54     	; 0x37aa <GLCD_ClearDisplay+0xe>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
    37e0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    37ea:	10 92 e8 01 	sts	0x01E8, r1
	GLCD_GoToLine(0);
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
}
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <PWMDrawer_Init>:
	{0x01, 0x11, 0x09, 0x1D, 0x09, 0x11, 0x00, 0x00},
	{0x10, 0x11, 0x12, 0x17, 0x12, 0x11, 0x00, 0x00},
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
	#if GENERATE_PWM_FROM_SAME_MCU == 1
		GLCD_Init();
    3806:	0e 94 8a 13 	call	0x2714	; 0x2714 <GLCD_Init>
		GLCD_ClearDisplay();
    380a:	0e 94 ce 1b 	call	0x379c	; 0x379c <GLCD_ClearDisplay>
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
    380e:	8f ec       	ldi	r24, 0xCF	; 207
    3810:	91 e0       	ldi	r25, 0x01	; 1
    3812:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <PWM_Init>
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
    3816:	88 ed       	ldi	r24, 0xD8	; 216
    3818:	91 e0       	ldi	r25, 0x01	; 1
    381a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <ICU_Init>
    #elif GLCD_MCU == 1
		GLCD_Init();
		GLCD_ClearDisplay();
		ICU_Init(&gStrICU_Config);		/* Timer 1 is used for Input Capture */
#endif
}
    381e:	cf 91       	pop	r28
    3820:	df 91       	pop	r29
    3822:	08 95       	ret

00003824 <PWMDrawer_MeasureSignal>:

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	2f 97       	sbiw	r28, 0x0f	; 15
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	9a 87       	std	Y+10, r25	; 0x0a
    383a:	89 87       	std	Y+9, r24	; 0x09
	ICU_DutyCycleType strLocal_Duty = {0, 0};
    383c:	ce 01       	movw	r24, r28
    383e:	01 96       	adiw	r24, 0x01	; 1
    3840:	9c 87       	std	Y+12, r25	; 0x0c
    3842:	8b 87       	std	Y+11, r24	; 0x0b
    3844:	ec ed       	ldi	r30, 0xDC	; 220
    3846:	f1 e0       	ldi	r31, 0x01	; 1
    3848:	fe 87       	std	Y+14, r31	; 0x0e
    384a:	ed 87       	std	Y+13, r30	; 0x0d
    384c:	f8 e0       	ldi	r31, 0x08	; 8
    384e:	ff 87       	std	Y+15, r31	; 0x0f
    3850:	ed 85       	ldd	r30, Y+13	; 0x0d
    3852:	fe 85       	ldd	r31, Y+14	; 0x0e
    3854:	00 80       	ld	r0, Z
    3856:	8d 85       	ldd	r24, Y+13	; 0x0d
    3858:	9e 85       	ldd	r25, Y+14	; 0x0e
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	9e 87       	std	Y+14, r25	; 0x0e
    385e:	8d 87       	std	Y+13, r24	; 0x0d
    3860:	eb 85       	ldd	r30, Y+11	; 0x0b
    3862:	fc 85       	ldd	r31, Y+12	; 0x0c
    3864:	00 82       	st	Z, r0
    3866:	8b 85       	ldd	r24, Y+11	; 0x0b
    3868:	9c 85       	ldd	r25, Y+12	; 0x0c
    386a:	01 96       	adiw	r24, 0x01	; 1
    386c:	9c 87       	std	Y+12, r25	; 0x0c
    386e:	8b 87       	std	Y+11, r24	; 0x0b
    3870:	9f 85       	ldd	r25, Y+15	; 0x0f
    3872:	91 50       	subi	r25, 0x01	; 1
    3874:	9f 87       	std	Y+15, r25	; 0x0f
    3876:	ef 85       	ldd	r30, Y+15	; 0x0f
    3878:	ee 23       	and	r30, r30
    387a:	51 f7       	brne	.-44     	; 0x3850 <PWMDrawer_MeasureSignal+0x2c>
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
    387c:	80 e0       	ldi	r24, 0x00	; 0
    387e:	68 e0       	ldi	r22, 0x08	; 8
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	9e 01       	movw	r18, r28
    3884:	2f 5f       	subi	r18, 0xFF	; 255
    3886:	3f 4f       	sbci	r19, 0xFF	; 255
    3888:	a9 01       	movw	r20, r18
    388a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
    388e:	8d 81       	ldd	r24, Y+5	; 0x05
    3890:	9e 81       	ldd	r25, Y+6	; 0x06
    3892:	af 81       	ldd	r26, Y+7	; 0x07
    3894:	b8 85       	ldd	r27, Y+8	; 0x08
    3896:	e9 85       	ldd	r30, Y+9	; 0x09
    3898:	fa 85       	ldd	r31, Y+10	; 0x0a
    389a:	81 87       	std	Z+9, r24	; 0x09
    389c:	92 87       	std	Z+10, r25	; 0x0a
    389e:	a3 87       	std	Z+11, r26	; 0x0b
    38a0:	b4 87       	std	Z+12, r27	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	9a 81       	ldd	r25, Y+2	; 0x02
    38a6:	ab 81       	ldd	r26, Y+3	; 0x03
    38a8:	bc 81       	ldd	r27, Y+4	; 0x04
    38aa:	e9 85       	ldd	r30, Y+9	; 0x09
    38ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    38ae:	81 83       	std	Z+1, r24	; 0x01
    38b0:	92 83       	std	Z+2, r25	; 0x02
    38b2:	a3 83       	std	Z+3, r26	; 0x03
    38b4:	b4 83       	std	Z+4, r27	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
    38b6:	8d 81       	ldd	r24, Y+5	; 0x05
    38b8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ba:	af 81       	ldd	r26, Y+7	; 0x07
    38bc:	b8 85       	ldd	r27, Y+8	; 0x08
    38be:	29 81       	ldd	r18, Y+1	; 0x01
    38c0:	3a 81       	ldd	r19, Y+2	; 0x02
    38c2:	4b 81       	ldd	r20, Y+3	; 0x03
    38c4:	5c 81       	ldd	r21, Y+4	; 0x04
    38c6:	bc 01       	movw	r22, r24
    38c8:	cd 01       	movw	r24, r26
    38ca:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	e9 85       	ldd	r30, Y+9	; 0x09
    38d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    38d6:	85 83       	std	Z+5, r24	; 0x05
    38d8:	96 83       	std	Z+6, r25	; 0x06
    38da:	a7 83       	std	Z+7, r26	; 0x07
    38dc:	b0 87       	std	Z+8, r27	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
    38de:	e9 85       	ldd	r30, Y+9	; 0x09
    38e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    38e2:	21 85       	ldd	r18, Z+9	; 0x09
    38e4:	32 85       	ldd	r19, Z+10	; 0x0a
    38e6:	43 85       	ldd	r20, Z+11	; 0x0b
    38e8:	54 85       	ldd	r21, Z+12	; 0x0c
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	80 e8       	ldi	r24, 0x80	; 128
    38f0:	9f e3       	ldi	r25, 0x3F	; 63
    38f2:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	e9 85       	ldd	r30, Y+9	; 0x09
    38fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    38fe:	85 87       	std	Z+13, r24	; 0x0d
    3900:	96 87       	std	Z+14, r25	; 0x0e
    3902:	a7 87       	std	Z+15, r26	; 0x0f
    3904:	b0 8b       	std	Z+16, r27	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
    3906:	e9 85       	ldd	r30, Y+9	; 0x09
    3908:	fa 85       	ldd	r31, Y+10	; 0x0a
    390a:	81 81       	ldd	r24, Z+1	; 0x01
    390c:	92 81       	ldd	r25, Z+2	; 0x02
    390e:	a3 81       	ldd	r26, Z+3	; 0x03
    3910:	b4 81       	ldd	r27, Z+4	; 0x04
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	48 ec       	ldi	r20, 0xC8	; 200
    391c:	52 e4       	ldi	r21, 0x42	; 66
    391e:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	e9 85       	ldd	r30, Y+9	; 0x09
    3928:	fa 85       	ldd	r31, Y+10	; 0x0a
    392a:	21 85       	ldd	r18, Z+9	; 0x09
    392c:	32 85       	ldd	r19, Z+10	; 0x0a
    392e:	43 85       	ldd	r20, Z+11	; 0x0b
    3930:	54 85       	ldd	r21, Z+12	; 0x0c
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	bc 01       	movw	r22, r24
    3940:	cd 01       	movw	r24, r26
    3942:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	e9 85       	ldd	r30, Y+9	; 0x09
    394c:	fa 85       	ldd	r31, Y+10	; 0x0a
    394e:	80 83       	st	Z, r24
}
    3950:	2f 96       	adiw	r28, 0x0f	; 15
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, float32 Scale_ms) {
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	ca 54       	subi	r28, 0x4A	; 74
    396c:	d0 40       	sbci	r29, 0x00	; 0
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	9a ab       	std	Y+50, r25	; 0x32
    397a:	89 ab       	std	Y+49, r24	; 0x31
    397c:	4b ab       	std	Y+51, r20	; 0x33
    397e:	5c ab       	std	Y+52, r21	; 0x34
    3980:	6d ab       	std	Y+53, r22	; 0x35
    3982:	7e ab       	std	Y+54, r23	; 0x36
	GLCD_ClearDisplay();
    3984:	0e 94 ce 1b 	call	0x379c	; 0x379c <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
	char txt1[8] = "F=\0";
    398e:	80 91 60 00 	lds	r24, 0x0060
    3992:	90 91 61 00 	lds	r25, 0x0061
    3996:	a0 91 62 00 	lds	r26, 0x0062
    399a:	b0 91 63 00 	lds	r27, 0x0063
    399e:	8b 83       	std	Y+3, r24	; 0x03
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	ad 83       	std	Y+5, r26	; 0x05
    39a4:	be 83       	std	Y+6, r27	; 0x06
    39a6:	1f 82       	std	Y+7, r1	; 0x07
    39a8:	18 86       	std	Y+8, r1	; 0x08
    39aa:	19 86       	std	Y+9, r1	; 0x09
    39ac:	1a 86       	std	Y+10, r1	; 0x0a
	GLCD_DisplayString(txt1);
    39ae:	ce 01       	movw	r24, r28
    39b0:	03 96       	adiw	r24, 0x03	; 3
    39b2:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
    39b6:	e9 a9       	ldd	r30, Y+49	; 0x31
    39b8:	fa a9       	ldd	r31, Y+50	; 0x32
    39ba:	85 85       	ldd	r24, Z+13	; 0x0d
    39bc:	96 85       	ldd	r25, Z+14	; 0x0e
    39be:	a7 85       	ldd	r26, Z+15	; 0x0f
    39c0:	b0 89       	ldd	r27, Z+16	; 0x10
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	0e 94 1d 1b 	call	0x363a	; 0x363a <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
    39ca:	ce 01       	movw	r24, r28
    39cc:	0b 96       	adiw	r24, 0x0b	; 11
    39ce:	98 af       	std	Y+56, r25	; 0x38
    39d0:	8f ab       	std	Y+55, r24	; 0x37
    39d2:	a8 e6       	ldi	r26, 0x68	; 104
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	ba af       	std	Y+58, r27	; 0x3a
    39d8:	a9 af       	std	Y+57, r26	; 0x39
    39da:	b5 e0       	ldi	r27, 0x05	; 5
    39dc:	bb af       	std	Y+59, r27	; 0x3b
    39de:	e9 ad       	ldd	r30, Y+57	; 0x39
    39e0:	fa ad       	ldd	r31, Y+58	; 0x3a
    39e2:	00 80       	ld	r0, Z
    39e4:	89 ad       	ldd	r24, Y+57	; 0x39
    39e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    39e8:	01 96       	adiw	r24, 0x01	; 1
    39ea:	9a af       	std	Y+58, r25	; 0x3a
    39ec:	89 af       	std	Y+57, r24	; 0x39
    39ee:	af a9       	ldd	r26, Y+55	; 0x37
    39f0:	b8 ad       	ldd	r27, Y+56	; 0x38
    39f2:	0c 92       	st	X, r0
    39f4:	ef a9       	ldd	r30, Y+55	; 0x37
    39f6:	f8 ad       	ldd	r31, Y+56	; 0x38
    39f8:	31 96       	adiw	r30, 0x01	; 1
    39fa:	f8 af       	std	Y+56, r31	; 0x38
    39fc:	ef ab       	std	Y+55, r30	; 0x37
    39fe:	fb ad       	ldd	r31, Y+59	; 0x3b
    3a00:	f1 50       	subi	r31, 0x01	; 1
    3a02:	fb af       	std	Y+59, r31	; 0x3b
    3a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a06:	88 23       	and	r24, r24
    3a08:	51 f7       	brne	.-44     	; 0x39de <PWMDrawer_DrawSignal+0x7c>
	GLCD_DisplayString(txt2);
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	0b 96       	adiw	r24, 0x0b	; 11
    3a0e:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>

	//GLCD_GoToLine(0);
	char txt3[8] = "  D=\0";
    3a12:	de 01       	movw	r26, r28
    3a14:	50 96       	adiw	r26, 0x10	; 16
    3a16:	bd af       	std	Y+61, r27	; 0x3d
    3a18:	ac af       	std	Y+60, r26	; 0x3c
    3a1a:	ee e6       	ldi	r30, 0x6E	; 110
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	ff af       	std	Y+63, r31	; 0x3f
    3a20:	ee af       	std	Y+62, r30	; 0x3e
    3a22:	f6 e0       	ldi	r31, 0x06	; 6
    3a24:	21 96       	adiw	r28, 0x01	; 1
    3a26:	ff af       	std	Y+63, r31	; 0x3f
    3a28:	21 97       	sbiw	r28, 0x01	; 1
    3a2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3a2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3a2e:	0c 90       	ld	r0, X
    3a30:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a32:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a34:	31 96       	adiw	r30, 0x01	; 1
    3a36:	ff af       	std	Y+63, r31	; 0x3f
    3a38:	ee af       	std	Y+62, r30	; 0x3e
    3a3a:	ac ad       	ldd	r26, Y+60	; 0x3c
    3a3c:	bd ad       	ldd	r27, Y+61	; 0x3d
    3a3e:	0c 92       	st	X, r0
    3a40:	ec ad       	ldd	r30, Y+60	; 0x3c
    3a42:	fd ad       	ldd	r31, Y+61	; 0x3d
    3a44:	31 96       	adiw	r30, 0x01	; 1
    3a46:	fd af       	std	Y+61, r31	; 0x3d
    3a48:	ec af       	std	Y+60, r30	; 0x3c
    3a4a:	21 96       	adiw	r28, 0x01	; 1
    3a4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a4e:	21 97       	sbiw	r28, 0x01	; 1
    3a50:	f1 50       	subi	r31, 0x01	; 1
    3a52:	21 96       	adiw	r28, 0x01	; 1
    3a54:	ff af       	std	Y+63, r31	; 0x3f
    3a56:	21 97       	sbiw	r28, 0x01	; 1
    3a58:	21 96       	adiw	r28, 0x01	; 1
    3a5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a5c:	21 97       	sbiw	r28, 0x01	; 1
    3a5e:	88 23       	and	r24, r24
    3a60:	21 f7       	brne	.-56     	; 0x3a2a <PWMDrawer_DrawSignal+0xc8>
    3a62:	1f 8a       	std	Y+23, r1	; 0x17
    3a64:	1e 8a       	std	Y+22, r1	; 0x16
	GLCD_DisplayString(txt3);
    3a66:	ce 01       	movw	r24, r28
    3a68:	40 96       	adiw	r24, 0x10	; 16
    3a6a:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
    3a6e:	e9 a9       	ldd	r30, Y+49	; 0x31
    3a70:	fa a9       	ldd	r31, Y+50	; 0x32
    3a72:	80 81       	ld	r24, Z
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e0       	ldi	r26, 0x00	; 0
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	bc 01       	movw	r22, r24
    3a7e:	cd 01       	movw	r24, r26
    3a80:	0e 94 9e 1a 	call	0x353c	; 0x353c <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
    3a84:	80 91 76 00 	lds	r24, 0x0076
    3a88:	90 91 77 00 	lds	r25, 0x0077
    3a8c:	a0 91 78 00 	lds	r26, 0x0078
    3a90:	b0 91 79 00 	lds	r27, 0x0079
    3a94:	88 8f       	std	Y+24, r24	; 0x18
    3a96:	99 8f       	std	Y+25, r25	; 0x19
    3a98:	aa 8f       	std	Y+26, r26	; 0x1a
    3a9a:	bb 8f       	std	Y+27, r27	; 0x1b
    3a9c:	1c 8e       	std	Y+28, r1	; 0x1c
	GLCD_DisplayString(txt4);
    3a9e:	ce 01       	movw	r24, r28
    3aa0:	48 96       	adiw	r24, 0x18	; 24
    3aa2:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
    3aa6:	86 e0       	ldi	r24, 0x06	; 6
    3aa8:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
	uint8 pixel_width_count = 0;
    3aac:	1a 82       	std	Y+2, r1	; 0x02
    3aae:	72 c0       	rjmp	.+228    	; 0x3b94 <PWMDrawer_DrawSignal+0x232>
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    3ab0:	20 e4       	ldi	r18, 0x40	; 64
    3ab2:	30 e4       	ldi	r19, 0x40	; 64
    3ab4:	4e e7       	ldi	r20, 0x7E	; 126
    3ab6:	52 e0       	ldi	r21, 0x02	; 2
    3ab8:	62 e0       	ldi	r22, 0x02	; 2
    3aba:	70 e0       	ldi	r23, 0x00	; 0
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	8b 5f       	subi	r24, 0xFB	; 251
    3ac8:	8a 83       	std	Y+2, r24	; 0x02
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    3aca:	19 82       	std	Y+1, r1	; 0x01
    3acc:	10 c0       	rjmp	.+32     	; 0x3aee <PWMDrawer_DrawSignal+0x18c>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    3ace:	22 e0       	ldi	r18, 0x02	; 2
    3ad0:	32 e0       	ldi	r19, 0x02	; 2
    3ad2:	42 e0       	ldi	r20, 0x02	; 2
    3ad4:	52 e0       	ldi	r21, 0x02	; 2
    3ad6:	62 e0       	ldi	r22, 0x02	; 2
    3ad8:	70 e0       	ldi	r23, 0x00	; 0
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	8b 5f       	subi	r24, 0xFB	; 251
    3ae6:	8a 83       	std	Y+2, r24	; 0x02
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	e9 a9       	ldd	r30, Y+49	; 0x31
    3af0:	fa a9       	ldd	r31, Y+50	; 0x32
    3af2:	81 81       	ldd	r24, Z+1	; 0x01
    3af4:	92 81       	ldd	r25, Z+2	; 0x02
    3af6:	a3 81       	ldd	r26, Z+3	; 0x03
    3af8:	b4 81       	ldd	r27, Z+4	; 0x04
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	2b a9       	ldd	r18, Y+51	; 0x33
    3b00:	3c a9       	ldd	r19, Y+52	; 0x34
    3b02:	4d a9       	ldd	r20, Y+53	; 0x35
    3b04:	5e a9       	ldd	r21, Y+54	; 0x36
    3b06:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	bc 01       	movw	r22, r24
    3b10:	cd 01       	movw	r24, r26
    3b12:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	98 2f       	mov	r25, r24
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	89 17       	cp	r24, r25
    3b20:	b0 f2       	brcs	.-84     	; 0x3ace <PWMDrawer_DrawSignal+0x16c>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    3b22:	22 e0       	ldi	r18, 0x02	; 2
    3b24:	32 e0       	ldi	r19, 0x02	; 2
    3b26:	4e e7       	ldi	r20, 0x7E	; 126
    3b28:	50 e4       	ldi	r21, 0x40	; 64
    3b2a:	60 e4       	ldi	r22, 0x40	; 64
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	8b 5f       	subi	r24, 0xFB	; 251
    3b3a:	8a 83       	std	Y+2, r24	; 0x02
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    3b3c:	19 82       	std	Y+1, r1	; 0x01
    3b3e:	10 c0       	rjmp	.+32     	; 0x3b60 <PWMDrawer_DrawSignal+0x1fe>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    3b40:	20 e4       	ldi	r18, 0x40	; 64
    3b42:	30 e4       	ldi	r19, 0x40	; 64
    3b44:	40 e4       	ldi	r20, 0x40	; 64
    3b46:	50 e4       	ldi	r21, 0x40	; 64
    3b48:	60 e4       	ldi	r22, 0x40	; 64
    3b4a:	70 e0       	ldi	r23, 0x00	; 0
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	8b 5f       	subi	r24, 0xFB	; 251
    3b58:	8a 83       	std	Y+2, r24	; 0x02
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	e9 a9       	ldd	r30, Y+49	; 0x31
    3b62:	fa a9       	ldd	r31, Y+50	; 0x32
    3b64:	85 81       	ldd	r24, Z+5	; 0x05
    3b66:	96 81       	ldd	r25, Z+6	; 0x06
    3b68:	a7 81       	ldd	r26, Z+7	; 0x07
    3b6a:	b0 85       	ldd	r27, Z+8	; 0x08
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	2b a9       	ldd	r18, Y+51	; 0x33
    3b72:	3c a9       	ldd	r19, Y+52	; 0x34
    3b74:	4d a9       	ldd	r20, Y+53	; 0x35
    3b76:	5e a9       	ldd	r21, Y+54	; 0x36
    3b78:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	98 2f       	mov	r25, r24
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	89 17       	cp	r24, r25
    3b92:	b0 f2       	brcs	.-84     	; 0x3b40 <PWMDrawer_DrawSignal+0x1de>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	88 37       	cpi	r24, 0x78	; 120
    3b98:	08 f4       	brcc	.+2      	; 0x3b9c <PWMDrawer_DrawSignal+0x23a>
    3b9a:	8a cf       	rjmp	.-236    	; 0x3ab0 <PWMDrawer_DrawSignal+0x14e>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
    3b9c:	85 e0       	ldi	r24, 0x05	; 5
    3b9e:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3e e3       	ldi	r19, 0x3E	; 62
    3ba6:	48 e0       	ldi	r20, 0x08	; 8
    3ba8:	5c e1       	ldi	r21, 0x1C	; 28
    3baa:	6a e2       	ldi	r22, 0x2A	; 42
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    3bb6:	19 82       	std	Y+1, r1	; 0x01
    3bb8:	0d c0       	rjmp	.+26     	; 0x3bd4 <PWMDrawer_DrawSignal+0x272>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    3bba:	28 e0       	ldi	r18, 0x08	; 8
    3bbc:	38 e0       	ldi	r19, 0x08	; 8
    3bbe:	48 e0       	ldi	r20, 0x08	; 8
    3bc0:	58 e0       	ldi	r21, 0x08	; 8
    3bc2:	68 e0       	ldi	r22, 0x08	; 8
    3bc4:	70 e0       	ldi	r23, 0x00	; 0
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	e9 a9       	ldd	r30, Y+49	; 0x31
    3bd6:	fa a9       	ldd	r31, Y+50	; 0x32
    3bd8:	81 81       	ldd	r24, Z+1	; 0x01
    3bda:	92 81       	ldd	r25, Z+2	; 0x02
    3bdc:	a3 81       	ldd	r26, Z+3	; 0x03
    3bde:	b4 81       	ldd	r27, Z+4	; 0x04
    3be0:	bc 01       	movw	r22, r24
    3be2:	cd 01       	movw	r24, r26
    3be4:	2b a9       	ldd	r18, Y+51	; 0x33
    3be6:	3c a9       	ldd	r19, Y+52	; 0x34
    3be8:	4d a9       	ldd	r20, Y+53	; 0x35
    3bea:	5e a9       	ldd	r21, Y+54	; 0x36
    3bec:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	bc 01       	movw	r22, r24
    3bf6:	cd 01       	movw	r24, r26
    3bf8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	98 2f       	mov	r25, r24
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	89 17       	cp	r24, r25
    3c06:	c8 f2       	brcs	.-78     	; 0x3bba <PWMDrawer_DrawSignal+0x258>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    3c08:	28 e0       	ldi	r18, 0x08	; 8
    3c0a:	38 e0       	ldi	r19, 0x08	; 8
    3c0c:	48 e0       	ldi	r20, 0x08	; 8
    3c0e:	58 e0       	ldi	r21, 0x08	; 8
    3c10:	68 e0       	ldi	r22, 0x08	; 8
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    3c1c:	19 82       	std	Y+1, r1	; 0x01
    3c1e:	0d c0       	rjmp	.+26     	; 0x3c3a <PWMDrawer_DrawSignal+0x2d8>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    3c20:	28 e0       	ldi	r18, 0x08	; 8
    3c22:	38 e0       	ldi	r19, 0x08	; 8
    3c24:	48 e0       	ldi	r20, 0x08	; 8
    3c26:	58 e0       	ldi	r21, 0x08	; 8
    3c28:	68 e0       	ldi	r22, 0x08	; 8
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	89 83       	std	Y+1, r24	; 0x01
    3c3a:	e9 a9       	ldd	r30, Y+49	; 0x31
    3c3c:	fa a9       	ldd	r31, Y+50	; 0x32
    3c3e:	85 81       	ldd	r24, Z+5	; 0x05
    3c40:	96 81       	ldd	r25, Z+6	; 0x06
    3c42:	a7 81       	ldd	r26, Z+7	; 0x07
    3c44:	b0 85       	ldd	r27, Z+8	; 0x08
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	2b a9       	ldd	r18, Y+51	; 0x33
    3c4c:	3c a9       	ldd	r19, Y+52	; 0x34
    3c4e:	4d a9       	ldd	r20, Y+53	; 0x35
    3c50:	5e a9       	ldd	r21, Y+54	; 0x36
    3c52:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	cd 01       	movw	r24, r26
    3c5e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	98 2f       	mov	r25, r24
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	89 17       	cp	r24, r25
    3c6c:	c8 f2       	brcs	.-78     	; 0x3c20 <PWMDrawer_DrawSignal+0x2be>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    3c6e:	2a e2       	ldi	r18, 0x2A	; 42
    3c70:	3c e1       	ldi	r19, 0x1C	; 28
    3c72:	48 e0       	ldi	r20, 0x08	; 8
    3c74:	5e e3       	ldi	r21, 0x3E	; 62
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
    3c82:	84 e0       	ldi	r24, 0x04	; 4
    3c84:	0e 94 af 1b 	call	0x375e	; 0x375e <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
    3c88:	de 01       	movw	r26, r28
    3c8a:	5d 96       	adiw	r26, 0x1d	; 29
    3c8c:	23 96       	adiw	r28, 0x03	; 3
    3c8e:	bf af       	std	Y+63, r27	; 0x3f
    3c90:	ae af       	std	Y+62, r26	; 0x3e
    3c92:	23 97       	sbiw	r28, 0x03	; 3
    3c94:	eb e7       	ldi	r30, 0x7B	; 123
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	25 96       	adiw	r28, 0x05	; 5
    3c9a:	ff af       	std	Y+63, r31	; 0x3f
    3c9c:	ee af       	std	Y+62, r30	; 0x3e
    3c9e:	25 97       	sbiw	r28, 0x05	; 5
    3ca0:	f8 e0       	ldi	r31, 0x08	; 8
    3ca2:	26 96       	adiw	r28, 0x06	; 6
    3ca4:	ff af       	std	Y+63, r31	; 0x3f
    3ca6:	26 97       	sbiw	r28, 0x06	; 6
    3ca8:	25 96       	adiw	r28, 0x05	; 5
    3caa:	ae ad       	ldd	r26, Y+62	; 0x3e
    3cac:	bf ad       	ldd	r27, Y+63	; 0x3f
    3cae:	25 97       	sbiw	r28, 0x05	; 5
    3cb0:	0c 90       	ld	r0, X
    3cb2:	25 96       	adiw	r28, 0x05	; 5
    3cb4:	ee ad       	ldd	r30, Y+62	; 0x3e
    3cb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    3cb8:	25 97       	sbiw	r28, 0x05	; 5
    3cba:	31 96       	adiw	r30, 0x01	; 1
    3cbc:	25 96       	adiw	r28, 0x05	; 5
    3cbe:	ff af       	std	Y+63, r31	; 0x3f
    3cc0:	ee af       	std	Y+62, r30	; 0x3e
    3cc2:	25 97       	sbiw	r28, 0x05	; 5
    3cc4:	23 96       	adiw	r28, 0x03	; 3
    3cc6:	ae ad       	ldd	r26, Y+62	; 0x3e
    3cc8:	bf ad       	ldd	r27, Y+63	; 0x3f
    3cca:	23 97       	sbiw	r28, 0x03	; 3
    3ccc:	0c 92       	st	X, r0
    3cce:	23 96       	adiw	r28, 0x03	; 3
    3cd0:	ee ad       	ldd	r30, Y+62	; 0x3e
    3cd2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3cd4:	23 97       	sbiw	r28, 0x03	; 3
    3cd6:	31 96       	adiw	r30, 0x01	; 1
    3cd8:	23 96       	adiw	r28, 0x03	; 3
    3cda:	ff af       	std	Y+63, r31	; 0x3f
    3cdc:	ee af       	std	Y+62, r30	; 0x3e
    3cde:	23 97       	sbiw	r28, 0x03	; 3
    3ce0:	26 96       	adiw	r28, 0x06	; 6
    3ce2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ce4:	26 97       	sbiw	r28, 0x06	; 6
    3ce6:	f1 50       	subi	r31, 0x01	; 1
    3ce8:	26 96       	adiw	r28, 0x06	; 6
    3cea:	ff af       	std	Y+63, r31	; 0x3f
    3cec:	26 97       	sbiw	r28, 0x06	; 6
    3cee:	26 96       	adiw	r28, 0x06	; 6
    3cf0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cf2:	26 97       	sbiw	r28, 0x06	; 6
    3cf4:	88 23       	and	r24, r24
    3cf6:	c1 f6       	brne	.-80     	; 0x3ca8 <PWMDrawer_DrawSignal+0x346>
    3cf8:	87 e0       	ldi	r24, 0x07	; 7
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	b5 96       	adiw	r30, 0x25	; 37
    3cfe:	df 01       	movw	r26, r30
    3d00:	98 2f       	mov	r25, r24
    3d02:	1d 92       	st	X+, r1
    3d04:	9a 95       	dec	r25
    3d06:	e9 f7       	brne	.-6      	; 0x3d02 <PWMDrawer_DrawSignal+0x3a0>
	GLCD_DisplayString(txt5);
    3d08:	ce 01       	movw	r24, r28
    3d0a:	4d 96       	adiw	r24, 0x1d	; 29
    3d0c:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
    3d10:	e9 a9       	ldd	r30, Y+49	; 0x31
    3d12:	fa a9       	ldd	r31, Y+50	; 0x32
    3d14:	81 85       	ldd	r24, Z+9	; 0x09
    3d16:	92 85       	ldd	r25, Z+10	; 0x0a
    3d18:	a3 85       	ldd	r26, Z+11	; 0x0b
    3d1a:	b4 85       	ldd	r27, Z+12	; 0x0c
    3d1c:	bc 01       	movw	r22, r24
    3d1e:	cd 01       	movw	r24, r26
    3d20:	0e 94 1d 1b 	call	0x363a	; 0x363a <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
    3d24:	de 01       	movw	r26, r28
    3d26:	9c 96       	adiw	r26, 0x2c	; 44
    3d28:	28 96       	adiw	r28, 0x08	; 8
    3d2a:	bf af       	std	Y+63, r27	; 0x3f
    3d2c:	ae af       	std	Y+62, r26	; 0x3e
    3d2e:	28 97       	sbiw	r28, 0x08	; 8
    3d30:	ea e8       	ldi	r30, 0x8A	; 138
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	2a 96       	adiw	r28, 0x0a	; 10
    3d36:	ff af       	std	Y+63, r31	; 0x3f
    3d38:	ee af       	std	Y+62, r30	; 0x3e
    3d3a:	2a 97       	sbiw	r28, 0x0a	; 10
    3d3c:	f5 e0       	ldi	r31, 0x05	; 5
    3d3e:	2b 96       	adiw	r28, 0x0b	; 11
    3d40:	ff af       	std	Y+63, r31	; 0x3f
    3d42:	2b 97       	sbiw	r28, 0x0b	; 11
    3d44:	2a 96       	adiw	r28, 0x0a	; 10
    3d46:	ae ad       	ldd	r26, Y+62	; 0x3e
    3d48:	bf ad       	ldd	r27, Y+63	; 0x3f
    3d4a:	2a 97       	sbiw	r28, 0x0a	; 10
    3d4c:	0c 90       	ld	r0, X
    3d4e:	2a 96       	adiw	r28, 0x0a	; 10
    3d50:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d52:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d54:	2a 97       	sbiw	r28, 0x0a	; 10
    3d56:	31 96       	adiw	r30, 0x01	; 1
    3d58:	2a 96       	adiw	r28, 0x0a	; 10
    3d5a:	ff af       	std	Y+63, r31	; 0x3f
    3d5c:	ee af       	std	Y+62, r30	; 0x3e
    3d5e:	2a 97       	sbiw	r28, 0x0a	; 10
    3d60:	28 96       	adiw	r28, 0x08	; 8
    3d62:	ae ad       	ldd	r26, Y+62	; 0x3e
    3d64:	bf ad       	ldd	r27, Y+63	; 0x3f
    3d66:	28 97       	sbiw	r28, 0x08	; 8
    3d68:	0c 92       	st	X, r0
    3d6a:	28 96       	adiw	r28, 0x08	; 8
    3d6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d70:	28 97       	sbiw	r28, 0x08	; 8
    3d72:	31 96       	adiw	r30, 0x01	; 1
    3d74:	28 96       	adiw	r28, 0x08	; 8
    3d76:	ff af       	std	Y+63, r31	; 0x3f
    3d78:	ee af       	std	Y+62, r30	; 0x3e
    3d7a:	28 97       	sbiw	r28, 0x08	; 8
    3d7c:	2b 96       	adiw	r28, 0x0b	; 11
    3d7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d80:	2b 97       	sbiw	r28, 0x0b	; 11
    3d82:	f1 50       	subi	r31, 0x01	; 1
    3d84:	2b 96       	adiw	r28, 0x0b	; 11
    3d86:	ff af       	std	Y+63, r31	; 0x3f
    3d88:	2b 97       	sbiw	r28, 0x0b	; 11
    3d8a:	2b 96       	adiw	r28, 0x0b	; 11
    3d8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d8e:	2b 97       	sbiw	r28, 0x0b	; 11
    3d90:	88 23       	and	r24, r24
    3d92:	c1 f6       	brne	.-80     	; 0x3d44 <PWMDrawer_DrawSignal+0x3e2>
	GLCD_DisplayString(txt6);
    3d94:	ce 01       	movw	r24, r28
    3d96:	8c 96       	adiw	r24, 0x2c	; 44
    3d98:	0e 94 82 1a 	call	0x3504	; 0x3504 <GLCD_DisplayString>
}
    3d9c:	c6 5b       	subi	r28, 0xB6	; 182
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	08 95       	ret

00003db0 <main>:
#include "pwm_drawer/PWM_Drawer.h"

#include <util/delay.h>

int main(void)
{
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	a3 97       	sbiw	r28, 0x23	; 35
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
    3dc4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
    3dc8:	81 e1       	ldi	r24, 0x11	; 17
    3dca:	fe 01       	movw	r30, r28
    3dcc:	73 96       	adiw	r30, 0x13	; 19
    3dce:	df 01       	movw	r26, r30
    3dd0:	98 2f       	mov	r25, r24
    3dd2:	1d 92       	st	X+, r1
    3dd4:	9a 95       	dec	r25
    3dd6:	e9 f7       	brne	.-6      	; 0x3dd2 <main+0x22>
	float32 Scale_ms = 0.25;
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	a0 e8       	ldi	r26, 0x80	; 128
    3dde:	be e3       	ldi	r27, 0x3E	; 62
    3de0:	8f 87       	std	Y+15, r24	; 0x0f
    3de2:	98 8b       	std	Y+16, r25	; 0x10
    3de4:	a9 8b       	std	Y+17, r26	; 0x11
    3de6:	ba 8b       	std	Y+18, r27	; 0x12
    while(1)
    {
		PWMDrawer_MeasureSignal(&Signal_Data);
    3de8:	ce 01       	movw	r24, r28
    3dea:	43 96       	adiw	r24, 0x13	; 19
    3dec:	0e 94 12 1c 	call	0x3824	; 0x3824 <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 5;
    3df0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3df2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3df4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3df6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 ea       	ldi	r20, 0xA0	; 160
    3e02:	50 e4       	ldi	r21, 0x40	; 64
    3e04:	0e 94 98 03 	call	0x730	; 0x730 <__divsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	8f 87       	std	Y+15, r24	; 0x0f
    3e0e:	98 8b       	std	Y+16, r25	; 0x10
    3e10:	a9 8b       	std	Y+17, r26	; 0x11
    3e12:	ba 8b       	std	Y+18, r27	; 0x12
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
    3e14:	ce 01       	movw	r24, r28
    3e16:	43 96       	adiw	r24, 0x13	; 19
    3e18:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e1a:	38 89       	ldd	r19, Y+16	; 0x10
    3e1c:	49 89       	ldd	r20, Y+17	; 0x11
    3e1e:	5a 89       	ldd	r21, Y+18	; 0x12
    3e20:	ba 01       	movw	r22, r20
    3e22:	a9 01       	movw	r20, r18
    3e24:	0e 94 b1 1c 	call	0x3962	; 0x3962 <PWMDrawer_DrawSignal>
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	a8 ec       	ldi	r26, 0xC8	; 200
    3e2e:	b2 e4       	ldi	r27, 0x42	; 66
    3e30:	8b 87       	std	Y+11, r24	; 0x0b
    3e32:	9c 87       	std	Y+12, r25	; 0x0c
    3e34:	ad 87       	std	Y+13, r26	; 0x0d
    3e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	4a e7       	ldi	r20, 0x7A	; 122
    3e46:	55 e4       	ldi	r21, 0x45	; 69
    3e48:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	8f 83       	std	Y+7, r24	; 0x07
    3e52:	98 87       	std	Y+8, r25	; 0x08
    3e54:	a9 87       	std	Y+9, r26	; 0x09
    3e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e8       	ldi	r20, 0x80	; 128
    3e66:	5f e3       	ldi	r21, 0x3F	; 63
    3e68:	0e 94 a4 04 	call	0x948	; 0x948 <__ltsf2>
    3e6c:	88 23       	and	r24, r24
    3e6e:	2c f4       	brge	.+10     	; 0x3e7a <main+0xca>
		__ticks = 1;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
    3e78:	3f c0       	rjmp	.+126    	; 0x3ef8 <main+0x148>
	else if (__tmp > 65535)
    3e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7c:	78 85       	ldd	r23, Y+8	; 0x08
    3e7e:	89 85       	ldd	r24, Y+9	; 0x09
    3e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	3f ef       	ldi	r19, 0xFF	; 255
    3e86:	4f e7       	ldi	r20, 0x7F	; 127
    3e88:	57 e4       	ldi	r21, 0x47	; 71
    3e8a:	0e 94 44 04 	call	0x888	; 0x888 <__gtsf2>
    3e8e:	18 16       	cp	r1, r24
    3e90:	4c f5       	brge	.+82     	; 0x3ee4 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e2       	ldi	r20, 0x20	; 32
    3ea0:	51 e4       	ldi	r21, 0x41	; 65
    3ea2:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	bc 01       	movw	r22, r24
    3eac:	cd 01       	movw	r24, r26
    3eae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9e 83       	std	Y+6, r25	; 0x06
    3eb8:	8d 83       	std	Y+5, r24	; 0x05
    3eba:	0f c0       	rjmp	.+30     	; 0x3eda <main+0x12a>
    3ebc:	80 e9       	ldi	r24, 0x90	; 144
    3ebe:	91 e0       	ldi	r25, 0x01	; 1
    3ec0:	9c 83       	std	Y+4, r25	; 0x04
    3ec2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <main+0x118>
    3ecc:	9c 83       	std	Y+4, r25	; 0x04
    3ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	69 f7       	brne	.-38     	; 0x3ebc <main+0x10c>
    3ee2:	82 cf       	rjmp	.-252    	; 0x3de8 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    3efa:	9e 81       	ldd	r25, Y+6	; 0x06
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	89 83       	std	Y+1, r24	; 0x01
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <main+0x154>
    3f08:	9a 83       	std	Y+2, r25	; 0x02
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    3f0c:	6d cf       	rjmp	.-294    	; 0x3de8 <main+0x38>

00003f0e <__mulsi3>:
    3f0e:	62 9f       	mul	r22, r18
    3f10:	d0 01       	movw	r26, r0
    3f12:	73 9f       	mul	r23, r19
    3f14:	f0 01       	movw	r30, r0
    3f16:	82 9f       	mul	r24, r18
    3f18:	e0 0d       	add	r30, r0
    3f1a:	f1 1d       	adc	r31, r1
    3f1c:	64 9f       	mul	r22, r20
    3f1e:	e0 0d       	add	r30, r0
    3f20:	f1 1d       	adc	r31, r1
    3f22:	92 9f       	mul	r25, r18
    3f24:	f0 0d       	add	r31, r0
    3f26:	83 9f       	mul	r24, r19
    3f28:	f0 0d       	add	r31, r0
    3f2a:	74 9f       	mul	r23, r20
    3f2c:	f0 0d       	add	r31, r0
    3f2e:	65 9f       	mul	r22, r21
    3f30:	f0 0d       	add	r31, r0
    3f32:	99 27       	eor	r25, r25
    3f34:	72 9f       	mul	r23, r18
    3f36:	b0 0d       	add	r27, r0
    3f38:	e1 1d       	adc	r30, r1
    3f3a:	f9 1f       	adc	r31, r25
    3f3c:	63 9f       	mul	r22, r19
    3f3e:	b0 0d       	add	r27, r0
    3f40:	e1 1d       	adc	r30, r1
    3f42:	f9 1f       	adc	r31, r25
    3f44:	bd 01       	movw	r22, r26
    3f46:	cf 01       	movw	r24, r30
    3f48:	11 24       	eor	r1, r1
    3f4a:	08 95       	ret

00003f4c <__divmodsi4>:
    3f4c:	97 fb       	bst	r25, 7
    3f4e:	09 2e       	mov	r0, r25
    3f50:	05 26       	eor	r0, r21
    3f52:	0e d0       	rcall	.+28     	; 0x3f70 <__divmodsi4_neg1>
    3f54:	57 fd       	sbrc	r21, 7
    3f56:	04 d0       	rcall	.+8      	; 0x3f60 <__divmodsi4_neg2>
    3f58:	14 d0       	rcall	.+40     	; 0x3f82 <__udivmodsi4>
    3f5a:	0a d0       	rcall	.+20     	; 0x3f70 <__divmodsi4_neg1>
    3f5c:	00 1c       	adc	r0, r0
    3f5e:	38 f4       	brcc	.+14     	; 0x3f6e <__divmodsi4_exit>

00003f60 <__divmodsi4_neg2>:
    3f60:	50 95       	com	r21
    3f62:	40 95       	com	r20
    3f64:	30 95       	com	r19
    3f66:	21 95       	neg	r18
    3f68:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00003f6e <__divmodsi4_exit>:
    3f6e:	08 95       	ret

00003f70 <__divmodsi4_neg1>:
    3f70:	f6 f7       	brtc	.-4      	; 0x3f6e <__divmodsi4_exit>
    3f72:	90 95       	com	r25
    3f74:	80 95       	com	r24
    3f76:	70 95       	com	r23
    3f78:	61 95       	neg	r22
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f80:	08 95       	ret

00003f82 <__udivmodsi4>:
    3f82:	a1 e2       	ldi	r26, 0x21	; 33
    3f84:	1a 2e       	mov	r1, r26
    3f86:	aa 1b       	sub	r26, r26
    3f88:	bb 1b       	sub	r27, r27
    3f8a:	fd 01       	movw	r30, r26
    3f8c:	0d c0       	rjmp	.+26     	; 0x3fa8 <__udivmodsi4_ep>

00003f8e <__udivmodsi4_loop>:
    3f8e:	aa 1f       	adc	r26, r26
    3f90:	bb 1f       	adc	r27, r27
    3f92:	ee 1f       	adc	r30, r30
    3f94:	ff 1f       	adc	r31, r31
    3f96:	a2 17       	cp	r26, r18
    3f98:	b3 07       	cpc	r27, r19
    3f9a:	e4 07       	cpc	r30, r20
    3f9c:	f5 07       	cpc	r31, r21
    3f9e:	20 f0       	brcs	.+8      	; 0x3fa8 <__udivmodsi4_ep>
    3fa0:	a2 1b       	sub	r26, r18
    3fa2:	b3 0b       	sbc	r27, r19
    3fa4:	e4 0b       	sbc	r30, r20
    3fa6:	f5 0b       	sbc	r31, r21

00003fa8 <__udivmodsi4_ep>:
    3fa8:	66 1f       	adc	r22, r22
    3faa:	77 1f       	adc	r23, r23
    3fac:	88 1f       	adc	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	1a 94       	dec	r1
    3fb2:	69 f7       	brne	.-38     	; 0x3f8e <__udivmodsi4_loop>
    3fb4:	60 95       	com	r22
    3fb6:	70 95       	com	r23
    3fb8:	80 95       	com	r24
    3fba:	90 95       	com	r25
    3fbc:	9b 01       	movw	r18, r22
    3fbe:	ac 01       	movw	r20, r24
    3fc0:	bd 01       	movw	r22, r26
    3fc2:	cf 01       	movw	r24, r30
    3fc4:	08 95       	ret

00003fc6 <__prologue_saves__>:
    3fc6:	2f 92       	push	r2
    3fc8:	3f 92       	push	r3
    3fca:	4f 92       	push	r4
    3fcc:	5f 92       	push	r5
    3fce:	6f 92       	push	r6
    3fd0:	7f 92       	push	r7
    3fd2:	8f 92       	push	r8
    3fd4:	9f 92       	push	r9
    3fd6:	af 92       	push	r10
    3fd8:	bf 92       	push	r11
    3fda:	cf 92       	push	r12
    3fdc:	df 92       	push	r13
    3fde:	ef 92       	push	r14
    3fe0:	ff 92       	push	r15
    3fe2:	0f 93       	push	r16
    3fe4:	1f 93       	push	r17
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	ca 1b       	sub	r28, r26
    3ff0:	db 0b       	sbc	r29, r27
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	cd bf       	out	0x3d, r28	; 61
    3ffc:	09 94       	ijmp

00003ffe <__epilogue_restores__>:
    3ffe:	2a 88       	ldd	r2, Y+18	; 0x12
    4000:	39 88       	ldd	r3, Y+17	; 0x11
    4002:	48 88       	ldd	r4, Y+16	; 0x10
    4004:	5f 84       	ldd	r5, Y+15	; 0x0f
    4006:	6e 84       	ldd	r6, Y+14	; 0x0e
    4008:	7d 84       	ldd	r7, Y+13	; 0x0d
    400a:	8c 84       	ldd	r8, Y+12	; 0x0c
    400c:	9b 84       	ldd	r9, Y+11	; 0x0b
    400e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4010:	b9 84       	ldd	r11, Y+9	; 0x09
    4012:	c8 84       	ldd	r12, Y+8	; 0x08
    4014:	df 80       	ldd	r13, Y+7	; 0x07
    4016:	ee 80       	ldd	r14, Y+6	; 0x06
    4018:	fd 80       	ldd	r15, Y+5	; 0x05
    401a:	0c 81       	ldd	r16, Y+4	; 0x04
    401c:	1b 81       	ldd	r17, Y+3	; 0x03
    401e:	aa 81       	ldd	r26, Y+2	; 0x02
    4020:	b9 81       	ldd	r27, Y+1	; 0x01
    4022:	ce 0f       	add	r28, r30
    4024:	d1 1d       	adc	r29, r1
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	f8 94       	cli
    402a:	de bf       	out	0x3e, r29	; 62
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	ed 01       	movw	r28, r26
    4032:	08 95       	ret

00004034 <_exit>:
    4034:	f8 94       	cli

00004036 <__stop_program>:
    4036:	ff cf       	rjmp	.-2      	; 0x4036 <__stop_program>
